
arm_firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005e50  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c8  08006020  08006020  00016020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080060e8  080060e8  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  080060e8  080060e8  000160e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080060f0  080060f0  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080060f0  080060f0  000160f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080060f4  080060f4  000160f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  080060f8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00007b20  20000074  0800616c  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20007b94  0800616c  00027b94  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001575a  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002dd5  00000000  00000000  000357fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f40  00000000  00000000  000385d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e48  00000000  00000000  00039518  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00002a2f  00000000  00000000  0003a360  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000118ff  00000000  00000000  0003cd8f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d2142  00000000  00000000  0004e68e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001207d0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000041d4  00000000  00000000  00120820  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000074 	.word	0x20000074
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08006008 	.word	0x08006008

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000078 	.word	0x20000078
 800020c:	08006008 	.word	0x08006008

08000210 <__aeabi_uldivmod>:
 8000210:	b953      	cbnz	r3, 8000228 <__aeabi_uldivmod+0x18>
 8000212:	b94a      	cbnz	r2, 8000228 <__aeabi_uldivmod+0x18>
 8000214:	2900      	cmp	r1, #0
 8000216:	bf08      	it	eq
 8000218:	2800      	cmpeq	r0, #0
 800021a:	bf1c      	itt	ne
 800021c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000220:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000224:	f000 b974 	b.w	8000510 <__aeabi_idiv0>
 8000228:	f1ad 0c08 	sub.w	ip, sp, #8
 800022c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000230:	f000 f806 	bl	8000240 <__udivmoddi4>
 8000234:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000238:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800023c:	b004      	add	sp, #16
 800023e:	4770      	bx	lr

08000240 <__udivmoddi4>:
 8000240:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000244:	9d08      	ldr	r5, [sp, #32]
 8000246:	4604      	mov	r4, r0
 8000248:	468e      	mov	lr, r1
 800024a:	2b00      	cmp	r3, #0
 800024c:	d14d      	bne.n	80002ea <__udivmoddi4+0xaa>
 800024e:	428a      	cmp	r2, r1
 8000250:	4694      	mov	ip, r2
 8000252:	d969      	bls.n	8000328 <__udivmoddi4+0xe8>
 8000254:	fab2 f282 	clz	r2, r2
 8000258:	b152      	cbz	r2, 8000270 <__udivmoddi4+0x30>
 800025a:	fa01 f302 	lsl.w	r3, r1, r2
 800025e:	f1c2 0120 	rsb	r1, r2, #32
 8000262:	fa20 f101 	lsr.w	r1, r0, r1
 8000266:	fa0c fc02 	lsl.w	ip, ip, r2
 800026a:	ea41 0e03 	orr.w	lr, r1, r3
 800026e:	4094      	lsls	r4, r2
 8000270:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000274:	0c21      	lsrs	r1, r4, #16
 8000276:	fbbe f6f8 	udiv	r6, lr, r8
 800027a:	fa1f f78c 	uxth.w	r7, ip
 800027e:	fb08 e316 	mls	r3, r8, r6, lr
 8000282:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000286:	fb06 f107 	mul.w	r1, r6, r7
 800028a:	4299      	cmp	r1, r3
 800028c:	d90a      	bls.n	80002a4 <__udivmoddi4+0x64>
 800028e:	eb1c 0303 	adds.w	r3, ip, r3
 8000292:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000296:	f080 811f 	bcs.w	80004d8 <__udivmoddi4+0x298>
 800029a:	4299      	cmp	r1, r3
 800029c:	f240 811c 	bls.w	80004d8 <__udivmoddi4+0x298>
 80002a0:	3e02      	subs	r6, #2
 80002a2:	4463      	add	r3, ip
 80002a4:	1a5b      	subs	r3, r3, r1
 80002a6:	b2a4      	uxth	r4, r4
 80002a8:	fbb3 f0f8 	udiv	r0, r3, r8
 80002ac:	fb08 3310 	mls	r3, r8, r0, r3
 80002b0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002b4:	fb00 f707 	mul.w	r7, r0, r7
 80002b8:	42a7      	cmp	r7, r4
 80002ba:	d90a      	bls.n	80002d2 <__udivmoddi4+0x92>
 80002bc:	eb1c 0404 	adds.w	r4, ip, r4
 80002c0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002c4:	f080 810a 	bcs.w	80004dc <__udivmoddi4+0x29c>
 80002c8:	42a7      	cmp	r7, r4
 80002ca:	f240 8107 	bls.w	80004dc <__udivmoddi4+0x29c>
 80002ce:	4464      	add	r4, ip
 80002d0:	3802      	subs	r0, #2
 80002d2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002d6:	1be4      	subs	r4, r4, r7
 80002d8:	2600      	movs	r6, #0
 80002da:	b11d      	cbz	r5, 80002e4 <__udivmoddi4+0xa4>
 80002dc:	40d4      	lsrs	r4, r2
 80002de:	2300      	movs	r3, #0
 80002e0:	e9c5 4300 	strd	r4, r3, [r5]
 80002e4:	4631      	mov	r1, r6
 80002e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d909      	bls.n	8000302 <__udivmoddi4+0xc2>
 80002ee:	2d00      	cmp	r5, #0
 80002f0:	f000 80ef 	beq.w	80004d2 <__udivmoddi4+0x292>
 80002f4:	2600      	movs	r6, #0
 80002f6:	e9c5 0100 	strd	r0, r1, [r5]
 80002fa:	4630      	mov	r0, r6
 80002fc:	4631      	mov	r1, r6
 80002fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000302:	fab3 f683 	clz	r6, r3
 8000306:	2e00      	cmp	r6, #0
 8000308:	d14a      	bne.n	80003a0 <__udivmoddi4+0x160>
 800030a:	428b      	cmp	r3, r1
 800030c:	d302      	bcc.n	8000314 <__udivmoddi4+0xd4>
 800030e:	4282      	cmp	r2, r0
 8000310:	f200 80f9 	bhi.w	8000506 <__udivmoddi4+0x2c6>
 8000314:	1a84      	subs	r4, r0, r2
 8000316:	eb61 0303 	sbc.w	r3, r1, r3
 800031a:	2001      	movs	r0, #1
 800031c:	469e      	mov	lr, r3
 800031e:	2d00      	cmp	r5, #0
 8000320:	d0e0      	beq.n	80002e4 <__udivmoddi4+0xa4>
 8000322:	e9c5 4e00 	strd	r4, lr, [r5]
 8000326:	e7dd      	b.n	80002e4 <__udivmoddi4+0xa4>
 8000328:	b902      	cbnz	r2, 800032c <__udivmoddi4+0xec>
 800032a:	deff      	udf	#255	; 0xff
 800032c:	fab2 f282 	clz	r2, r2
 8000330:	2a00      	cmp	r2, #0
 8000332:	f040 8092 	bne.w	800045a <__udivmoddi4+0x21a>
 8000336:	eba1 010c 	sub.w	r1, r1, ip
 800033a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800033e:	fa1f fe8c 	uxth.w	lr, ip
 8000342:	2601      	movs	r6, #1
 8000344:	0c20      	lsrs	r0, r4, #16
 8000346:	fbb1 f3f7 	udiv	r3, r1, r7
 800034a:	fb07 1113 	mls	r1, r7, r3, r1
 800034e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000352:	fb0e f003 	mul.w	r0, lr, r3
 8000356:	4288      	cmp	r0, r1
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0x12c>
 800035a:	eb1c 0101 	adds.w	r1, ip, r1
 800035e:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000362:	d202      	bcs.n	800036a <__udivmoddi4+0x12a>
 8000364:	4288      	cmp	r0, r1
 8000366:	f200 80cb 	bhi.w	8000500 <__udivmoddi4+0x2c0>
 800036a:	4643      	mov	r3, r8
 800036c:	1a09      	subs	r1, r1, r0
 800036e:	b2a4      	uxth	r4, r4
 8000370:	fbb1 f0f7 	udiv	r0, r1, r7
 8000374:	fb07 1110 	mls	r1, r7, r0, r1
 8000378:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800037c:	fb0e fe00 	mul.w	lr, lr, r0
 8000380:	45a6      	cmp	lr, r4
 8000382:	d908      	bls.n	8000396 <__udivmoddi4+0x156>
 8000384:	eb1c 0404 	adds.w	r4, ip, r4
 8000388:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800038c:	d202      	bcs.n	8000394 <__udivmoddi4+0x154>
 800038e:	45a6      	cmp	lr, r4
 8000390:	f200 80bb 	bhi.w	800050a <__udivmoddi4+0x2ca>
 8000394:	4608      	mov	r0, r1
 8000396:	eba4 040e 	sub.w	r4, r4, lr
 800039a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800039e:	e79c      	b.n	80002da <__udivmoddi4+0x9a>
 80003a0:	f1c6 0720 	rsb	r7, r6, #32
 80003a4:	40b3      	lsls	r3, r6
 80003a6:	fa22 fc07 	lsr.w	ip, r2, r7
 80003aa:	ea4c 0c03 	orr.w	ip, ip, r3
 80003ae:	fa20 f407 	lsr.w	r4, r0, r7
 80003b2:	fa01 f306 	lsl.w	r3, r1, r6
 80003b6:	431c      	orrs	r4, r3
 80003b8:	40f9      	lsrs	r1, r7
 80003ba:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003be:	fa00 f306 	lsl.w	r3, r0, r6
 80003c2:	fbb1 f8f9 	udiv	r8, r1, r9
 80003c6:	0c20      	lsrs	r0, r4, #16
 80003c8:	fa1f fe8c 	uxth.w	lr, ip
 80003cc:	fb09 1118 	mls	r1, r9, r8, r1
 80003d0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003d4:	fb08 f00e 	mul.w	r0, r8, lr
 80003d8:	4288      	cmp	r0, r1
 80003da:	fa02 f206 	lsl.w	r2, r2, r6
 80003de:	d90b      	bls.n	80003f8 <__udivmoddi4+0x1b8>
 80003e0:	eb1c 0101 	adds.w	r1, ip, r1
 80003e4:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003e8:	f080 8088 	bcs.w	80004fc <__udivmoddi4+0x2bc>
 80003ec:	4288      	cmp	r0, r1
 80003ee:	f240 8085 	bls.w	80004fc <__udivmoddi4+0x2bc>
 80003f2:	f1a8 0802 	sub.w	r8, r8, #2
 80003f6:	4461      	add	r1, ip
 80003f8:	1a09      	subs	r1, r1, r0
 80003fa:	b2a4      	uxth	r4, r4
 80003fc:	fbb1 f0f9 	udiv	r0, r1, r9
 8000400:	fb09 1110 	mls	r1, r9, r0, r1
 8000404:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000408:	fb00 fe0e 	mul.w	lr, r0, lr
 800040c:	458e      	cmp	lr, r1
 800040e:	d908      	bls.n	8000422 <__udivmoddi4+0x1e2>
 8000410:	eb1c 0101 	adds.w	r1, ip, r1
 8000414:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000418:	d26c      	bcs.n	80004f4 <__udivmoddi4+0x2b4>
 800041a:	458e      	cmp	lr, r1
 800041c:	d96a      	bls.n	80004f4 <__udivmoddi4+0x2b4>
 800041e:	3802      	subs	r0, #2
 8000420:	4461      	add	r1, ip
 8000422:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000426:	fba0 9402 	umull	r9, r4, r0, r2
 800042a:	eba1 010e 	sub.w	r1, r1, lr
 800042e:	42a1      	cmp	r1, r4
 8000430:	46c8      	mov	r8, r9
 8000432:	46a6      	mov	lr, r4
 8000434:	d356      	bcc.n	80004e4 <__udivmoddi4+0x2a4>
 8000436:	d053      	beq.n	80004e0 <__udivmoddi4+0x2a0>
 8000438:	b15d      	cbz	r5, 8000452 <__udivmoddi4+0x212>
 800043a:	ebb3 0208 	subs.w	r2, r3, r8
 800043e:	eb61 010e 	sbc.w	r1, r1, lr
 8000442:	fa01 f707 	lsl.w	r7, r1, r7
 8000446:	fa22 f306 	lsr.w	r3, r2, r6
 800044a:	40f1      	lsrs	r1, r6
 800044c:	431f      	orrs	r7, r3
 800044e:	e9c5 7100 	strd	r7, r1, [r5]
 8000452:	2600      	movs	r6, #0
 8000454:	4631      	mov	r1, r6
 8000456:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800045a:	f1c2 0320 	rsb	r3, r2, #32
 800045e:	40d8      	lsrs	r0, r3
 8000460:	fa0c fc02 	lsl.w	ip, ip, r2
 8000464:	fa21 f303 	lsr.w	r3, r1, r3
 8000468:	4091      	lsls	r1, r2
 800046a:	4301      	orrs	r1, r0
 800046c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000470:	fa1f fe8c 	uxth.w	lr, ip
 8000474:	fbb3 f0f7 	udiv	r0, r3, r7
 8000478:	fb07 3610 	mls	r6, r7, r0, r3
 800047c:	0c0b      	lsrs	r3, r1, #16
 800047e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000482:	fb00 f60e 	mul.w	r6, r0, lr
 8000486:	429e      	cmp	r6, r3
 8000488:	fa04 f402 	lsl.w	r4, r4, r2
 800048c:	d908      	bls.n	80004a0 <__udivmoddi4+0x260>
 800048e:	eb1c 0303 	adds.w	r3, ip, r3
 8000492:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000496:	d22f      	bcs.n	80004f8 <__udivmoddi4+0x2b8>
 8000498:	429e      	cmp	r6, r3
 800049a:	d92d      	bls.n	80004f8 <__udivmoddi4+0x2b8>
 800049c:	3802      	subs	r0, #2
 800049e:	4463      	add	r3, ip
 80004a0:	1b9b      	subs	r3, r3, r6
 80004a2:	b289      	uxth	r1, r1
 80004a4:	fbb3 f6f7 	udiv	r6, r3, r7
 80004a8:	fb07 3316 	mls	r3, r7, r6, r3
 80004ac:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004b0:	fb06 f30e 	mul.w	r3, r6, lr
 80004b4:	428b      	cmp	r3, r1
 80004b6:	d908      	bls.n	80004ca <__udivmoddi4+0x28a>
 80004b8:	eb1c 0101 	adds.w	r1, ip, r1
 80004bc:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 80004c0:	d216      	bcs.n	80004f0 <__udivmoddi4+0x2b0>
 80004c2:	428b      	cmp	r3, r1
 80004c4:	d914      	bls.n	80004f0 <__udivmoddi4+0x2b0>
 80004c6:	3e02      	subs	r6, #2
 80004c8:	4461      	add	r1, ip
 80004ca:	1ac9      	subs	r1, r1, r3
 80004cc:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004d0:	e738      	b.n	8000344 <__udivmoddi4+0x104>
 80004d2:	462e      	mov	r6, r5
 80004d4:	4628      	mov	r0, r5
 80004d6:	e705      	b.n	80002e4 <__udivmoddi4+0xa4>
 80004d8:	4606      	mov	r6, r0
 80004da:	e6e3      	b.n	80002a4 <__udivmoddi4+0x64>
 80004dc:	4618      	mov	r0, r3
 80004de:	e6f8      	b.n	80002d2 <__udivmoddi4+0x92>
 80004e0:	454b      	cmp	r3, r9
 80004e2:	d2a9      	bcs.n	8000438 <__udivmoddi4+0x1f8>
 80004e4:	ebb9 0802 	subs.w	r8, r9, r2
 80004e8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004ec:	3801      	subs	r0, #1
 80004ee:	e7a3      	b.n	8000438 <__udivmoddi4+0x1f8>
 80004f0:	4646      	mov	r6, r8
 80004f2:	e7ea      	b.n	80004ca <__udivmoddi4+0x28a>
 80004f4:	4620      	mov	r0, r4
 80004f6:	e794      	b.n	8000422 <__udivmoddi4+0x1e2>
 80004f8:	4640      	mov	r0, r8
 80004fa:	e7d1      	b.n	80004a0 <__udivmoddi4+0x260>
 80004fc:	46d0      	mov	r8, sl
 80004fe:	e77b      	b.n	80003f8 <__udivmoddi4+0x1b8>
 8000500:	3b02      	subs	r3, #2
 8000502:	4461      	add	r1, ip
 8000504:	e732      	b.n	800036c <__udivmoddi4+0x12c>
 8000506:	4630      	mov	r0, r6
 8000508:	e709      	b.n	800031e <__udivmoddi4+0xde>
 800050a:	4464      	add	r4, ip
 800050c:	3802      	subs	r0, #2
 800050e:	e742      	b.n	8000396 <__udivmoddi4+0x156>

08000510 <__aeabi_idiv0>:
 8000510:	4770      	bx	lr
 8000512:	bf00      	nop

08000514 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000518:	f000 fb1c 	bl	8000b54 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800051c:	f000 f81c 	bl	8000558 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000520:	f000 f904 	bl	800072c <MX_GPIO_Init>
  MX_DMA_Init();
 8000524:	f000 f8da 	bl	80006dc <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000528:	f000 f884 	bl	8000634 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 800052c:	f000 f8ac 	bl	8000688 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000530:	f002 feee 	bl	8003310 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000534:	4a05      	ldr	r2, [pc, #20]	; (800054c <main+0x38>)
 8000536:	2100      	movs	r1, #0
 8000538:	4805      	ldr	r0, [pc, #20]	; (8000550 <main+0x3c>)
 800053a:	f002 ff33 	bl	80033a4 <osThreadNew>
 800053e:	4603      	mov	r3, r0
 8000540:	4a04      	ldr	r2, [pc, #16]	; (8000554 <main+0x40>)
 8000542:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000544:	f002 ff08 	bl	8003358 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000548:	e7fe      	b.n	8000548 <main+0x34>
 800054a:	bf00      	nop
 800054c:	08006044 	.word	0x08006044
 8000550:	08000809 	.word	0x08000809
 8000554:	200001d8 	.word	0x200001d8

08000558 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000558:	b580      	push	{r7, lr}
 800055a:	b094      	sub	sp, #80	; 0x50
 800055c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800055e:	f107 031c 	add.w	r3, r7, #28
 8000562:	2234      	movs	r2, #52	; 0x34
 8000564:	2100      	movs	r1, #0
 8000566:	4618      	mov	r0, r3
 8000568:	f005 fc84 	bl	8005e74 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800056c:	f107 0308 	add.w	r3, r7, #8
 8000570:	2200      	movs	r2, #0
 8000572:	601a      	str	r2, [r3, #0]
 8000574:	605a      	str	r2, [r3, #4]
 8000576:	609a      	str	r2, [r3, #8]
 8000578:	60da      	str	r2, [r3, #12]
 800057a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800057c:	2300      	movs	r3, #0
 800057e:	607b      	str	r3, [r7, #4]
 8000580:	4b2a      	ldr	r3, [pc, #168]	; (800062c <SystemClock_Config+0xd4>)
 8000582:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000584:	4a29      	ldr	r2, [pc, #164]	; (800062c <SystemClock_Config+0xd4>)
 8000586:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800058a:	6413      	str	r3, [r2, #64]	; 0x40
 800058c:	4b27      	ldr	r3, [pc, #156]	; (800062c <SystemClock_Config+0xd4>)
 800058e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000590:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000594:	607b      	str	r3, [r7, #4]
 8000596:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000598:	2300      	movs	r3, #0
 800059a:	603b      	str	r3, [r7, #0]
 800059c:	4b24      	ldr	r3, [pc, #144]	; (8000630 <SystemClock_Config+0xd8>)
 800059e:	681b      	ldr	r3, [r3, #0]
 80005a0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80005a4:	4a22      	ldr	r2, [pc, #136]	; (8000630 <SystemClock_Config+0xd8>)
 80005a6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80005aa:	6013      	str	r3, [r2, #0]
 80005ac:	4b20      	ldr	r3, [pc, #128]	; (8000630 <SystemClock_Config+0xd8>)
 80005ae:	681b      	ldr	r3, [r3, #0]
 80005b0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80005b4:	603b      	str	r3, [r7, #0]
 80005b6:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005b8:	2302      	movs	r3, #2
 80005ba:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005bc:	2301      	movs	r3, #1
 80005be:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005c0:	2310      	movs	r3, #16
 80005c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005c4:	2302      	movs	r3, #2
 80005c6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80005c8:	2300      	movs	r3, #0
 80005ca:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 80005cc:	2310      	movs	r3, #16
 80005ce:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 80005d0:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80005d4:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80005d6:	2304      	movs	r3, #4
 80005d8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80005da:	2302      	movs	r3, #2
 80005dc:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80005de:	2302      	movs	r3, #2
 80005e0:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005e2:	f107 031c 	add.w	r3, r7, #28
 80005e6:	4618      	mov	r0, r3
 80005e8:	f001 fcac 	bl	8001f44 <HAL_RCC_OscConfig>
 80005ec:	4603      	mov	r3, r0
 80005ee:	2b00      	cmp	r3, #0
 80005f0:	d001      	beq.n	80005f6 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80005f2:	f000 f911 	bl	8000818 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005f6:	230f      	movs	r3, #15
 80005f8:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005fa:	2302      	movs	r3, #2
 80005fc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005fe:	2300      	movs	r3, #0
 8000600:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000602:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000606:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000608:	2300      	movs	r3, #0
 800060a:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800060c:	f107 0308 	add.w	r3, r7, #8
 8000610:	2102      	movs	r1, #2
 8000612:	4618      	mov	r0, r3
 8000614:	f001 f94c 	bl	80018b0 <HAL_RCC_ClockConfig>
 8000618:	4603      	mov	r3, r0
 800061a:	2b00      	cmp	r3, #0
 800061c:	d001      	beq.n	8000622 <SystemClock_Config+0xca>
  {
    Error_Handler();
 800061e:	f000 f8fb 	bl	8000818 <Error_Handler>
  }
}
 8000622:	bf00      	nop
 8000624:	3750      	adds	r7, #80	; 0x50
 8000626:	46bd      	mov	sp, r7
 8000628:	bd80      	pop	{r7, pc}
 800062a:	bf00      	nop
 800062c:	40023800 	.word	0x40023800
 8000630:	40007000 	.word	0x40007000

08000634 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000634:	b580      	push	{r7, lr}
 8000636:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000638:	4b11      	ldr	r3, [pc, #68]	; (8000680 <MX_USART2_UART_Init+0x4c>)
 800063a:	4a12      	ldr	r2, [pc, #72]	; (8000684 <MX_USART2_UART_Init+0x50>)
 800063c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800063e:	4b10      	ldr	r3, [pc, #64]	; (8000680 <MX_USART2_UART_Init+0x4c>)
 8000640:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000644:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000646:	4b0e      	ldr	r3, [pc, #56]	; (8000680 <MX_USART2_UART_Init+0x4c>)
 8000648:	2200      	movs	r2, #0
 800064a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800064c:	4b0c      	ldr	r3, [pc, #48]	; (8000680 <MX_USART2_UART_Init+0x4c>)
 800064e:	2200      	movs	r2, #0
 8000650:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000652:	4b0b      	ldr	r3, [pc, #44]	; (8000680 <MX_USART2_UART_Init+0x4c>)
 8000654:	2200      	movs	r2, #0
 8000656:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000658:	4b09      	ldr	r3, [pc, #36]	; (8000680 <MX_USART2_UART_Init+0x4c>)
 800065a:	220c      	movs	r2, #12
 800065c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800065e:	4b08      	ldr	r3, [pc, #32]	; (8000680 <MX_USART2_UART_Init+0x4c>)
 8000660:	2200      	movs	r2, #0
 8000662:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000664:	4b06      	ldr	r3, [pc, #24]	; (8000680 <MX_USART2_UART_Init+0x4c>)
 8000666:	2200      	movs	r2, #0
 8000668:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800066a:	4805      	ldr	r0, [pc, #20]	; (8000680 <MX_USART2_UART_Init+0x4c>)
 800066c:	f001 ff08 	bl	8002480 <HAL_UART_Init>
 8000670:	4603      	mov	r3, r0
 8000672:	2b00      	cmp	r3, #0
 8000674:	d001      	beq.n	800067a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000676:	f000 f8cf 	bl	8000818 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800067a:	bf00      	nop
 800067c:	bd80      	pop	{r7, pc}
 800067e:	bf00      	nop
 8000680:	20000090 	.word	0x20000090
 8000684:	40004400 	.word	0x40004400

08000688 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800068c:	4b11      	ldr	r3, [pc, #68]	; (80006d4 <MX_USART3_UART_Init+0x4c>)
 800068e:	4a12      	ldr	r2, [pc, #72]	; (80006d8 <MX_USART3_UART_Init+0x50>)
 8000690:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000692:	4b10      	ldr	r3, [pc, #64]	; (80006d4 <MX_USART3_UART_Init+0x4c>)
 8000694:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000698:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800069a:	4b0e      	ldr	r3, [pc, #56]	; (80006d4 <MX_USART3_UART_Init+0x4c>)
 800069c:	2200      	movs	r2, #0
 800069e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80006a0:	4b0c      	ldr	r3, [pc, #48]	; (80006d4 <MX_USART3_UART_Init+0x4c>)
 80006a2:	2200      	movs	r2, #0
 80006a4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80006a6:	4b0b      	ldr	r3, [pc, #44]	; (80006d4 <MX_USART3_UART_Init+0x4c>)
 80006a8:	2200      	movs	r2, #0
 80006aa:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80006ac:	4b09      	ldr	r3, [pc, #36]	; (80006d4 <MX_USART3_UART_Init+0x4c>)
 80006ae:	220c      	movs	r2, #12
 80006b0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006b2:	4b08      	ldr	r3, [pc, #32]	; (80006d4 <MX_USART3_UART_Init+0x4c>)
 80006b4:	2200      	movs	r2, #0
 80006b6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80006b8:	4b06      	ldr	r3, [pc, #24]	; (80006d4 <MX_USART3_UART_Init+0x4c>)
 80006ba:	2200      	movs	r2, #0
 80006bc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80006be:	4805      	ldr	r0, [pc, #20]	; (80006d4 <MX_USART3_UART_Init+0x4c>)
 80006c0:	f001 fede 	bl	8002480 <HAL_UART_Init>
 80006c4:	4603      	mov	r3, r0
 80006c6:	2b00      	cmp	r3, #0
 80006c8:	d001      	beq.n	80006ce <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80006ca:	f000 f8a5 	bl	8000818 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80006ce:	bf00      	nop
 80006d0:	bd80      	pop	{r7, pc}
 80006d2:	bf00      	nop
 80006d4:	200000d4 	.word	0x200000d4
 80006d8:	40004800 	.word	0x40004800

080006dc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	b082      	sub	sp, #8
 80006e0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80006e2:	2300      	movs	r3, #0
 80006e4:	607b      	str	r3, [r7, #4]
 80006e6:	4b10      	ldr	r3, [pc, #64]	; (8000728 <MX_DMA_Init+0x4c>)
 80006e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ea:	4a0f      	ldr	r2, [pc, #60]	; (8000728 <MX_DMA_Init+0x4c>)
 80006ec:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80006f0:	6313      	str	r3, [r2, #48]	; 0x30
 80006f2:	4b0d      	ldr	r3, [pc, #52]	; (8000728 <MX_DMA_Init+0x4c>)
 80006f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006f6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80006fa:	607b      	str	r3, [r7, #4]
 80006fc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 80006fe:	2200      	movs	r2, #0
 8000700:	2105      	movs	r1, #5
 8000702:	200c      	movs	r0, #12
 8000704:	f000 fb73 	bl	8000dee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000708:	200c      	movs	r0, #12
 800070a:	f000 fb8c 	bl	8000e26 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 5, 0);
 800070e:	2200      	movs	r2, #0
 8000710:	2105      	movs	r1, #5
 8000712:	200e      	movs	r0, #14
 8000714:	f000 fb6b 	bl	8000dee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8000718:	200e      	movs	r0, #14
 800071a:	f000 fb84 	bl	8000e26 <HAL_NVIC_EnableIRQ>

}
 800071e:	bf00      	nop
 8000720:	3708      	adds	r7, #8
 8000722:	46bd      	mov	sp, r7
 8000724:	bd80      	pop	{r7, pc}
 8000726:	bf00      	nop
 8000728:	40023800 	.word	0x40023800

0800072c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	b08a      	sub	sp, #40	; 0x28
 8000730:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000732:	f107 0314 	add.w	r3, r7, #20
 8000736:	2200      	movs	r2, #0
 8000738:	601a      	str	r2, [r3, #0]
 800073a:	605a      	str	r2, [r3, #4]
 800073c:	609a      	str	r2, [r3, #8]
 800073e:	60da      	str	r2, [r3, #12]
 8000740:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000742:	2300      	movs	r3, #0
 8000744:	613b      	str	r3, [r7, #16]
 8000746:	4b2d      	ldr	r3, [pc, #180]	; (80007fc <MX_GPIO_Init+0xd0>)
 8000748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800074a:	4a2c      	ldr	r2, [pc, #176]	; (80007fc <MX_GPIO_Init+0xd0>)
 800074c:	f043 0304 	orr.w	r3, r3, #4
 8000750:	6313      	str	r3, [r2, #48]	; 0x30
 8000752:	4b2a      	ldr	r3, [pc, #168]	; (80007fc <MX_GPIO_Init+0xd0>)
 8000754:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000756:	f003 0304 	and.w	r3, r3, #4
 800075a:	613b      	str	r3, [r7, #16]
 800075c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800075e:	2300      	movs	r3, #0
 8000760:	60fb      	str	r3, [r7, #12]
 8000762:	4b26      	ldr	r3, [pc, #152]	; (80007fc <MX_GPIO_Init+0xd0>)
 8000764:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000766:	4a25      	ldr	r2, [pc, #148]	; (80007fc <MX_GPIO_Init+0xd0>)
 8000768:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800076c:	6313      	str	r3, [r2, #48]	; 0x30
 800076e:	4b23      	ldr	r3, [pc, #140]	; (80007fc <MX_GPIO_Init+0xd0>)
 8000770:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000772:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000776:	60fb      	str	r3, [r7, #12]
 8000778:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800077a:	2300      	movs	r3, #0
 800077c:	60bb      	str	r3, [r7, #8]
 800077e:	4b1f      	ldr	r3, [pc, #124]	; (80007fc <MX_GPIO_Init+0xd0>)
 8000780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000782:	4a1e      	ldr	r2, [pc, #120]	; (80007fc <MX_GPIO_Init+0xd0>)
 8000784:	f043 0301 	orr.w	r3, r3, #1
 8000788:	6313      	str	r3, [r2, #48]	; 0x30
 800078a:	4b1c      	ldr	r3, [pc, #112]	; (80007fc <MX_GPIO_Init+0xd0>)
 800078c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800078e:	f003 0301 	and.w	r3, r3, #1
 8000792:	60bb      	str	r3, [r7, #8]
 8000794:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000796:	2300      	movs	r3, #0
 8000798:	607b      	str	r3, [r7, #4]
 800079a:	4b18      	ldr	r3, [pc, #96]	; (80007fc <MX_GPIO_Init+0xd0>)
 800079c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800079e:	4a17      	ldr	r2, [pc, #92]	; (80007fc <MX_GPIO_Init+0xd0>)
 80007a0:	f043 0302 	orr.w	r3, r3, #2
 80007a4:	6313      	str	r3, [r2, #48]	; 0x30
 80007a6:	4b15      	ldr	r3, [pc, #84]	; (80007fc <MX_GPIO_Init+0xd0>)
 80007a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007aa:	f003 0302 	and.w	r3, r3, #2
 80007ae:	607b      	str	r3, [r7, #4]
 80007b0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80007b2:	2200      	movs	r2, #0
 80007b4:	2120      	movs	r1, #32
 80007b6:	4812      	ldr	r0, [pc, #72]	; (8000800 <MX_GPIO_Init+0xd4>)
 80007b8:	f001 f860 	bl	800187c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80007bc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80007c0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80007c2:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80007c6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007c8:	2300      	movs	r3, #0
 80007ca:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80007cc:	f107 0314 	add.w	r3, r7, #20
 80007d0:	4619      	mov	r1, r3
 80007d2:	480c      	ldr	r0, [pc, #48]	; (8000804 <MX_GPIO_Init+0xd8>)
 80007d4:	f000 febe 	bl	8001554 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80007d8:	2320      	movs	r3, #32
 80007da:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007dc:	2301      	movs	r3, #1
 80007de:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007e0:	2300      	movs	r3, #0
 80007e2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007e4:	2300      	movs	r3, #0
 80007e6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80007e8:	f107 0314 	add.w	r3, r7, #20
 80007ec:	4619      	mov	r1, r3
 80007ee:	4804      	ldr	r0, [pc, #16]	; (8000800 <MX_GPIO_Init+0xd4>)
 80007f0:	f000 feb0 	bl	8001554 <HAL_GPIO_Init>

}
 80007f4:	bf00      	nop
 80007f6:	3728      	adds	r7, #40	; 0x28
 80007f8:	46bd      	mov	sp, r7
 80007fa:	bd80      	pop	{r7, pc}
 80007fc:	40023800 	.word	0x40023800
 8000800:	40020000 	.word	0x40020000
 8000804:	40020800 	.word	0x40020800

08000808 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	b082      	sub	sp, #8
 800080c:	af00      	add	r7, sp, #0
 800080e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000810:	2001      	movs	r0, #1
 8000812:	f002 fe59 	bl	80034c8 <osDelay>
 8000816:	e7fb      	b.n	8000810 <StartDefaultTask+0x8>

08000818 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000818:	b480      	push	{r7}
 800081a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800081c:	b672      	cpsid	i
}
 800081e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000820:	e7fe      	b.n	8000820 <Error_Handler+0x8>
	...

08000824 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	b082      	sub	sp, #8
 8000828:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800082a:	2300      	movs	r3, #0
 800082c:	607b      	str	r3, [r7, #4]
 800082e:	4b12      	ldr	r3, [pc, #72]	; (8000878 <HAL_MspInit+0x54>)
 8000830:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000832:	4a11      	ldr	r2, [pc, #68]	; (8000878 <HAL_MspInit+0x54>)
 8000834:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000838:	6453      	str	r3, [r2, #68]	; 0x44
 800083a:	4b0f      	ldr	r3, [pc, #60]	; (8000878 <HAL_MspInit+0x54>)
 800083c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800083e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000842:	607b      	str	r3, [r7, #4]
 8000844:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000846:	2300      	movs	r3, #0
 8000848:	603b      	str	r3, [r7, #0]
 800084a:	4b0b      	ldr	r3, [pc, #44]	; (8000878 <HAL_MspInit+0x54>)
 800084c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800084e:	4a0a      	ldr	r2, [pc, #40]	; (8000878 <HAL_MspInit+0x54>)
 8000850:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000854:	6413      	str	r3, [r2, #64]	; 0x40
 8000856:	4b08      	ldr	r3, [pc, #32]	; (8000878 <HAL_MspInit+0x54>)
 8000858:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800085a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800085e:	603b      	str	r3, [r7, #0]
 8000860:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000862:	2200      	movs	r2, #0
 8000864:	210f      	movs	r1, #15
 8000866:	f06f 0001 	mvn.w	r0, #1
 800086a:	f000 fac0 	bl	8000dee <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800086e:	bf00      	nop
 8000870:	3708      	adds	r7, #8
 8000872:	46bd      	mov	sp, r7
 8000874:	bd80      	pop	{r7, pc}
 8000876:	bf00      	nop
 8000878:	40023800 	.word	0x40023800

0800087c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	b08c      	sub	sp, #48	; 0x30
 8000880:	af00      	add	r7, sp, #0
 8000882:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000884:	f107 031c 	add.w	r3, r7, #28
 8000888:	2200      	movs	r2, #0
 800088a:	601a      	str	r2, [r3, #0]
 800088c:	605a      	str	r2, [r3, #4]
 800088e:	609a      	str	r2, [r3, #8]
 8000890:	60da      	str	r2, [r3, #12]
 8000892:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	681b      	ldr	r3, [r3, #0]
 8000898:	4a66      	ldr	r2, [pc, #408]	; (8000a34 <HAL_UART_MspInit+0x1b8>)
 800089a:	4293      	cmp	r3, r2
 800089c:	d12c      	bne.n	80008f8 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800089e:	2300      	movs	r3, #0
 80008a0:	61bb      	str	r3, [r7, #24]
 80008a2:	4b65      	ldr	r3, [pc, #404]	; (8000a38 <HAL_UART_MspInit+0x1bc>)
 80008a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008a6:	4a64      	ldr	r2, [pc, #400]	; (8000a38 <HAL_UART_MspInit+0x1bc>)
 80008a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80008ac:	6413      	str	r3, [r2, #64]	; 0x40
 80008ae:	4b62      	ldr	r3, [pc, #392]	; (8000a38 <HAL_UART_MspInit+0x1bc>)
 80008b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80008b6:	61bb      	str	r3, [r7, #24]
 80008b8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008ba:	2300      	movs	r3, #0
 80008bc:	617b      	str	r3, [r7, #20]
 80008be:	4b5e      	ldr	r3, [pc, #376]	; (8000a38 <HAL_UART_MspInit+0x1bc>)
 80008c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008c2:	4a5d      	ldr	r2, [pc, #372]	; (8000a38 <HAL_UART_MspInit+0x1bc>)
 80008c4:	f043 0301 	orr.w	r3, r3, #1
 80008c8:	6313      	str	r3, [r2, #48]	; 0x30
 80008ca:	4b5b      	ldr	r3, [pc, #364]	; (8000a38 <HAL_UART_MspInit+0x1bc>)
 80008cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ce:	f003 0301 	and.w	r3, r3, #1
 80008d2:	617b      	str	r3, [r7, #20]
 80008d4:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80008d6:	230c      	movs	r3, #12
 80008d8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008da:	2302      	movs	r3, #2
 80008dc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008de:	2300      	movs	r3, #0
 80008e0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008e2:	2303      	movs	r3, #3
 80008e4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80008e6:	2307      	movs	r3, #7
 80008e8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008ea:	f107 031c 	add.w	r3, r7, #28
 80008ee:	4619      	mov	r1, r3
 80008f0:	4852      	ldr	r0, [pc, #328]	; (8000a3c <HAL_UART_MspInit+0x1c0>)
 80008f2:	f000 fe2f 	bl	8001554 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80008f6:	e099      	b.n	8000a2c <HAL_UART_MspInit+0x1b0>
  else if(huart->Instance==USART3)
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	681b      	ldr	r3, [r3, #0]
 80008fc:	4a50      	ldr	r2, [pc, #320]	; (8000a40 <HAL_UART_MspInit+0x1c4>)
 80008fe:	4293      	cmp	r3, r2
 8000900:	f040 8094 	bne.w	8000a2c <HAL_UART_MspInit+0x1b0>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000904:	2300      	movs	r3, #0
 8000906:	613b      	str	r3, [r7, #16]
 8000908:	4b4b      	ldr	r3, [pc, #300]	; (8000a38 <HAL_UART_MspInit+0x1bc>)
 800090a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800090c:	4a4a      	ldr	r2, [pc, #296]	; (8000a38 <HAL_UART_MspInit+0x1bc>)
 800090e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000912:	6413      	str	r3, [r2, #64]	; 0x40
 8000914:	4b48      	ldr	r3, [pc, #288]	; (8000a38 <HAL_UART_MspInit+0x1bc>)
 8000916:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000918:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800091c:	613b      	str	r3, [r7, #16]
 800091e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000920:	2300      	movs	r3, #0
 8000922:	60fb      	str	r3, [r7, #12]
 8000924:	4b44      	ldr	r3, [pc, #272]	; (8000a38 <HAL_UART_MspInit+0x1bc>)
 8000926:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000928:	4a43      	ldr	r2, [pc, #268]	; (8000a38 <HAL_UART_MspInit+0x1bc>)
 800092a:	f043 0304 	orr.w	r3, r3, #4
 800092e:	6313      	str	r3, [r2, #48]	; 0x30
 8000930:	4b41      	ldr	r3, [pc, #260]	; (8000a38 <HAL_UART_MspInit+0x1bc>)
 8000932:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000934:	f003 0304 	and.w	r3, r3, #4
 8000938:	60fb      	str	r3, [r7, #12]
 800093a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800093c:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000940:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000942:	2302      	movs	r3, #2
 8000944:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000946:	2300      	movs	r3, #0
 8000948:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800094a:	2303      	movs	r3, #3
 800094c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800094e:	2307      	movs	r3, #7
 8000950:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000952:	f107 031c 	add.w	r3, r7, #28
 8000956:	4619      	mov	r1, r3
 8000958:	483a      	ldr	r0, [pc, #232]	; (8000a44 <HAL_UART_MspInit+0x1c8>)
 800095a:	f000 fdfb 	bl	8001554 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream1;
 800095e:	4b3a      	ldr	r3, [pc, #232]	; (8000a48 <HAL_UART_MspInit+0x1cc>)
 8000960:	4a3a      	ldr	r2, [pc, #232]	; (8000a4c <HAL_UART_MspInit+0x1d0>)
 8000962:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 8000964:	4b38      	ldr	r3, [pc, #224]	; (8000a48 <HAL_UART_MspInit+0x1cc>)
 8000966:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800096a:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800096c:	4b36      	ldr	r3, [pc, #216]	; (8000a48 <HAL_UART_MspInit+0x1cc>)
 800096e:	2200      	movs	r2, #0
 8000970:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000972:	4b35      	ldr	r3, [pc, #212]	; (8000a48 <HAL_UART_MspInit+0x1cc>)
 8000974:	2200      	movs	r2, #0
 8000976:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000978:	4b33      	ldr	r3, [pc, #204]	; (8000a48 <HAL_UART_MspInit+0x1cc>)
 800097a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800097e:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000980:	4b31      	ldr	r3, [pc, #196]	; (8000a48 <HAL_UART_MspInit+0x1cc>)
 8000982:	2200      	movs	r2, #0
 8000984:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000986:	4b30      	ldr	r3, [pc, #192]	; (8000a48 <HAL_UART_MspInit+0x1cc>)
 8000988:	2200      	movs	r2, #0
 800098a:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 800098c:	4b2e      	ldr	r3, [pc, #184]	; (8000a48 <HAL_UART_MspInit+0x1cc>)
 800098e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000992:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8000994:	4b2c      	ldr	r3, [pc, #176]	; (8000a48 <HAL_UART_MspInit+0x1cc>)
 8000996:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800099a:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800099c:	4b2a      	ldr	r3, [pc, #168]	; (8000a48 <HAL_UART_MspInit+0x1cc>)
 800099e:	2200      	movs	r2, #0
 80009a0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 80009a2:	4829      	ldr	r0, [pc, #164]	; (8000a48 <HAL_UART_MspInit+0x1cc>)
 80009a4:	f000 fa5a 	bl	8000e5c <HAL_DMA_Init>
 80009a8:	4603      	mov	r3, r0
 80009aa:	2b00      	cmp	r3, #0
 80009ac:	d001      	beq.n	80009b2 <HAL_UART_MspInit+0x136>
      Error_Handler();
 80009ae:	f7ff ff33 	bl	8000818 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	4a24      	ldr	r2, [pc, #144]	; (8000a48 <HAL_UART_MspInit+0x1cc>)
 80009b6:	639a      	str	r2, [r3, #56]	; 0x38
 80009b8:	4a23      	ldr	r2, [pc, #140]	; (8000a48 <HAL_UART_MspInit+0x1cc>)
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart3_tx.Instance = DMA1_Stream3;
 80009be:	4b24      	ldr	r3, [pc, #144]	; (8000a50 <HAL_UART_MspInit+0x1d4>)
 80009c0:	4a24      	ldr	r2, [pc, #144]	; (8000a54 <HAL_UART_MspInit+0x1d8>)
 80009c2:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Channel = DMA_CHANNEL_4;
 80009c4:	4b22      	ldr	r3, [pc, #136]	; (8000a50 <HAL_UART_MspInit+0x1d4>)
 80009c6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80009ca:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80009cc:	4b20      	ldr	r3, [pc, #128]	; (8000a50 <HAL_UART_MspInit+0x1d4>)
 80009ce:	2240      	movs	r2, #64	; 0x40
 80009d0:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80009d2:	4b1f      	ldr	r3, [pc, #124]	; (8000a50 <HAL_UART_MspInit+0x1d4>)
 80009d4:	2200      	movs	r2, #0
 80009d6:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 80009d8:	4b1d      	ldr	r3, [pc, #116]	; (8000a50 <HAL_UART_MspInit+0x1d4>)
 80009da:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80009de:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80009e0:	4b1b      	ldr	r3, [pc, #108]	; (8000a50 <HAL_UART_MspInit+0x1d4>)
 80009e2:	2200      	movs	r2, #0
 80009e4:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80009e6:	4b1a      	ldr	r3, [pc, #104]	; (8000a50 <HAL_UART_MspInit+0x1d4>)
 80009e8:	2200      	movs	r2, #0
 80009ea:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 80009ec:	4b18      	ldr	r3, [pc, #96]	; (8000a50 <HAL_UART_MspInit+0x1d4>)
 80009ee:	2200      	movs	r2, #0
 80009f0:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80009f2:	4b17      	ldr	r3, [pc, #92]	; (8000a50 <HAL_UART_MspInit+0x1d4>)
 80009f4:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80009f8:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80009fa:	4b15      	ldr	r3, [pc, #84]	; (8000a50 <HAL_UART_MspInit+0x1d4>)
 80009fc:	2200      	movs	r2, #0
 80009fe:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8000a00:	4813      	ldr	r0, [pc, #76]	; (8000a50 <HAL_UART_MspInit+0x1d4>)
 8000a02:	f000 fa2b 	bl	8000e5c <HAL_DMA_Init>
 8000a06:	4603      	mov	r3, r0
 8000a08:	2b00      	cmp	r3, #0
 8000a0a:	d001      	beq.n	8000a10 <HAL_UART_MspInit+0x194>
      Error_Handler();
 8000a0c:	f7ff ff04 	bl	8000818 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	4a0f      	ldr	r2, [pc, #60]	; (8000a50 <HAL_UART_MspInit+0x1d4>)
 8000a14:	635a      	str	r2, [r3, #52]	; 0x34
 8000a16:	4a0e      	ldr	r2, [pc, #56]	; (8000a50 <HAL_UART_MspInit+0x1d4>)
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	2105      	movs	r1, #5
 8000a20:	2027      	movs	r0, #39	; 0x27
 8000a22:	f000 f9e4 	bl	8000dee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8000a26:	2027      	movs	r0, #39	; 0x27
 8000a28:	f000 f9fd 	bl	8000e26 <HAL_NVIC_EnableIRQ>
}
 8000a2c:	bf00      	nop
 8000a2e:	3730      	adds	r7, #48	; 0x30
 8000a30:	46bd      	mov	sp, r7
 8000a32:	bd80      	pop	{r7, pc}
 8000a34:	40004400 	.word	0x40004400
 8000a38:	40023800 	.word	0x40023800
 8000a3c:	40020000 	.word	0x40020000
 8000a40:	40004800 	.word	0x40004800
 8000a44:	40020800 	.word	0x40020800
 8000a48:	20000118 	.word	0x20000118
 8000a4c:	40026028 	.word	0x40026028
 8000a50:	20000178 	.word	0x20000178
 8000a54:	40026058 	.word	0x40026058

08000a58 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a58:	b480      	push	{r7}
 8000a5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a5c:	e7fe      	b.n	8000a5c <NMI_Handler+0x4>

08000a5e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a5e:	b480      	push	{r7}
 8000a60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a62:	e7fe      	b.n	8000a62 <HardFault_Handler+0x4>

08000a64 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a64:	b480      	push	{r7}
 8000a66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a68:	e7fe      	b.n	8000a68 <MemManage_Handler+0x4>

08000a6a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a6a:	b480      	push	{r7}
 8000a6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a6e:	e7fe      	b.n	8000a6e <BusFault_Handler+0x4>

08000a70 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a70:	b480      	push	{r7}
 8000a72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a74:	e7fe      	b.n	8000a74 <UsageFault_Handler+0x4>

08000a76 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a76:	b480      	push	{r7}
 8000a78:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a7a:	bf00      	nop
 8000a7c:	46bd      	mov	sp, r7
 8000a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a82:	4770      	bx	lr

08000a84 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a88:	f000 f8b6 	bl	8000bf8 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000a8c:	f004 f954 	bl	8004d38 <xTaskGetSchedulerState>
 8000a90:	4603      	mov	r3, r0
 8000a92:	2b01      	cmp	r3, #1
 8000a94:	d001      	beq.n	8000a9a <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8000a96:	f004 ff3f 	bl	8005918 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a9a:	bf00      	nop
 8000a9c:	bd80      	pop	{r7, pc}
	...

08000aa0 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8000aa4:	4802      	ldr	r0, [pc, #8]	; (8000ab0 <DMA1_Stream1_IRQHandler+0x10>)
 8000aa6:	f000 fb19 	bl	80010dc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8000aaa:	bf00      	nop
 8000aac:	bd80      	pop	{r7, pc}
 8000aae:	bf00      	nop
 8000ab0:	20000118 	.word	0x20000118

08000ab4 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8000ab8:	4802      	ldr	r0, [pc, #8]	; (8000ac4 <DMA1_Stream3_IRQHandler+0x10>)
 8000aba:	f000 fb0f 	bl	80010dc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8000abe:	bf00      	nop
 8000ac0:	bd80      	pop	{r7, pc}
 8000ac2:	bf00      	nop
 8000ac4:	20000178 	.word	0x20000178

08000ac8 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000acc:	4802      	ldr	r0, [pc, #8]	; (8000ad8 <USART3_IRQHandler+0x10>)
 8000ace:	f001 fd25 	bl	800251c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8000ad2:	bf00      	nop
 8000ad4:	bd80      	pop	{r7, pc}
 8000ad6:	bf00      	nop
 8000ad8:	200000d4 	.word	0x200000d4

08000adc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000adc:	b480      	push	{r7}
 8000ade:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ae0:	4b06      	ldr	r3, [pc, #24]	; (8000afc <SystemInit+0x20>)
 8000ae2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ae6:	4a05      	ldr	r2, [pc, #20]	; (8000afc <SystemInit+0x20>)
 8000ae8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000aec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000af0:	bf00      	nop
 8000af2:	46bd      	mov	sp, r7
 8000af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af8:	4770      	bx	lr
 8000afa:	bf00      	nop
 8000afc:	e000ed00 	.word	0xe000ed00

08000b00 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000b00:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000b38 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000b04:	480d      	ldr	r0, [pc, #52]	; (8000b3c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000b06:	490e      	ldr	r1, [pc, #56]	; (8000b40 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000b08:	4a0e      	ldr	r2, [pc, #56]	; (8000b44 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000b0a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b0c:	e002      	b.n	8000b14 <LoopCopyDataInit>

08000b0e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b0e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b10:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b12:	3304      	adds	r3, #4

08000b14 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b14:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b16:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b18:	d3f9      	bcc.n	8000b0e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b1a:	4a0b      	ldr	r2, [pc, #44]	; (8000b48 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000b1c:	4c0b      	ldr	r4, [pc, #44]	; (8000b4c <LoopFillZerobss+0x26>)
  movs r3, #0
 8000b1e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b20:	e001      	b.n	8000b26 <LoopFillZerobss>

08000b22 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b22:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b24:	3204      	adds	r2, #4

08000b26 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b26:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b28:	d3fb      	bcc.n	8000b22 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000b2a:	f7ff ffd7 	bl	8000adc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000b2e:	f005 f96d 	bl	8005e0c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000b32:	f7ff fcef 	bl	8000514 <main>
  bx  lr    
 8000b36:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000b38:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000b3c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b40:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8000b44:	080060f8 	.word	0x080060f8
  ldr r2, =_sbss
 8000b48:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8000b4c:	20007b94 	.word	0x20007b94

08000b50 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000b50:	e7fe      	b.n	8000b50 <ADC_IRQHandler>
	...

08000b54 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000b58:	4b0e      	ldr	r3, [pc, #56]	; (8000b94 <HAL_Init+0x40>)
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	4a0d      	ldr	r2, [pc, #52]	; (8000b94 <HAL_Init+0x40>)
 8000b5e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000b62:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000b64:	4b0b      	ldr	r3, [pc, #44]	; (8000b94 <HAL_Init+0x40>)
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	4a0a      	ldr	r2, [pc, #40]	; (8000b94 <HAL_Init+0x40>)
 8000b6a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000b6e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b70:	4b08      	ldr	r3, [pc, #32]	; (8000b94 <HAL_Init+0x40>)
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	4a07      	ldr	r2, [pc, #28]	; (8000b94 <HAL_Init+0x40>)
 8000b76:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b7a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b7c:	2003      	movs	r0, #3
 8000b7e:	f000 f92b 	bl	8000dd8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b82:	200f      	movs	r0, #15
 8000b84:	f000 f808 	bl	8000b98 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b88:	f7ff fe4c 	bl	8000824 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b8c:	2300      	movs	r3, #0
}
 8000b8e:	4618      	mov	r0, r3
 8000b90:	bd80      	pop	{r7, pc}
 8000b92:	bf00      	nop
 8000b94:	40023c00 	.word	0x40023c00

08000b98 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	b082      	sub	sp, #8
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ba0:	4b12      	ldr	r3, [pc, #72]	; (8000bec <HAL_InitTick+0x54>)
 8000ba2:	681a      	ldr	r2, [r3, #0]
 8000ba4:	4b12      	ldr	r3, [pc, #72]	; (8000bf0 <HAL_InitTick+0x58>)
 8000ba6:	781b      	ldrb	r3, [r3, #0]
 8000ba8:	4619      	mov	r1, r3
 8000baa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000bae:	fbb3 f3f1 	udiv	r3, r3, r1
 8000bb2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000bb6:	4618      	mov	r0, r3
 8000bb8:	f000 f943 	bl	8000e42 <HAL_SYSTICK_Config>
 8000bbc:	4603      	mov	r3, r0
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d001      	beq.n	8000bc6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000bc2:	2301      	movs	r3, #1
 8000bc4:	e00e      	b.n	8000be4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	2b0f      	cmp	r3, #15
 8000bca:	d80a      	bhi.n	8000be2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000bcc:	2200      	movs	r2, #0
 8000bce:	6879      	ldr	r1, [r7, #4]
 8000bd0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000bd4:	f000 f90b 	bl	8000dee <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000bd8:	4a06      	ldr	r2, [pc, #24]	; (8000bf4 <HAL_InitTick+0x5c>)
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000bde:	2300      	movs	r3, #0
 8000be0:	e000      	b.n	8000be4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000be2:	2301      	movs	r3, #1
}
 8000be4:	4618      	mov	r0, r3
 8000be6:	3708      	adds	r7, #8
 8000be8:	46bd      	mov	sp, r7
 8000bea:	bd80      	pop	{r7, pc}
 8000bec:	20000000 	.word	0x20000000
 8000bf0:	20000008 	.word	0x20000008
 8000bf4:	20000004 	.word	0x20000004

08000bf8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000bf8:	b480      	push	{r7}
 8000bfa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000bfc:	4b06      	ldr	r3, [pc, #24]	; (8000c18 <HAL_IncTick+0x20>)
 8000bfe:	781b      	ldrb	r3, [r3, #0]
 8000c00:	461a      	mov	r2, r3
 8000c02:	4b06      	ldr	r3, [pc, #24]	; (8000c1c <HAL_IncTick+0x24>)
 8000c04:	681b      	ldr	r3, [r3, #0]
 8000c06:	4413      	add	r3, r2
 8000c08:	4a04      	ldr	r2, [pc, #16]	; (8000c1c <HAL_IncTick+0x24>)
 8000c0a:	6013      	str	r3, [r2, #0]
}
 8000c0c:	bf00      	nop
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c14:	4770      	bx	lr
 8000c16:	bf00      	nop
 8000c18:	20000008 	.word	0x20000008
 8000c1c:	20003178 	.word	0x20003178

08000c20 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c20:	b480      	push	{r7}
 8000c22:	af00      	add	r7, sp, #0
  return uwTick;
 8000c24:	4b03      	ldr	r3, [pc, #12]	; (8000c34 <HAL_GetTick+0x14>)
 8000c26:	681b      	ldr	r3, [r3, #0]
}
 8000c28:	4618      	mov	r0, r3
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c30:	4770      	bx	lr
 8000c32:	bf00      	nop
 8000c34:	20003178 	.word	0x20003178

08000c38 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c38:	b480      	push	{r7}
 8000c3a:	b085      	sub	sp, #20
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	f003 0307 	and.w	r3, r3, #7
 8000c46:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c48:	4b0c      	ldr	r3, [pc, #48]	; (8000c7c <__NVIC_SetPriorityGrouping+0x44>)
 8000c4a:	68db      	ldr	r3, [r3, #12]
 8000c4c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c4e:	68ba      	ldr	r2, [r7, #8]
 8000c50:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c54:	4013      	ands	r3, r2
 8000c56:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c58:	68fb      	ldr	r3, [r7, #12]
 8000c5a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c5c:	68bb      	ldr	r3, [r7, #8]
 8000c5e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c60:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c64:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c68:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c6a:	4a04      	ldr	r2, [pc, #16]	; (8000c7c <__NVIC_SetPriorityGrouping+0x44>)
 8000c6c:	68bb      	ldr	r3, [r7, #8]
 8000c6e:	60d3      	str	r3, [r2, #12]
}
 8000c70:	bf00      	nop
 8000c72:	3714      	adds	r7, #20
 8000c74:	46bd      	mov	sp, r7
 8000c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7a:	4770      	bx	lr
 8000c7c:	e000ed00 	.word	0xe000ed00

08000c80 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c80:	b480      	push	{r7}
 8000c82:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c84:	4b04      	ldr	r3, [pc, #16]	; (8000c98 <__NVIC_GetPriorityGrouping+0x18>)
 8000c86:	68db      	ldr	r3, [r3, #12]
 8000c88:	0a1b      	lsrs	r3, r3, #8
 8000c8a:	f003 0307 	and.w	r3, r3, #7
}
 8000c8e:	4618      	mov	r0, r3
 8000c90:	46bd      	mov	sp, r7
 8000c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c96:	4770      	bx	lr
 8000c98:	e000ed00 	.word	0xe000ed00

08000c9c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c9c:	b480      	push	{r7}
 8000c9e:	b083      	sub	sp, #12
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	4603      	mov	r3, r0
 8000ca4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ca6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	db0b      	blt.n	8000cc6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000cae:	79fb      	ldrb	r3, [r7, #7]
 8000cb0:	f003 021f 	and.w	r2, r3, #31
 8000cb4:	4907      	ldr	r1, [pc, #28]	; (8000cd4 <__NVIC_EnableIRQ+0x38>)
 8000cb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cba:	095b      	lsrs	r3, r3, #5
 8000cbc:	2001      	movs	r0, #1
 8000cbe:	fa00 f202 	lsl.w	r2, r0, r2
 8000cc2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000cc6:	bf00      	nop
 8000cc8:	370c      	adds	r7, #12
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd0:	4770      	bx	lr
 8000cd2:	bf00      	nop
 8000cd4:	e000e100 	.word	0xe000e100

08000cd8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000cd8:	b480      	push	{r7}
 8000cda:	b083      	sub	sp, #12
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	4603      	mov	r3, r0
 8000ce0:	6039      	str	r1, [r7, #0]
 8000ce2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ce4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	db0a      	blt.n	8000d02 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cec:	683b      	ldr	r3, [r7, #0]
 8000cee:	b2da      	uxtb	r2, r3
 8000cf0:	490c      	ldr	r1, [pc, #48]	; (8000d24 <__NVIC_SetPriority+0x4c>)
 8000cf2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cf6:	0112      	lsls	r2, r2, #4
 8000cf8:	b2d2      	uxtb	r2, r2
 8000cfa:	440b      	add	r3, r1
 8000cfc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d00:	e00a      	b.n	8000d18 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d02:	683b      	ldr	r3, [r7, #0]
 8000d04:	b2da      	uxtb	r2, r3
 8000d06:	4908      	ldr	r1, [pc, #32]	; (8000d28 <__NVIC_SetPriority+0x50>)
 8000d08:	79fb      	ldrb	r3, [r7, #7]
 8000d0a:	f003 030f 	and.w	r3, r3, #15
 8000d0e:	3b04      	subs	r3, #4
 8000d10:	0112      	lsls	r2, r2, #4
 8000d12:	b2d2      	uxtb	r2, r2
 8000d14:	440b      	add	r3, r1
 8000d16:	761a      	strb	r2, [r3, #24]
}
 8000d18:	bf00      	nop
 8000d1a:	370c      	adds	r7, #12
 8000d1c:	46bd      	mov	sp, r7
 8000d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d22:	4770      	bx	lr
 8000d24:	e000e100 	.word	0xe000e100
 8000d28:	e000ed00 	.word	0xe000ed00

08000d2c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d2c:	b480      	push	{r7}
 8000d2e:	b089      	sub	sp, #36	; 0x24
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	60f8      	str	r0, [r7, #12]
 8000d34:	60b9      	str	r1, [r7, #8]
 8000d36:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d38:	68fb      	ldr	r3, [r7, #12]
 8000d3a:	f003 0307 	and.w	r3, r3, #7
 8000d3e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d40:	69fb      	ldr	r3, [r7, #28]
 8000d42:	f1c3 0307 	rsb	r3, r3, #7
 8000d46:	2b04      	cmp	r3, #4
 8000d48:	bf28      	it	cs
 8000d4a:	2304      	movcs	r3, #4
 8000d4c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d4e:	69fb      	ldr	r3, [r7, #28]
 8000d50:	3304      	adds	r3, #4
 8000d52:	2b06      	cmp	r3, #6
 8000d54:	d902      	bls.n	8000d5c <NVIC_EncodePriority+0x30>
 8000d56:	69fb      	ldr	r3, [r7, #28]
 8000d58:	3b03      	subs	r3, #3
 8000d5a:	e000      	b.n	8000d5e <NVIC_EncodePriority+0x32>
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d60:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000d64:	69bb      	ldr	r3, [r7, #24]
 8000d66:	fa02 f303 	lsl.w	r3, r2, r3
 8000d6a:	43da      	mvns	r2, r3
 8000d6c:	68bb      	ldr	r3, [r7, #8]
 8000d6e:	401a      	ands	r2, r3
 8000d70:	697b      	ldr	r3, [r7, #20]
 8000d72:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d74:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000d78:	697b      	ldr	r3, [r7, #20]
 8000d7a:	fa01 f303 	lsl.w	r3, r1, r3
 8000d7e:	43d9      	mvns	r1, r3
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d84:	4313      	orrs	r3, r2
         );
}
 8000d86:	4618      	mov	r0, r3
 8000d88:	3724      	adds	r7, #36	; 0x24
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d90:	4770      	bx	lr
	...

08000d94 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b082      	sub	sp, #8
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	3b01      	subs	r3, #1
 8000da0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000da4:	d301      	bcc.n	8000daa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000da6:	2301      	movs	r3, #1
 8000da8:	e00f      	b.n	8000dca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000daa:	4a0a      	ldr	r2, [pc, #40]	; (8000dd4 <SysTick_Config+0x40>)
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	3b01      	subs	r3, #1
 8000db0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000db2:	210f      	movs	r1, #15
 8000db4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000db8:	f7ff ff8e 	bl	8000cd8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000dbc:	4b05      	ldr	r3, [pc, #20]	; (8000dd4 <SysTick_Config+0x40>)
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000dc2:	4b04      	ldr	r3, [pc, #16]	; (8000dd4 <SysTick_Config+0x40>)
 8000dc4:	2207      	movs	r2, #7
 8000dc6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000dc8:	2300      	movs	r3, #0
}
 8000dca:	4618      	mov	r0, r3
 8000dcc:	3708      	adds	r7, #8
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	bd80      	pop	{r7, pc}
 8000dd2:	bf00      	nop
 8000dd4:	e000e010 	.word	0xe000e010

08000dd8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b082      	sub	sp, #8
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000de0:	6878      	ldr	r0, [r7, #4]
 8000de2:	f7ff ff29 	bl	8000c38 <__NVIC_SetPriorityGrouping>
}
 8000de6:	bf00      	nop
 8000de8:	3708      	adds	r7, #8
 8000dea:	46bd      	mov	sp, r7
 8000dec:	bd80      	pop	{r7, pc}

08000dee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000dee:	b580      	push	{r7, lr}
 8000df0:	b086      	sub	sp, #24
 8000df2:	af00      	add	r7, sp, #0
 8000df4:	4603      	mov	r3, r0
 8000df6:	60b9      	str	r1, [r7, #8]
 8000df8:	607a      	str	r2, [r7, #4]
 8000dfa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e00:	f7ff ff3e 	bl	8000c80 <__NVIC_GetPriorityGrouping>
 8000e04:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e06:	687a      	ldr	r2, [r7, #4]
 8000e08:	68b9      	ldr	r1, [r7, #8]
 8000e0a:	6978      	ldr	r0, [r7, #20]
 8000e0c:	f7ff ff8e 	bl	8000d2c <NVIC_EncodePriority>
 8000e10:	4602      	mov	r2, r0
 8000e12:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e16:	4611      	mov	r1, r2
 8000e18:	4618      	mov	r0, r3
 8000e1a:	f7ff ff5d 	bl	8000cd8 <__NVIC_SetPriority>
}
 8000e1e:	bf00      	nop
 8000e20:	3718      	adds	r7, #24
 8000e22:	46bd      	mov	sp, r7
 8000e24:	bd80      	pop	{r7, pc}

08000e26 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e26:	b580      	push	{r7, lr}
 8000e28:	b082      	sub	sp, #8
 8000e2a:	af00      	add	r7, sp, #0
 8000e2c:	4603      	mov	r3, r0
 8000e2e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e34:	4618      	mov	r0, r3
 8000e36:	f7ff ff31 	bl	8000c9c <__NVIC_EnableIRQ>
}
 8000e3a:	bf00      	nop
 8000e3c:	3708      	adds	r7, #8
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	bd80      	pop	{r7, pc}

08000e42 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e42:	b580      	push	{r7, lr}
 8000e44:	b082      	sub	sp, #8
 8000e46:	af00      	add	r7, sp, #0
 8000e48:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e4a:	6878      	ldr	r0, [r7, #4]
 8000e4c:	f7ff ffa2 	bl	8000d94 <SysTick_Config>
 8000e50:	4603      	mov	r3, r0
}
 8000e52:	4618      	mov	r0, r3
 8000e54:	3708      	adds	r7, #8
 8000e56:	46bd      	mov	sp, r7
 8000e58:	bd80      	pop	{r7, pc}
	...

08000e5c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b086      	sub	sp, #24
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000e64:	2300      	movs	r3, #0
 8000e66:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8000e68:	f7ff feda 	bl	8000c20 <HAL_GetTick>
 8000e6c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d101      	bne.n	8000e78 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8000e74:	2301      	movs	r3, #1
 8000e76:	e099      	b.n	8000fac <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	2202      	movs	r2, #2
 8000e7c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	2200      	movs	r2, #0
 8000e84:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	681a      	ldr	r2, [r3, #0]
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	f022 0201 	bic.w	r2, r2, #1
 8000e96:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000e98:	e00f      	b.n	8000eba <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000e9a:	f7ff fec1 	bl	8000c20 <HAL_GetTick>
 8000e9e:	4602      	mov	r2, r0
 8000ea0:	693b      	ldr	r3, [r7, #16]
 8000ea2:	1ad3      	subs	r3, r2, r3
 8000ea4:	2b05      	cmp	r3, #5
 8000ea6:	d908      	bls.n	8000eba <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	2220      	movs	r2, #32
 8000eac:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	2203      	movs	r2, #3
 8000eb2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8000eb6:	2303      	movs	r3, #3
 8000eb8:	e078      	b.n	8000fac <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	f003 0301 	and.w	r3, r3, #1
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d1e8      	bne.n	8000e9a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8000ed0:	697a      	ldr	r2, [r7, #20]
 8000ed2:	4b38      	ldr	r3, [pc, #224]	; (8000fb4 <HAL_DMA_Init+0x158>)
 8000ed4:	4013      	ands	r3, r2
 8000ed6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	685a      	ldr	r2, [r3, #4]
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	689b      	ldr	r3, [r3, #8]
 8000ee0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000ee6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	691b      	ldr	r3, [r3, #16]
 8000eec:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000ef2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	699b      	ldr	r3, [r3, #24]
 8000ef8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000efe:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	6a1b      	ldr	r3, [r3, #32]
 8000f04:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000f06:	697a      	ldr	r2, [r7, #20]
 8000f08:	4313      	orrs	r3, r2
 8000f0a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f10:	2b04      	cmp	r3, #4
 8000f12:	d107      	bne.n	8000f24 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f1c:	4313      	orrs	r3, r2
 8000f1e:	697a      	ldr	r2, [r7, #20]
 8000f20:	4313      	orrs	r3, r2
 8000f22:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	697a      	ldr	r2, [r7, #20]
 8000f2a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	695b      	ldr	r3, [r3, #20]
 8000f32:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8000f34:	697b      	ldr	r3, [r7, #20]
 8000f36:	f023 0307 	bic.w	r3, r3, #7
 8000f3a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f40:	697a      	ldr	r2, [r7, #20]
 8000f42:	4313      	orrs	r3, r2
 8000f44:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f4a:	2b04      	cmp	r3, #4
 8000f4c:	d117      	bne.n	8000f7e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f52:	697a      	ldr	r2, [r7, #20]
 8000f54:	4313      	orrs	r3, r2
 8000f56:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d00e      	beq.n	8000f7e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8000f60:	6878      	ldr	r0, [r7, #4]
 8000f62:	f000 fa7b 	bl	800145c <DMA_CheckFifoParam>
 8000f66:	4603      	mov	r3, r0
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d008      	beq.n	8000f7e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	2240      	movs	r2, #64	; 0x40
 8000f70:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	2201      	movs	r2, #1
 8000f76:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8000f7a:	2301      	movs	r3, #1
 8000f7c:	e016      	b.n	8000fac <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	697a      	ldr	r2, [r7, #20]
 8000f84:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8000f86:	6878      	ldr	r0, [r7, #4]
 8000f88:	f000 fa32 	bl	80013f0 <DMA_CalcBaseAndBitshift>
 8000f8c:	4603      	mov	r3, r0
 8000f8e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000f94:	223f      	movs	r2, #63	; 0x3f
 8000f96:	409a      	lsls	r2, r3
 8000f98:	68fb      	ldr	r3, [r7, #12]
 8000f9a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	2201      	movs	r2, #1
 8000fa6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8000faa:	2300      	movs	r3, #0
}
 8000fac:	4618      	mov	r0, r3
 8000fae:	3718      	adds	r7, #24
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	bd80      	pop	{r7, pc}
 8000fb4:	f010803f 	.word	0xf010803f

08000fb8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b084      	sub	sp, #16
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000fc4:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8000fc6:	f7ff fe2b 	bl	8000c20 <HAL_GetTick>
 8000fca:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000fd2:	b2db      	uxtb	r3, r3
 8000fd4:	2b02      	cmp	r3, #2
 8000fd6:	d008      	beq.n	8000fea <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	2280      	movs	r2, #128	; 0x80
 8000fdc:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8000fe6:	2301      	movs	r3, #1
 8000fe8:	e052      	b.n	8001090 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	681a      	ldr	r2, [r3, #0]
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	f022 0216 	bic.w	r2, r2, #22
 8000ff8:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	695a      	ldr	r2, [r3, #20]
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001008:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800100e:	2b00      	cmp	r3, #0
 8001010:	d103      	bne.n	800101a <HAL_DMA_Abort+0x62>
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001016:	2b00      	cmp	r3, #0
 8001018:	d007      	beq.n	800102a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	681a      	ldr	r2, [r3, #0]
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	f022 0208 	bic.w	r2, r2, #8
 8001028:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	681a      	ldr	r2, [r3, #0]
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	f022 0201 	bic.w	r2, r2, #1
 8001038:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800103a:	e013      	b.n	8001064 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800103c:	f7ff fdf0 	bl	8000c20 <HAL_GetTick>
 8001040:	4602      	mov	r2, r0
 8001042:	68bb      	ldr	r3, [r7, #8]
 8001044:	1ad3      	subs	r3, r2, r3
 8001046:	2b05      	cmp	r3, #5
 8001048:	d90c      	bls.n	8001064 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	2220      	movs	r2, #32
 800104e:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	2203      	movs	r2, #3
 8001054:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	2200      	movs	r2, #0
 800105c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001060:	2303      	movs	r3, #3
 8001062:	e015      	b.n	8001090 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	f003 0301 	and.w	r3, r3, #1
 800106e:	2b00      	cmp	r3, #0
 8001070:	d1e4      	bne.n	800103c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001076:	223f      	movs	r2, #63	; 0x3f
 8001078:	409a      	lsls	r2, r3
 800107a:	68fb      	ldr	r3, [r7, #12]
 800107c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	2201      	movs	r2, #1
 8001082:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	2200      	movs	r2, #0
 800108a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800108e:	2300      	movs	r3, #0
}
 8001090:	4618      	mov	r0, r3
 8001092:	3710      	adds	r7, #16
 8001094:	46bd      	mov	sp, r7
 8001096:	bd80      	pop	{r7, pc}

08001098 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001098:	b480      	push	{r7}
 800109a:	b083      	sub	sp, #12
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80010a6:	b2db      	uxtb	r3, r3
 80010a8:	2b02      	cmp	r3, #2
 80010aa:	d004      	beq.n	80010b6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	2280      	movs	r2, #128	; 0x80
 80010b0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80010b2:	2301      	movs	r3, #1
 80010b4:	e00c      	b.n	80010d0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	2205      	movs	r2, #5
 80010ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	681a      	ldr	r2, [r3, #0]
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	f022 0201 	bic.w	r2, r2, #1
 80010cc:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80010ce:	2300      	movs	r3, #0
}
 80010d0:	4618      	mov	r0, r3
 80010d2:	370c      	adds	r7, #12
 80010d4:	46bd      	mov	sp, r7
 80010d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010da:	4770      	bx	lr

080010dc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	b086      	sub	sp, #24
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80010e4:	2300      	movs	r3, #0
 80010e6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80010e8:	4b8e      	ldr	r3, [pc, #568]	; (8001324 <HAL_DMA_IRQHandler+0x248>)
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	4a8e      	ldr	r2, [pc, #568]	; (8001328 <HAL_DMA_IRQHandler+0x24c>)
 80010ee:	fba2 2303 	umull	r2, r3, r2, r3
 80010f2:	0a9b      	lsrs	r3, r3, #10
 80010f4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010fa:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80010fc:	693b      	ldr	r3, [r7, #16]
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001106:	2208      	movs	r2, #8
 8001108:	409a      	lsls	r2, r3
 800110a:	68fb      	ldr	r3, [r7, #12]
 800110c:	4013      	ands	r3, r2
 800110e:	2b00      	cmp	r3, #0
 8001110:	d01a      	beq.n	8001148 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	f003 0304 	and.w	r3, r3, #4
 800111c:	2b00      	cmp	r3, #0
 800111e:	d013      	beq.n	8001148 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	681a      	ldr	r2, [r3, #0]
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	f022 0204 	bic.w	r2, r2, #4
 800112e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001134:	2208      	movs	r2, #8
 8001136:	409a      	lsls	r2, r3
 8001138:	693b      	ldr	r3, [r7, #16]
 800113a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001140:	f043 0201 	orr.w	r2, r3, #1
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800114c:	2201      	movs	r2, #1
 800114e:	409a      	lsls	r2, r3
 8001150:	68fb      	ldr	r3, [r7, #12]
 8001152:	4013      	ands	r3, r2
 8001154:	2b00      	cmp	r3, #0
 8001156:	d012      	beq.n	800117e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	695b      	ldr	r3, [r3, #20]
 800115e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001162:	2b00      	cmp	r3, #0
 8001164:	d00b      	beq.n	800117e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800116a:	2201      	movs	r2, #1
 800116c:	409a      	lsls	r2, r3
 800116e:	693b      	ldr	r3, [r7, #16]
 8001170:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001176:	f043 0202 	orr.w	r2, r3, #2
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001182:	2204      	movs	r2, #4
 8001184:	409a      	lsls	r2, r3
 8001186:	68fb      	ldr	r3, [r7, #12]
 8001188:	4013      	ands	r3, r2
 800118a:	2b00      	cmp	r3, #0
 800118c:	d012      	beq.n	80011b4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	f003 0302 	and.w	r3, r3, #2
 8001198:	2b00      	cmp	r3, #0
 800119a:	d00b      	beq.n	80011b4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80011a0:	2204      	movs	r2, #4
 80011a2:	409a      	lsls	r2, r3
 80011a4:	693b      	ldr	r3, [r7, #16]
 80011a6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80011ac:	f043 0204 	orr.w	r2, r3, #4
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80011b8:	2210      	movs	r2, #16
 80011ba:	409a      	lsls	r2, r3
 80011bc:	68fb      	ldr	r3, [r7, #12]
 80011be:	4013      	ands	r3, r2
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d043      	beq.n	800124c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	f003 0308 	and.w	r3, r3, #8
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d03c      	beq.n	800124c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80011d6:	2210      	movs	r2, #16
 80011d8:	409a      	lsls	r2, r3
 80011da:	693b      	ldr	r3, [r7, #16]
 80011dc:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d018      	beq.n	800121e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d108      	bne.n	800120c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d024      	beq.n	800124c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001206:	6878      	ldr	r0, [r7, #4]
 8001208:	4798      	blx	r3
 800120a:	e01f      	b.n	800124c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001210:	2b00      	cmp	r3, #0
 8001212:	d01b      	beq.n	800124c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001218:	6878      	ldr	r0, [r7, #4]
 800121a:	4798      	blx	r3
 800121c:	e016      	b.n	800124c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001228:	2b00      	cmp	r3, #0
 800122a:	d107      	bne.n	800123c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	681a      	ldr	r2, [r3, #0]
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	f022 0208 	bic.w	r2, r2, #8
 800123a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001240:	2b00      	cmp	r3, #0
 8001242:	d003      	beq.n	800124c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001248:	6878      	ldr	r0, [r7, #4]
 800124a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001250:	2220      	movs	r2, #32
 8001252:	409a      	lsls	r2, r3
 8001254:	68fb      	ldr	r3, [r7, #12]
 8001256:	4013      	ands	r3, r2
 8001258:	2b00      	cmp	r3, #0
 800125a:	f000 808f 	beq.w	800137c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	f003 0310 	and.w	r3, r3, #16
 8001268:	2b00      	cmp	r3, #0
 800126a:	f000 8087 	beq.w	800137c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001272:	2220      	movs	r2, #32
 8001274:	409a      	lsls	r2, r3
 8001276:	693b      	ldr	r3, [r7, #16]
 8001278:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001280:	b2db      	uxtb	r3, r3
 8001282:	2b05      	cmp	r3, #5
 8001284:	d136      	bne.n	80012f4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	681a      	ldr	r2, [r3, #0]
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	f022 0216 	bic.w	r2, r2, #22
 8001294:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	695a      	ldr	r2, [r3, #20]
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80012a4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d103      	bne.n	80012b6 <HAL_DMA_IRQHandler+0x1da>
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d007      	beq.n	80012c6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	681a      	ldr	r2, [r3, #0]
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	f022 0208 	bic.w	r2, r2, #8
 80012c4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80012ca:	223f      	movs	r2, #63	; 0x3f
 80012cc:	409a      	lsls	r2, r3
 80012ce:	693b      	ldr	r3, [r7, #16]
 80012d0:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	2201      	movs	r2, #1
 80012d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	2200      	movs	r2, #0
 80012de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d07e      	beq.n	80013e8 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80012ee:	6878      	ldr	r0, [r7, #4]
 80012f0:	4798      	blx	r3
        }
        return;
 80012f2:	e079      	b.n	80013e8 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d01d      	beq.n	800133e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800130c:	2b00      	cmp	r3, #0
 800130e:	d10d      	bne.n	800132c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001314:	2b00      	cmp	r3, #0
 8001316:	d031      	beq.n	800137c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800131c:	6878      	ldr	r0, [r7, #4]
 800131e:	4798      	blx	r3
 8001320:	e02c      	b.n	800137c <HAL_DMA_IRQHandler+0x2a0>
 8001322:	bf00      	nop
 8001324:	20000000 	.word	0x20000000
 8001328:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001330:	2b00      	cmp	r3, #0
 8001332:	d023      	beq.n	800137c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001338:	6878      	ldr	r0, [r7, #4]
 800133a:	4798      	blx	r3
 800133c:	e01e      	b.n	800137c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001348:	2b00      	cmp	r3, #0
 800134a:	d10f      	bne.n	800136c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	681a      	ldr	r2, [r3, #0]
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	f022 0210 	bic.w	r2, r2, #16
 800135a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	2201      	movs	r2, #1
 8001360:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	2200      	movs	r2, #0
 8001368:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001370:	2b00      	cmp	r3, #0
 8001372:	d003      	beq.n	800137c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001378:	6878      	ldr	r0, [r7, #4]
 800137a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001380:	2b00      	cmp	r3, #0
 8001382:	d032      	beq.n	80013ea <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001388:	f003 0301 	and.w	r3, r3, #1
 800138c:	2b00      	cmp	r3, #0
 800138e:	d022      	beq.n	80013d6 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	2205      	movs	r2, #5
 8001394:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	681a      	ldr	r2, [r3, #0]
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	f022 0201 	bic.w	r2, r2, #1
 80013a6:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80013a8:	68bb      	ldr	r3, [r7, #8]
 80013aa:	3301      	adds	r3, #1
 80013ac:	60bb      	str	r3, [r7, #8]
 80013ae:	697a      	ldr	r2, [r7, #20]
 80013b0:	429a      	cmp	r2, r3
 80013b2:	d307      	bcc.n	80013c4 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	f003 0301 	and.w	r3, r3, #1
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d1f2      	bne.n	80013a8 <HAL_DMA_IRQHandler+0x2cc>
 80013c2:	e000      	b.n	80013c6 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80013c4:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	2201      	movs	r2, #1
 80013ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	2200      	movs	r2, #0
 80013d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d005      	beq.n	80013ea <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013e2:	6878      	ldr	r0, [r7, #4]
 80013e4:	4798      	blx	r3
 80013e6:	e000      	b.n	80013ea <HAL_DMA_IRQHandler+0x30e>
        return;
 80013e8:	bf00      	nop
    }
  }
}
 80013ea:	3718      	adds	r7, #24
 80013ec:	46bd      	mov	sp, r7
 80013ee:	bd80      	pop	{r7, pc}

080013f0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80013f0:	b480      	push	{r7}
 80013f2:	b085      	sub	sp, #20
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	b2db      	uxtb	r3, r3
 80013fe:	3b10      	subs	r3, #16
 8001400:	4a14      	ldr	r2, [pc, #80]	; (8001454 <DMA_CalcBaseAndBitshift+0x64>)
 8001402:	fba2 2303 	umull	r2, r3, r2, r3
 8001406:	091b      	lsrs	r3, r3, #4
 8001408:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800140a:	4a13      	ldr	r2, [pc, #76]	; (8001458 <DMA_CalcBaseAndBitshift+0x68>)
 800140c:	68fb      	ldr	r3, [r7, #12]
 800140e:	4413      	add	r3, r2
 8001410:	781b      	ldrb	r3, [r3, #0]
 8001412:	461a      	mov	r2, r3
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001418:	68fb      	ldr	r3, [r7, #12]
 800141a:	2b03      	cmp	r3, #3
 800141c:	d909      	bls.n	8001432 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001426:	f023 0303 	bic.w	r3, r3, #3
 800142a:	1d1a      	adds	r2, r3, #4
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	659a      	str	r2, [r3, #88]	; 0x58
 8001430:	e007      	b.n	8001442 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800143a:	f023 0303 	bic.w	r3, r3, #3
 800143e:	687a      	ldr	r2, [r7, #4]
 8001440:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001446:	4618      	mov	r0, r3
 8001448:	3714      	adds	r7, #20
 800144a:	46bd      	mov	sp, r7
 800144c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001450:	4770      	bx	lr
 8001452:	bf00      	nop
 8001454:	aaaaaaab 	.word	0xaaaaaaab
 8001458:	08006080 	.word	0x08006080

0800145c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800145c:	b480      	push	{r7}
 800145e:	b085      	sub	sp, #20
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001464:	2300      	movs	r3, #0
 8001466:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800146c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	699b      	ldr	r3, [r3, #24]
 8001472:	2b00      	cmp	r3, #0
 8001474:	d11f      	bne.n	80014b6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001476:	68bb      	ldr	r3, [r7, #8]
 8001478:	2b03      	cmp	r3, #3
 800147a:	d856      	bhi.n	800152a <DMA_CheckFifoParam+0xce>
 800147c:	a201      	add	r2, pc, #4	; (adr r2, 8001484 <DMA_CheckFifoParam+0x28>)
 800147e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001482:	bf00      	nop
 8001484:	08001495 	.word	0x08001495
 8001488:	080014a7 	.word	0x080014a7
 800148c:	08001495 	.word	0x08001495
 8001490:	0800152b 	.word	0x0800152b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001498:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800149c:	2b00      	cmp	r3, #0
 800149e:	d046      	beq.n	800152e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80014a0:	2301      	movs	r3, #1
 80014a2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80014a4:	e043      	b.n	800152e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014aa:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80014ae:	d140      	bne.n	8001532 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80014b0:	2301      	movs	r3, #1
 80014b2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80014b4:	e03d      	b.n	8001532 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	699b      	ldr	r3, [r3, #24]
 80014ba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80014be:	d121      	bne.n	8001504 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80014c0:	68bb      	ldr	r3, [r7, #8]
 80014c2:	2b03      	cmp	r3, #3
 80014c4:	d837      	bhi.n	8001536 <DMA_CheckFifoParam+0xda>
 80014c6:	a201      	add	r2, pc, #4	; (adr r2, 80014cc <DMA_CheckFifoParam+0x70>)
 80014c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014cc:	080014dd 	.word	0x080014dd
 80014d0:	080014e3 	.word	0x080014e3
 80014d4:	080014dd 	.word	0x080014dd
 80014d8:	080014f5 	.word	0x080014f5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80014dc:	2301      	movs	r3, #1
 80014de:	73fb      	strb	r3, [r7, #15]
      break;
 80014e0:	e030      	b.n	8001544 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014e6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d025      	beq.n	800153a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80014ee:	2301      	movs	r3, #1
 80014f0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80014f2:	e022      	b.n	800153a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014f8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80014fc:	d11f      	bne.n	800153e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80014fe:	2301      	movs	r3, #1
 8001500:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001502:	e01c      	b.n	800153e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001504:	68bb      	ldr	r3, [r7, #8]
 8001506:	2b02      	cmp	r3, #2
 8001508:	d903      	bls.n	8001512 <DMA_CheckFifoParam+0xb6>
 800150a:	68bb      	ldr	r3, [r7, #8]
 800150c:	2b03      	cmp	r3, #3
 800150e:	d003      	beq.n	8001518 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001510:	e018      	b.n	8001544 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001512:	2301      	movs	r3, #1
 8001514:	73fb      	strb	r3, [r7, #15]
      break;
 8001516:	e015      	b.n	8001544 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800151c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001520:	2b00      	cmp	r3, #0
 8001522:	d00e      	beq.n	8001542 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001524:	2301      	movs	r3, #1
 8001526:	73fb      	strb	r3, [r7, #15]
      break;
 8001528:	e00b      	b.n	8001542 <DMA_CheckFifoParam+0xe6>
      break;
 800152a:	bf00      	nop
 800152c:	e00a      	b.n	8001544 <DMA_CheckFifoParam+0xe8>
      break;
 800152e:	bf00      	nop
 8001530:	e008      	b.n	8001544 <DMA_CheckFifoParam+0xe8>
      break;
 8001532:	bf00      	nop
 8001534:	e006      	b.n	8001544 <DMA_CheckFifoParam+0xe8>
      break;
 8001536:	bf00      	nop
 8001538:	e004      	b.n	8001544 <DMA_CheckFifoParam+0xe8>
      break;
 800153a:	bf00      	nop
 800153c:	e002      	b.n	8001544 <DMA_CheckFifoParam+0xe8>
      break;   
 800153e:	bf00      	nop
 8001540:	e000      	b.n	8001544 <DMA_CheckFifoParam+0xe8>
      break;
 8001542:	bf00      	nop
    }
  } 
  
  return status; 
 8001544:	7bfb      	ldrb	r3, [r7, #15]
}
 8001546:	4618      	mov	r0, r3
 8001548:	3714      	adds	r7, #20
 800154a:	46bd      	mov	sp, r7
 800154c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001550:	4770      	bx	lr
 8001552:	bf00      	nop

08001554 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001554:	b480      	push	{r7}
 8001556:	b089      	sub	sp, #36	; 0x24
 8001558:	af00      	add	r7, sp, #0
 800155a:	6078      	str	r0, [r7, #4]
 800155c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800155e:	2300      	movs	r3, #0
 8001560:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001562:	2300      	movs	r3, #0
 8001564:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001566:	2300      	movs	r3, #0
 8001568:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800156a:	2300      	movs	r3, #0
 800156c:	61fb      	str	r3, [r7, #28]
 800156e:	e165      	b.n	800183c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001570:	2201      	movs	r2, #1
 8001572:	69fb      	ldr	r3, [r7, #28]
 8001574:	fa02 f303 	lsl.w	r3, r2, r3
 8001578:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800157a:	683b      	ldr	r3, [r7, #0]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	697a      	ldr	r2, [r7, #20]
 8001580:	4013      	ands	r3, r2
 8001582:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001584:	693a      	ldr	r2, [r7, #16]
 8001586:	697b      	ldr	r3, [r7, #20]
 8001588:	429a      	cmp	r2, r3
 800158a:	f040 8154 	bne.w	8001836 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800158e:	683b      	ldr	r3, [r7, #0]
 8001590:	685b      	ldr	r3, [r3, #4]
 8001592:	f003 0303 	and.w	r3, r3, #3
 8001596:	2b01      	cmp	r3, #1
 8001598:	d005      	beq.n	80015a6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800159a:	683b      	ldr	r3, [r7, #0]
 800159c:	685b      	ldr	r3, [r3, #4]
 800159e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80015a2:	2b02      	cmp	r3, #2
 80015a4:	d130      	bne.n	8001608 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	689b      	ldr	r3, [r3, #8]
 80015aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80015ac:	69fb      	ldr	r3, [r7, #28]
 80015ae:	005b      	lsls	r3, r3, #1
 80015b0:	2203      	movs	r2, #3
 80015b2:	fa02 f303 	lsl.w	r3, r2, r3
 80015b6:	43db      	mvns	r3, r3
 80015b8:	69ba      	ldr	r2, [r7, #24]
 80015ba:	4013      	ands	r3, r2
 80015bc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80015be:	683b      	ldr	r3, [r7, #0]
 80015c0:	68da      	ldr	r2, [r3, #12]
 80015c2:	69fb      	ldr	r3, [r7, #28]
 80015c4:	005b      	lsls	r3, r3, #1
 80015c6:	fa02 f303 	lsl.w	r3, r2, r3
 80015ca:	69ba      	ldr	r2, [r7, #24]
 80015cc:	4313      	orrs	r3, r2
 80015ce:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	69ba      	ldr	r2, [r7, #24]
 80015d4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	685b      	ldr	r3, [r3, #4]
 80015da:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80015dc:	2201      	movs	r2, #1
 80015de:	69fb      	ldr	r3, [r7, #28]
 80015e0:	fa02 f303 	lsl.w	r3, r2, r3
 80015e4:	43db      	mvns	r3, r3
 80015e6:	69ba      	ldr	r2, [r7, #24]
 80015e8:	4013      	ands	r3, r2
 80015ea:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80015ec:	683b      	ldr	r3, [r7, #0]
 80015ee:	685b      	ldr	r3, [r3, #4]
 80015f0:	091b      	lsrs	r3, r3, #4
 80015f2:	f003 0201 	and.w	r2, r3, #1
 80015f6:	69fb      	ldr	r3, [r7, #28]
 80015f8:	fa02 f303 	lsl.w	r3, r2, r3
 80015fc:	69ba      	ldr	r2, [r7, #24]
 80015fe:	4313      	orrs	r3, r2
 8001600:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	69ba      	ldr	r2, [r7, #24]
 8001606:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001608:	683b      	ldr	r3, [r7, #0]
 800160a:	685b      	ldr	r3, [r3, #4]
 800160c:	f003 0303 	and.w	r3, r3, #3
 8001610:	2b03      	cmp	r3, #3
 8001612:	d017      	beq.n	8001644 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	68db      	ldr	r3, [r3, #12]
 8001618:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800161a:	69fb      	ldr	r3, [r7, #28]
 800161c:	005b      	lsls	r3, r3, #1
 800161e:	2203      	movs	r2, #3
 8001620:	fa02 f303 	lsl.w	r3, r2, r3
 8001624:	43db      	mvns	r3, r3
 8001626:	69ba      	ldr	r2, [r7, #24]
 8001628:	4013      	ands	r3, r2
 800162a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800162c:	683b      	ldr	r3, [r7, #0]
 800162e:	689a      	ldr	r2, [r3, #8]
 8001630:	69fb      	ldr	r3, [r7, #28]
 8001632:	005b      	lsls	r3, r3, #1
 8001634:	fa02 f303 	lsl.w	r3, r2, r3
 8001638:	69ba      	ldr	r2, [r7, #24]
 800163a:	4313      	orrs	r3, r2
 800163c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	69ba      	ldr	r2, [r7, #24]
 8001642:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001644:	683b      	ldr	r3, [r7, #0]
 8001646:	685b      	ldr	r3, [r3, #4]
 8001648:	f003 0303 	and.w	r3, r3, #3
 800164c:	2b02      	cmp	r3, #2
 800164e:	d123      	bne.n	8001698 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001650:	69fb      	ldr	r3, [r7, #28]
 8001652:	08da      	lsrs	r2, r3, #3
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	3208      	adds	r2, #8
 8001658:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800165c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800165e:	69fb      	ldr	r3, [r7, #28]
 8001660:	f003 0307 	and.w	r3, r3, #7
 8001664:	009b      	lsls	r3, r3, #2
 8001666:	220f      	movs	r2, #15
 8001668:	fa02 f303 	lsl.w	r3, r2, r3
 800166c:	43db      	mvns	r3, r3
 800166e:	69ba      	ldr	r2, [r7, #24]
 8001670:	4013      	ands	r3, r2
 8001672:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001674:	683b      	ldr	r3, [r7, #0]
 8001676:	691a      	ldr	r2, [r3, #16]
 8001678:	69fb      	ldr	r3, [r7, #28]
 800167a:	f003 0307 	and.w	r3, r3, #7
 800167e:	009b      	lsls	r3, r3, #2
 8001680:	fa02 f303 	lsl.w	r3, r2, r3
 8001684:	69ba      	ldr	r2, [r7, #24]
 8001686:	4313      	orrs	r3, r2
 8001688:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800168a:	69fb      	ldr	r3, [r7, #28]
 800168c:	08da      	lsrs	r2, r3, #3
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	3208      	adds	r2, #8
 8001692:	69b9      	ldr	r1, [r7, #24]
 8001694:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800169e:	69fb      	ldr	r3, [r7, #28]
 80016a0:	005b      	lsls	r3, r3, #1
 80016a2:	2203      	movs	r2, #3
 80016a4:	fa02 f303 	lsl.w	r3, r2, r3
 80016a8:	43db      	mvns	r3, r3
 80016aa:	69ba      	ldr	r2, [r7, #24]
 80016ac:	4013      	ands	r3, r2
 80016ae:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80016b0:	683b      	ldr	r3, [r7, #0]
 80016b2:	685b      	ldr	r3, [r3, #4]
 80016b4:	f003 0203 	and.w	r2, r3, #3
 80016b8:	69fb      	ldr	r3, [r7, #28]
 80016ba:	005b      	lsls	r3, r3, #1
 80016bc:	fa02 f303 	lsl.w	r3, r2, r3
 80016c0:	69ba      	ldr	r2, [r7, #24]
 80016c2:	4313      	orrs	r3, r2
 80016c4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	69ba      	ldr	r2, [r7, #24]
 80016ca:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80016cc:	683b      	ldr	r3, [r7, #0]
 80016ce:	685b      	ldr	r3, [r3, #4]
 80016d0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	f000 80ae 	beq.w	8001836 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016da:	2300      	movs	r3, #0
 80016dc:	60fb      	str	r3, [r7, #12]
 80016de:	4b5d      	ldr	r3, [pc, #372]	; (8001854 <HAL_GPIO_Init+0x300>)
 80016e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016e2:	4a5c      	ldr	r2, [pc, #368]	; (8001854 <HAL_GPIO_Init+0x300>)
 80016e4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80016e8:	6453      	str	r3, [r2, #68]	; 0x44
 80016ea:	4b5a      	ldr	r3, [pc, #360]	; (8001854 <HAL_GPIO_Init+0x300>)
 80016ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80016f2:	60fb      	str	r3, [r7, #12]
 80016f4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80016f6:	4a58      	ldr	r2, [pc, #352]	; (8001858 <HAL_GPIO_Init+0x304>)
 80016f8:	69fb      	ldr	r3, [r7, #28]
 80016fa:	089b      	lsrs	r3, r3, #2
 80016fc:	3302      	adds	r3, #2
 80016fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001702:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001704:	69fb      	ldr	r3, [r7, #28]
 8001706:	f003 0303 	and.w	r3, r3, #3
 800170a:	009b      	lsls	r3, r3, #2
 800170c:	220f      	movs	r2, #15
 800170e:	fa02 f303 	lsl.w	r3, r2, r3
 8001712:	43db      	mvns	r3, r3
 8001714:	69ba      	ldr	r2, [r7, #24]
 8001716:	4013      	ands	r3, r2
 8001718:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	4a4f      	ldr	r2, [pc, #316]	; (800185c <HAL_GPIO_Init+0x308>)
 800171e:	4293      	cmp	r3, r2
 8001720:	d025      	beq.n	800176e <HAL_GPIO_Init+0x21a>
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	4a4e      	ldr	r2, [pc, #312]	; (8001860 <HAL_GPIO_Init+0x30c>)
 8001726:	4293      	cmp	r3, r2
 8001728:	d01f      	beq.n	800176a <HAL_GPIO_Init+0x216>
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	4a4d      	ldr	r2, [pc, #308]	; (8001864 <HAL_GPIO_Init+0x310>)
 800172e:	4293      	cmp	r3, r2
 8001730:	d019      	beq.n	8001766 <HAL_GPIO_Init+0x212>
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	4a4c      	ldr	r2, [pc, #304]	; (8001868 <HAL_GPIO_Init+0x314>)
 8001736:	4293      	cmp	r3, r2
 8001738:	d013      	beq.n	8001762 <HAL_GPIO_Init+0x20e>
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	4a4b      	ldr	r2, [pc, #300]	; (800186c <HAL_GPIO_Init+0x318>)
 800173e:	4293      	cmp	r3, r2
 8001740:	d00d      	beq.n	800175e <HAL_GPIO_Init+0x20a>
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	4a4a      	ldr	r2, [pc, #296]	; (8001870 <HAL_GPIO_Init+0x31c>)
 8001746:	4293      	cmp	r3, r2
 8001748:	d007      	beq.n	800175a <HAL_GPIO_Init+0x206>
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	4a49      	ldr	r2, [pc, #292]	; (8001874 <HAL_GPIO_Init+0x320>)
 800174e:	4293      	cmp	r3, r2
 8001750:	d101      	bne.n	8001756 <HAL_GPIO_Init+0x202>
 8001752:	2306      	movs	r3, #6
 8001754:	e00c      	b.n	8001770 <HAL_GPIO_Init+0x21c>
 8001756:	2307      	movs	r3, #7
 8001758:	e00a      	b.n	8001770 <HAL_GPIO_Init+0x21c>
 800175a:	2305      	movs	r3, #5
 800175c:	e008      	b.n	8001770 <HAL_GPIO_Init+0x21c>
 800175e:	2304      	movs	r3, #4
 8001760:	e006      	b.n	8001770 <HAL_GPIO_Init+0x21c>
 8001762:	2303      	movs	r3, #3
 8001764:	e004      	b.n	8001770 <HAL_GPIO_Init+0x21c>
 8001766:	2302      	movs	r3, #2
 8001768:	e002      	b.n	8001770 <HAL_GPIO_Init+0x21c>
 800176a:	2301      	movs	r3, #1
 800176c:	e000      	b.n	8001770 <HAL_GPIO_Init+0x21c>
 800176e:	2300      	movs	r3, #0
 8001770:	69fa      	ldr	r2, [r7, #28]
 8001772:	f002 0203 	and.w	r2, r2, #3
 8001776:	0092      	lsls	r2, r2, #2
 8001778:	4093      	lsls	r3, r2
 800177a:	69ba      	ldr	r2, [r7, #24]
 800177c:	4313      	orrs	r3, r2
 800177e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001780:	4935      	ldr	r1, [pc, #212]	; (8001858 <HAL_GPIO_Init+0x304>)
 8001782:	69fb      	ldr	r3, [r7, #28]
 8001784:	089b      	lsrs	r3, r3, #2
 8001786:	3302      	adds	r3, #2
 8001788:	69ba      	ldr	r2, [r7, #24]
 800178a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800178e:	4b3a      	ldr	r3, [pc, #232]	; (8001878 <HAL_GPIO_Init+0x324>)
 8001790:	689b      	ldr	r3, [r3, #8]
 8001792:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001794:	693b      	ldr	r3, [r7, #16]
 8001796:	43db      	mvns	r3, r3
 8001798:	69ba      	ldr	r2, [r7, #24]
 800179a:	4013      	ands	r3, r2
 800179c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800179e:	683b      	ldr	r3, [r7, #0]
 80017a0:	685b      	ldr	r3, [r3, #4]
 80017a2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d003      	beq.n	80017b2 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80017aa:	69ba      	ldr	r2, [r7, #24]
 80017ac:	693b      	ldr	r3, [r7, #16]
 80017ae:	4313      	orrs	r3, r2
 80017b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80017b2:	4a31      	ldr	r2, [pc, #196]	; (8001878 <HAL_GPIO_Init+0x324>)
 80017b4:	69bb      	ldr	r3, [r7, #24]
 80017b6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80017b8:	4b2f      	ldr	r3, [pc, #188]	; (8001878 <HAL_GPIO_Init+0x324>)
 80017ba:	68db      	ldr	r3, [r3, #12]
 80017bc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017be:	693b      	ldr	r3, [r7, #16]
 80017c0:	43db      	mvns	r3, r3
 80017c2:	69ba      	ldr	r2, [r7, #24]
 80017c4:	4013      	ands	r3, r2
 80017c6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80017c8:	683b      	ldr	r3, [r7, #0]
 80017ca:	685b      	ldr	r3, [r3, #4]
 80017cc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d003      	beq.n	80017dc <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80017d4:	69ba      	ldr	r2, [r7, #24]
 80017d6:	693b      	ldr	r3, [r7, #16]
 80017d8:	4313      	orrs	r3, r2
 80017da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80017dc:	4a26      	ldr	r2, [pc, #152]	; (8001878 <HAL_GPIO_Init+0x324>)
 80017de:	69bb      	ldr	r3, [r7, #24]
 80017e0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80017e2:	4b25      	ldr	r3, [pc, #148]	; (8001878 <HAL_GPIO_Init+0x324>)
 80017e4:	685b      	ldr	r3, [r3, #4]
 80017e6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017e8:	693b      	ldr	r3, [r7, #16]
 80017ea:	43db      	mvns	r3, r3
 80017ec:	69ba      	ldr	r2, [r7, #24]
 80017ee:	4013      	ands	r3, r2
 80017f0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80017f2:	683b      	ldr	r3, [r7, #0]
 80017f4:	685b      	ldr	r3, [r3, #4]
 80017f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d003      	beq.n	8001806 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80017fe:	69ba      	ldr	r2, [r7, #24]
 8001800:	693b      	ldr	r3, [r7, #16]
 8001802:	4313      	orrs	r3, r2
 8001804:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001806:	4a1c      	ldr	r2, [pc, #112]	; (8001878 <HAL_GPIO_Init+0x324>)
 8001808:	69bb      	ldr	r3, [r7, #24]
 800180a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800180c:	4b1a      	ldr	r3, [pc, #104]	; (8001878 <HAL_GPIO_Init+0x324>)
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001812:	693b      	ldr	r3, [r7, #16]
 8001814:	43db      	mvns	r3, r3
 8001816:	69ba      	ldr	r2, [r7, #24]
 8001818:	4013      	ands	r3, r2
 800181a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800181c:	683b      	ldr	r3, [r7, #0]
 800181e:	685b      	ldr	r3, [r3, #4]
 8001820:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001824:	2b00      	cmp	r3, #0
 8001826:	d003      	beq.n	8001830 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001828:	69ba      	ldr	r2, [r7, #24]
 800182a:	693b      	ldr	r3, [r7, #16]
 800182c:	4313      	orrs	r3, r2
 800182e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001830:	4a11      	ldr	r2, [pc, #68]	; (8001878 <HAL_GPIO_Init+0x324>)
 8001832:	69bb      	ldr	r3, [r7, #24]
 8001834:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001836:	69fb      	ldr	r3, [r7, #28]
 8001838:	3301      	adds	r3, #1
 800183a:	61fb      	str	r3, [r7, #28]
 800183c:	69fb      	ldr	r3, [r7, #28]
 800183e:	2b0f      	cmp	r3, #15
 8001840:	f67f ae96 	bls.w	8001570 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001844:	bf00      	nop
 8001846:	bf00      	nop
 8001848:	3724      	adds	r7, #36	; 0x24
 800184a:	46bd      	mov	sp, r7
 800184c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001850:	4770      	bx	lr
 8001852:	bf00      	nop
 8001854:	40023800 	.word	0x40023800
 8001858:	40013800 	.word	0x40013800
 800185c:	40020000 	.word	0x40020000
 8001860:	40020400 	.word	0x40020400
 8001864:	40020800 	.word	0x40020800
 8001868:	40020c00 	.word	0x40020c00
 800186c:	40021000 	.word	0x40021000
 8001870:	40021400 	.word	0x40021400
 8001874:	40021800 	.word	0x40021800
 8001878:	40013c00 	.word	0x40013c00

0800187c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800187c:	b480      	push	{r7}
 800187e:	b083      	sub	sp, #12
 8001880:	af00      	add	r7, sp, #0
 8001882:	6078      	str	r0, [r7, #4]
 8001884:	460b      	mov	r3, r1
 8001886:	807b      	strh	r3, [r7, #2]
 8001888:	4613      	mov	r3, r2
 800188a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800188c:	787b      	ldrb	r3, [r7, #1]
 800188e:	2b00      	cmp	r3, #0
 8001890:	d003      	beq.n	800189a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001892:	887a      	ldrh	r2, [r7, #2]
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001898:	e003      	b.n	80018a2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800189a:	887b      	ldrh	r3, [r7, #2]
 800189c:	041a      	lsls	r2, r3, #16
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	619a      	str	r2, [r3, #24]
}
 80018a2:	bf00      	nop
 80018a4:	370c      	adds	r7, #12
 80018a6:	46bd      	mov	sp, r7
 80018a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ac:	4770      	bx	lr
	...

080018b0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	b084      	sub	sp, #16
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	6078      	str	r0, [r7, #4]
 80018b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d101      	bne.n	80018c4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80018c0:	2301      	movs	r3, #1
 80018c2:	e0cc      	b.n	8001a5e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80018c4:	4b68      	ldr	r3, [pc, #416]	; (8001a68 <HAL_RCC_ClockConfig+0x1b8>)
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	f003 030f 	and.w	r3, r3, #15
 80018cc:	683a      	ldr	r2, [r7, #0]
 80018ce:	429a      	cmp	r2, r3
 80018d0:	d90c      	bls.n	80018ec <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018d2:	4b65      	ldr	r3, [pc, #404]	; (8001a68 <HAL_RCC_ClockConfig+0x1b8>)
 80018d4:	683a      	ldr	r2, [r7, #0]
 80018d6:	b2d2      	uxtb	r2, r2
 80018d8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80018da:	4b63      	ldr	r3, [pc, #396]	; (8001a68 <HAL_RCC_ClockConfig+0x1b8>)
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	f003 030f 	and.w	r3, r3, #15
 80018e2:	683a      	ldr	r2, [r7, #0]
 80018e4:	429a      	cmp	r2, r3
 80018e6:	d001      	beq.n	80018ec <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80018e8:	2301      	movs	r3, #1
 80018ea:	e0b8      	b.n	8001a5e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	f003 0302 	and.w	r3, r3, #2
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d020      	beq.n	800193a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	f003 0304 	and.w	r3, r3, #4
 8001900:	2b00      	cmp	r3, #0
 8001902:	d005      	beq.n	8001910 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001904:	4b59      	ldr	r3, [pc, #356]	; (8001a6c <HAL_RCC_ClockConfig+0x1bc>)
 8001906:	689b      	ldr	r3, [r3, #8]
 8001908:	4a58      	ldr	r2, [pc, #352]	; (8001a6c <HAL_RCC_ClockConfig+0x1bc>)
 800190a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800190e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	f003 0308 	and.w	r3, r3, #8
 8001918:	2b00      	cmp	r3, #0
 800191a:	d005      	beq.n	8001928 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800191c:	4b53      	ldr	r3, [pc, #332]	; (8001a6c <HAL_RCC_ClockConfig+0x1bc>)
 800191e:	689b      	ldr	r3, [r3, #8]
 8001920:	4a52      	ldr	r2, [pc, #328]	; (8001a6c <HAL_RCC_ClockConfig+0x1bc>)
 8001922:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001926:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001928:	4b50      	ldr	r3, [pc, #320]	; (8001a6c <HAL_RCC_ClockConfig+0x1bc>)
 800192a:	689b      	ldr	r3, [r3, #8]
 800192c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	689b      	ldr	r3, [r3, #8]
 8001934:	494d      	ldr	r1, [pc, #308]	; (8001a6c <HAL_RCC_ClockConfig+0x1bc>)
 8001936:	4313      	orrs	r3, r2
 8001938:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	f003 0301 	and.w	r3, r3, #1
 8001942:	2b00      	cmp	r3, #0
 8001944:	d044      	beq.n	80019d0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	685b      	ldr	r3, [r3, #4]
 800194a:	2b01      	cmp	r3, #1
 800194c:	d107      	bne.n	800195e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800194e:	4b47      	ldr	r3, [pc, #284]	; (8001a6c <HAL_RCC_ClockConfig+0x1bc>)
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001956:	2b00      	cmp	r3, #0
 8001958:	d119      	bne.n	800198e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800195a:	2301      	movs	r3, #1
 800195c:	e07f      	b.n	8001a5e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	685b      	ldr	r3, [r3, #4]
 8001962:	2b02      	cmp	r3, #2
 8001964:	d003      	beq.n	800196e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800196a:	2b03      	cmp	r3, #3
 800196c:	d107      	bne.n	800197e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800196e:	4b3f      	ldr	r3, [pc, #252]	; (8001a6c <HAL_RCC_ClockConfig+0x1bc>)
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001976:	2b00      	cmp	r3, #0
 8001978:	d109      	bne.n	800198e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800197a:	2301      	movs	r3, #1
 800197c:	e06f      	b.n	8001a5e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800197e:	4b3b      	ldr	r3, [pc, #236]	; (8001a6c <HAL_RCC_ClockConfig+0x1bc>)
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	f003 0302 	and.w	r3, r3, #2
 8001986:	2b00      	cmp	r3, #0
 8001988:	d101      	bne.n	800198e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800198a:	2301      	movs	r3, #1
 800198c:	e067      	b.n	8001a5e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800198e:	4b37      	ldr	r3, [pc, #220]	; (8001a6c <HAL_RCC_ClockConfig+0x1bc>)
 8001990:	689b      	ldr	r3, [r3, #8]
 8001992:	f023 0203 	bic.w	r2, r3, #3
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	685b      	ldr	r3, [r3, #4]
 800199a:	4934      	ldr	r1, [pc, #208]	; (8001a6c <HAL_RCC_ClockConfig+0x1bc>)
 800199c:	4313      	orrs	r3, r2
 800199e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80019a0:	f7ff f93e 	bl	8000c20 <HAL_GetTick>
 80019a4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80019a6:	e00a      	b.n	80019be <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80019a8:	f7ff f93a 	bl	8000c20 <HAL_GetTick>
 80019ac:	4602      	mov	r2, r0
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	1ad3      	subs	r3, r2, r3
 80019b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80019b6:	4293      	cmp	r3, r2
 80019b8:	d901      	bls.n	80019be <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80019ba:	2303      	movs	r3, #3
 80019bc:	e04f      	b.n	8001a5e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80019be:	4b2b      	ldr	r3, [pc, #172]	; (8001a6c <HAL_RCC_ClockConfig+0x1bc>)
 80019c0:	689b      	ldr	r3, [r3, #8]
 80019c2:	f003 020c 	and.w	r2, r3, #12
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	685b      	ldr	r3, [r3, #4]
 80019ca:	009b      	lsls	r3, r3, #2
 80019cc:	429a      	cmp	r2, r3
 80019ce:	d1eb      	bne.n	80019a8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80019d0:	4b25      	ldr	r3, [pc, #148]	; (8001a68 <HAL_RCC_ClockConfig+0x1b8>)
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	f003 030f 	and.w	r3, r3, #15
 80019d8:	683a      	ldr	r2, [r7, #0]
 80019da:	429a      	cmp	r2, r3
 80019dc:	d20c      	bcs.n	80019f8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019de:	4b22      	ldr	r3, [pc, #136]	; (8001a68 <HAL_RCC_ClockConfig+0x1b8>)
 80019e0:	683a      	ldr	r2, [r7, #0]
 80019e2:	b2d2      	uxtb	r2, r2
 80019e4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80019e6:	4b20      	ldr	r3, [pc, #128]	; (8001a68 <HAL_RCC_ClockConfig+0x1b8>)
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	f003 030f 	and.w	r3, r3, #15
 80019ee:	683a      	ldr	r2, [r7, #0]
 80019f0:	429a      	cmp	r2, r3
 80019f2:	d001      	beq.n	80019f8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80019f4:	2301      	movs	r3, #1
 80019f6:	e032      	b.n	8001a5e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	f003 0304 	and.w	r3, r3, #4
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d008      	beq.n	8001a16 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001a04:	4b19      	ldr	r3, [pc, #100]	; (8001a6c <HAL_RCC_ClockConfig+0x1bc>)
 8001a06:	689b      	ldr	r3, [r3, #8]
 8001a08:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	68db      	ldr	r3, [r3, #12]
 8001a10:	4916      	ldr	r1, [pc, #88]	; (8001a6c <HAL_RCC_ClockConfig+0x1bc>)
 8001a12:	4313      	orrs	r3, r2
 8001a14:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	f003 0308 	and.w	r3, r3, #8
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d009      	beq.n	8001a36 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001a22:	4b12      	ldr	r3, [pc, #72]	; (8001a6c <HAL_RCC_ClockConfig+0x1bc>)
 8001a24:	689b      	ldr	r3, [r3, #8]
 8001a26:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	691b      	ldr	r3, [r3, #16]
 8001a2e:	00db      	lsls	r3, r3, #3
 8001a30:	490e      	ldr	r1, [pc, #56]	; (8001a6c <HAL_RCC_ClockConfig+0x1bc>)
 8001a32:	4313      	orrs	r3, r2
 8001a34:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001a36:	f000 f855 	bl	8001ae4 <HAL_RCC_GetSysClockFreq>
 8001a3a:	4602      	mov	r2, r0
 8001a3c:	4b0b      	ldr	r3, [pc, #44]	; (8001a6c <HAL_RCC_ClockConfig+0x1bc>)
 8001a3e:	689b      	ldr	r3, [r3, #8]
 8001a40:	091b      	lsrs	r3, r3, #4
 8001a42:	f003 030f 	and.w	r3, r3, #15
 8001a46:	490a      	ldr	r1, [pc, #40]	; (8001a70 <HAL_RCC_ClockConfig+0x1c0>)
 8001a48:	5ccb      	ldrb	r3, [r1, r3]
 8001a4a:	fa22 f303 	lsr.w	r3, r2, r3
 8001a4e:	4a09      	ldr	r2, [pc, #36]	; (8001a74 <HAL_RCC_ClockConfig+0x1c4>)
 8001a50:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001a52:	4b09      	ldr	r3, [pc, #36]	; (8001a78 <HAL_RCC_ClockConfig+0x1c8>)
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	4618      	mov	r0, r3
 8001a58:	f7ff f89e 	bl	8000b98 <HAL_InitTick>

  return HAL_OK;
 8001a5c:	2300      	movs	r3, #0
}
 8001a5e:	4618      	mov	r0, r3
 8001a60:	3710      	adds	r7, #16
 8001a62:	46bd      	mov	sp, r7
 8001a64:	bd80      	pop	{r7, pc}
 8001a66:	bf00      	nop
 8001a68:	40023c00 	.word	0x40023c00
 8001a6c:	40023800 	.word	0x40023800
 8001a70:	08006068 	.word	0x08006068
 8001a74:	20000000 	.word	0x20000000
 8001a78:	20000004 	.word	0x20000004

08001a7c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001a7c:	b480      	push	{r7}
 8001a7e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001a80:	4b03      	ldr	r3, [pc, #12]	; (8001a90 <HAL_RCC_GetHCLKFreq+0x14>)
 8001a82:	681b      	ldr	r3, [r3, #0]
}
 8001a84:	4618      	mov	r0, r3
 8001a86:	46bd      	mov	sp, r7
 8001a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8c:	4770      	bx	lr
 8001a8e:	bf00      	nop
 8001a90:	20000000 	.word	0x20000000

08001a94 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001a98:	f7ff fff0 	bl	8001a7c <HAL_RCC_GetHCLKFreq>
 8001a9c:	4602      	mov	r2, r0
 8001a9e:	4b05      	ldr	r3, [pc, #20]	; (8001ab4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001aa0:	689b      	ldr	r3, [r3, #8]
 8001aa2:	0a9b      	lsrs	r3, r3, #10
 8001aa4:	f003 0307 	and.w	r3, r3, #7
 8001aa8:	4903      	ldr	r1, [pc, #12]	; (8001ab8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001aaa:	5ccb      	ldrb	r3, [r1, r3]
 8001aac:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ab0:	4618      	mov	r0, r3
 8001ab2:	bd80      	pop	{r7, pc}
 8001ab4:	40023800 	.word	0x40023800
 8001ab8:	08006078 	.word	0x08006078

08001abc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001ac0:	f7ff ffdc 	bl	8001a7c <HAL_RCC_GetHCLKFreq>
 8001ac4:	4602      	mov	r2, r0
 8001ac6:	4b05      	ldr	r3, [pc, #20]	; (8001adc <HAL_RCC_GetPCLK2Freq+0x20>)
 8001ac8:	689b      	ldr	r3, [r3, #8]
 8001aca:	0b5b      	lsrs	r3, r3, #13
 8001acc:	f003 0307 	and.w	r3, r3, #7
 8001ad0:	4903      	ldr	r1, [pc, #12]	; (8001ae0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001ad2:	5ccb      	ldrb	r3, [r1, r3]
 8001ad4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ad8:	4618      	mov	r0, r3
 8001ada:	bd80      	pop	{r7, pc}
 8001adc:	40023800 	.word	0x40023800
 8001ae0:	08006078 	.word	0x08006078

08001ae4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ae4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001ae8:	b0ae      	sub	sp, #184	; 0xb8
 8001aea:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001aec:	2300      	movs	r3, #0
 8001aee:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8001af2:	2300      	movs	r3, #0
 8001af4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8001af8:	2300      	movs	r3, #0
 8001afa:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8001afe:	2300      	movs	r3, #0
 8001b00:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8001b04:	2300      	movs	r3, #0
 8001b06:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001b0a:	4bcb      	ldr	r3, [pc, #812]	; (8001e38 <HAL_RCC_GetSysClockFreq+0x354>)
 8001b0c:	689b      	ldr	r3, [r3, #8]
 8001b0e:	f003 030c 	and.w	r3, r3, #12
 8001b12:	2b0c      	cmp	r3, #12
 8001b14:	f200 8206 	bhi.w	8001f24 <HAL_RCC_GetSysClockFreq+0x440>
 8001b18:	a201      	add	r2, pc, #4	; (adr r2, 8001b20 <HAL_RCC_GetSysClockFreq+0x3c>)
 8001b1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b1e:	bf00      	nop
 8001b20:	08001b55 	.word	0x08001b55
 8001b24:	08001f25 	.word	0x08001f25
 8001b28:	08001f25 	.word	0x08001f25
 8001b2c:	08001f25 	.word	0x08001f25
 8001b30:	08001b5d 	.word	0x08001b5d
 8001b34:	08001f25 	.word	0x08001f25
 8001b38:	08001f25 	.word	0x08001f25
 8001b3c:	08001f25 	.word	0x08001f25
 8001b40:	08001b65 	.word	0x08001b65
 8001b44:	08001f25 	.word	0x08001f25
 8001b48:	08001f25 	.word	0x08001f25
 8001b4c:	08001f25 	.word	0x08001f25
 8001b50:	08001d55 	.word	0x08001d55
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001b54:	4bb9      	ldr	r3, [pc, #740]	; (8001e3c <HAL_RCC_GetSysClockFreq+0x358>)
 8001b56:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8001b5a:	e1e7      	b.n	8001f2c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001b5c:	4bb8      	ldr	r3, [pc, #736]	; (8001e40 <HAL_RCC_GetSysClockFreq+0x35c>)
 8001b5e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8001b62:	e1e3      	b.n	8001f2c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001b64:	4bb4      	ldr	r3, [pc, #720]	; (8001e38 <HAL_RCC_GetSysClockFreq+0x354>)
 8001b66:	685b      	ldr	r3, [r3, #4]
 8001b68:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001b6c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001b70:	4bb1      	ldr	r3, [pc, #708]	; (8001e38 <HAL_RCC_GetSysClockFreq+0x354>)
 8001b72:	685b      	ldr	r3, [r3, #4]
 8001b74:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d071      	beq.n	8001c60 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001b7c:	4bae      	ldr	r3, [pc, #696]	; (8001e38 <HAL_RCC_GetSysClockFreq+0x354>)
 8001b7e:	685b      	ldr	r3, [r3, #4]
 8001b80:	099b      	lsrs	r3, r3, #6
 8001b82:	2200      	movs	r2, #0
 8001b84:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8001b88:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8001b8c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001b90:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001b94:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8001b98:	2300      	movs	r3, #0
 8001b9a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8001b9e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8001ba2:	4622      	mov	r2, r4
 8001ba4:	462b      	mov	r3, r5
 8001ba6:	f04f 0000 	mov.w	r0, #0
 8001baa:	f04f 0100 	mov.w	r1, #0
 8001bae:	0159      	lsls	r1, r3, #5
 8001bb0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001bb4:	0150      	lsls	r0, r2, #5
 8001bb6:	4602      	mov	r2, r0
 8001bb8:	460b      	mov	r3, r1
 8001bba:	4621      	mov	r1, r4
 8001bbc:	1a51      	subs	r1, r2, r1
 8001bbe:	6439      	str	r1, [r7, #64]	; 0x40
 8001bc0:	4629      	mov	r1, r5
 8001bc2:	eb63 0301 	sbc.w	r3, r3, r1
 8001bc6:	647b      	str	r3, [r7, #68]	; 0x44
 8001bc8:	f04f 0200 	mov.w	r2, #0
 8001bcc:	f04f 0300 	mov.w	r3, #0
 8001bd0:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8001bd4:	4649      	mov	r1, r9
 8001bd6:	018b      	lsls	r3, r1, #6
 8001bd8:	4641      	mov	r1, r8
 8001bda:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001bde:	4641      	mov	r1, r8
 8001be0:	018a      	lsls	r2, r1, #6
 8001be2:	4641      	mov	r1, r8
 8001be4:	1a51      	subs	r1, r2, r1
 8001be6:	63b9      	str	r1, [r7, #56]	; 0x38
 8001be8:	4649      	mov	r1, r9
 8001bea:	eb63 0301 	sbc.w	r3, r3, r1
 8001bee:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001bf0:	f04f 0200 	mov.w	r2, #0
 8001bf4:	f04f 0300 	mov.w	r3, #0
 8001bf8:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8001bfc:	4649      	mov	r1, r9
 8001bfe:	00cb      	lsls	r3, r1, #3
 8001c00:	4641      	mov	r1, r8
 8001c02:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001c06:	4641      	mov	r1, r8
 8001c08:	00ca      	lsls	r2, r1, #3
 8001c0a:	4610      	mov	r0, r2
 8001c0c:	4619      	mov	r1, r3
 8001c0e:	4603      	mov	r3, r0
 8001c10:	4622      	mov	r2, r4
 8001c12:	189b      	adds	r3, r3, r2
 8001c14:	633b      	str	r3, [r7, #48]	; 0x30
 8001c16:	462b      	mov	r3, r5
 8001c18:	460a      	mov	r2, r1
 8001c1a:	eb42 0303 	adc.w	r3, r2, r3
 8001c1e:	637b      	str	r3, [r7, #52]	; 0x34
 8001c20:	f04f 0200 	mov.w	r2, #0
 8001c24:	f04f 0300 	mov.w	r3, #0
 8001c28:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001c2c:	4629      	mov	r1, r5
 8001c2e:	024b      	lsls	r3, r1, #9
 8001c30:	4621      	mov	r1, r4
 8001c32:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001c36:	4621      	mov	r1, r4
 8001c38:	024a      	lsls	r2, r1, #9
 8001c3a:	4610      	mov	r0, r2
 8001c3c:	4619      	mov	r1, r3
 8001c3e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001c42:	2200      	movs	r2, #0
 8001c44:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8001c48:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8001c4c:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8001c50:	f7fe fade 	bl	8000210 <__aeabi_uldivmod>
 8001c54:	4602      	mov	r2, r0
 8001c56:	460b      	mov	r3, r1
 8001c58:	4613      	mov	r3, r2
 8001c5a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8001c5e:	e067      	b.n	8001d30 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001c60:	4b75      	ldr	r3, [pc, #468]	; (8001e38 <HAL_RCC_GetSysClockFreq+0x354>)
 8001c62:	685b      	ldr	r3, [r3, #4]
 8001c64:	099b      	lsrs	r3, r3, #6
 8001c66:	2200      	movs	r2, #0
 8001c68:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8001c6c:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8001c70:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001c74:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001c78:	67bb      	str	r3, [r7, #120]	; 0x78
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001c7e:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8001c82:	4622      	mov	r2, r4
 8001c84:	462b      	mov	r3, r5
 8001c86:	f04f 0000 	mov.w	r0, #0
 8001c8a:	f04f 0100 	mov.w	r1, #0
 8001c8e:	0159      	lsls	r1, r3, #5
 8001c90:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001c94:	0150      	lsls	r0, r2, #5
 8001c96:	4602      	mov	r2, r0
 8001c98:	460b      	mov	r3, r1
 8001c9a:	4621      	mov	r1, r4
 8001c9c:	1a51      	subs	r1, r2, r1
 8001c9e:	62b9      	str	r1, [r7, #40]	; 0x28
 8001ca0:	4629      	mov	r1, r5
 8001ca2:	eb63 0301 	sbc.w	r3, r3, r1
 8001ca6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001ca8:	f04f 0200 	mov.w	r2, #0
 8001cac:	f04f 0300 	mov.w	r3, #0
 8001cb0:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8001cb4:	4649      	mov	r1, r9
 8001cb6:	018b      	lsls	r3, r1, #6
 8001cb8:	4641      	mov	r1, r8
 8001cba:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001cbe:	4641      	mov	r1, r8
 8001cc0:	018a      	lsls	r2, r1, #6
 8001cc2:	4641      	mov	r1, r8
 8001cc4:	ebb2 0a01 	subs.w	sl, r2, r1
 8001cc8:	4649      	mov	r1, r9
 8001cca:	eb63 0b01 	sbc.w	fp, r3, r1
 8001cce:	f04f 0200 	mov.w	r2, #0
 8001cd2:	f04f 0300 	mov.w	r3, #0
 8001cd6:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8001cda:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8001cde:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001ce2:	4692      	mov	sl, r2
 8001ce4:	469b      	mov	fp, r3
 8001ce6:	4623      	mov	r3, r4
 8001ce8:	eb1a 0303 	adds.w	r3, sl, r3
 8001cec:	623b      	str	r3, [r7, #32]
 8001cee:	462b      	mov	r3, r5
 8001cf0:	eb4b 0303 	adc.w	r3, fp, r3
 8001cf4:	627b      	str	r3, [r7, #36]	; 0x24
 8001cf6:	f04f 0200 	mov.w	r2, #0
 8001cfa:	f04f 0300 	mov.w	r3, #0
 8001cfe:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8001d02:	4629      	mov	r1, r5
 8001d04:	028b      	lsls	r3, r1, #10
 8001d06:	4621      	mov	r1, r4
 8001d08:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001d0c:	4621      	mov	r1, r4
 8001d0e:	028a      	lsls	r2, r1, #10
 8001d10:	4610      	mov	r0, r2
 8001d12:	4619      	mov	r1, r3
 8001d14:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001d18:	2200      	movs	r2, #0
 8001d1a:	673b      	str	r3, [r7, #112]	; 0x70
 8001d1c:	677a      	str	r2, [r7, #116]	; 0x74
 8001d1e:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8001d22:	f7fe fa75 	bl	8000210 <__aeabi_uldivmod>
 8001d26:	4602      	mov	r2, r0
 8001d28:	460b      	mov	r3, r1
 8001d2a:	4613      	mov	r3, r2
 8001d2c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001d30:	4b41      	ldr	r3, [pc, #260]	; (8001e38 <HAL_RCC_GetSysClockFreq+0x354>)
 8001d32:	685b      	ldr	r3, [r3, #4]
 8001d34:	0c1b      	lsrs	r3, r3, #16
 8001d36:	f003 0303 	and.w	r3, r3, #3
 8001d3a:	3301      	adds	r3, #1
 8001d3c:	005b      	lsls	r3, r3, #1
 8001d3e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8001d42:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8001d46:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001d4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d4e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8001d52:	e0eb      	b.n	8001f2c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001d54:	4b38      	ldr	r3, [pc, #224]	; (8001e38 <HAL_RCC_GetSysClockFreq+0x354>)
 8001d56:	685b      	ldr	r3, [r3, #4]
 8001d58:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001d5c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001d60:	4b35      	ldr	r3, [pc, #212]	; (8001e38 <HAL_RCC_GetSysClockFreq+0x354>)
 8001d62:	685b      	ldr	r3, [r3, #4]
 8001d64:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d06b      	beq.n	8001e44 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001d6c:	4b32      	ldr	r3, [pc, #200]	; (8001e38 <HAL_RCC_GetSysClockFreq+0x354>)
 8001d6e:	685b      	ldr	r3, [r3, #4]
 8001d70:	099b      	lsrs	r3, r3, #6
 8001d72:	2200      	movs	r2, #0
 8001d74:	66bb      	str	r3, [r7, #104]	; 0x68
 8001d76:	66fa      	str	r2, [r7, #108]	; 0x6c
 8001d78:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001d7a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001d7e:	663b      	str	r3, [r7, #96]	; 0x60
 8001d80:	2300      	movs	r3, #0
 8001d82:	667b      	str	r3, [r7, #100]	; 0x64
 8001d84:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8001d88:	4622      	mov	r2, r4
 8001d8a:	462b      	mov	r3, r5
 8001d8c:	f04f 0000 	mov.w	r0, #0
 8001d90:	f04f 0100 	mov.w	r1, #0
 8001d94:	0159      	lsls	r1, r3, #5
 8001d96:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001d9a:	0150      	lsls	r0, r2, #5
 8001d9c:	4602      	mov	r2, r0
 8001d9e:	460b      	mov	r3, r1
 8001da0:	4621      	mov	r1, r4
 8001da2:	1a51      	subs	r1, r2, r1
 8001da4:	61b9      	str	r1, [r7, #24]
 8001da6:	4629      	mov	r1, r5
 8001da8:	eb63 0301 	sbc.w	r3, r3, r1
 8001dac:	61fb      	str	r3, [r7, #28]
 8001dae:	f04f 0200 	mov.w	r2, #0
 8001db2:	f04f 0300 	mov.w	r3, #0
 8001db6:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8001dba:	4659      	mov	r1, fp
 8001dbc:	018b      	lsls	r3, r1, #6
 8001dbe:	4651      	mov	r1, sl
 8001dc0:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001dc4:	4651      	mov	r1, sl
 8001dc6:	018a      	lsls	r2, r1, #6
 8001dc8:	4651      	mov	r1, sl
 8001dca:	ebb2 0801 	subs.w	r8, r2, r1
 8001dce:	4659      	mov	r1, fp
 8001dd0:	eb63 0901 	sbc.w	r9, r3, r1
 8001dd4:	f04f 0200 	mov.w	r2, #0
 8001dd8:	f04f 0300 	mov.w	r3, #0
 8001ddc:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001de0:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001de4:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001de8:	4690      	mov	r8, r2
 8001dea:	4699      	mov	r9, r3
 8001dec:	4623      	mov	r3, r4
 8001dee:	eb18 0303 	adds.w	r3, r8, r3
 8001df2:	613b      	str	r3, [r7, #16]
 8001df4:	462b      	mov	r3, r5
 8001df6:	eb49 0303 	adc.w	r3, r9, r3
 8001dfa:	617b      	str	r3, [r7, #20]
 8001dfc:	f04f 0200 	mov.w	r2, #0
 8001e00:	f04f 0300 	mov.w	r3, #0
 8001e04:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8001e08:	4629      	mov	r1, r5
 8001e0a:	024b      	lsls	r3, r1, #9
 8001e0c:	4621      	mov	r1, r4
 8001e0e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001e12:	4621      	mov	r1, r4
 8001e14:	024a      	lsls	r2, r1, #9
 8001e16:	4610      	mov	r0, r2
 8001e18:	4619      	mov	r1, r3
 8001e1a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001e1e:	2200      	movs	r2, #0
 8001e20:	65bb      	str	r3, [r7, #88]	; 0x58
 8001e22:	65fa      	str	r2, [r7, #92]	; 0x5c
 8001e24:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8001e28:	f7fe f9f2 	bl	8000210 <__aeabi_uldivmod>
 8001e2c:	4602      	mov	r2, r0
 8001e2e:	460b      	mov	r3, r1
 8001e30:	4613      	mov	r3, r2
 8001e32:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8001e36:	e065      	b.n	8001f04 <HAL_RCC_GetSysClockFreq+0x420>
 8001e38:	40023800 	.word	0x40023800
 8001e3c:	00f42400 	.word	0x00f42400
 8001e40:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001e44:	4b3d      	ldr	r3, [pc, #244]	; (8001f3c <HAL_RCC_GetSysClockFreq+0x458>)
 8001e46:	685b      	ldr	r3, [r3, #4]
 8001e48:	099b      	lsrs	r3, r3, #6
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	4618      	mov	r0, r3
 8001e4e:	4611      	mov	r1, r2
 8001e50:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001e54:	653b      	str	r3, [r7, #80]	; 0x50
 8001e56:	2300      	movs	r3, #0
 8001e58:	657b      	str	r3, [r7, #84]	; 0x54
 8001e5a:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8001e5e:	4642      	mov	r2, r8
 8001e60:	464b      	mov	r3, r9
 8001e62:	f04f 0000 	mov.w	r0, #0
 8001e66:	f04f 0100 	mov.w	r1, #0
 8001e6a:	0159      	lsls	r1, r3, #5
 8001e6c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001e70:	0150      	lsls	r0, r2, #5
 8001e72:	4602      	mov	r2, r0
 8001e74:	460b      	mov	r3, r1
 8001e76:	4641      	mov	r1, r8
 8001e78:	1a51      	subs	r1, r2, r1
 8001e7a:	60b9      	str	r1, [r7, #8]
 8001e7c:	4649      	mov	r1, r9
 8001e7e:	eb63 0301 	sbc.w	r3, r3, r1
 8001e82:	60fb      	str	r3, [r7, #12]
 8001e84:	f04f 0200 	mov.w	r2, #0
 8001e88:	f04f 0300 	mov.w	r3, #0
 8001e8c:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8001e90:	4659      	mov	r1, fp
 8001e92:	018b      	lsls	r3, r1, #6
 8001e94:	4651      	mov	r1, sl
 8001e96:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001e9a:	4651      	mov	r1, sl
 8001e9c:	018a      	lsls	r2, r1, #6
 8001e9e:	4651      	mov	r1, sl
 8001ea0:	1a54      	subs	r4, r2, r1
 8001ea2:	4659      	mov	r1, fp
 8001ea4:	eb63 0501 	sbc.w	r5, r3, r1
 8001ea8:	f04f 0200 	mov.w	r2, #0
 8001eac:	f04f 0300 	mov.w	r3, #0
 8001eb0:	00eb      	lsls	r3, r5, #3
 8001eb2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001eb6:	00e2      	lsls	r2, r4, #3
 8001eb8:	4614      	mov	r4, r2
 8001eba:	461d      	mov	r5, r3
 8001ebc:	4643      	mov	r3, r8
 8001ebe:	18e3      	adds	r3, r4, r3
 8001ec0:	603b      	str	r3, [r7, #0]
 8001ec2:	464b      	mov	r3, r9
 8001ec4:	eb45 0303 	adc.w	r3, r5, r3
 8001ec8:	607b      	str	r3, [r7, #4]
 8001eca:	f04f 0200 	mov.w	r2, #0
 8001ece:	f04f 0300 	mov.w	r3, #0
 8001ed2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001ed6:	4629      	mov	r1, r5
 8001ed8:	028b      	lsls	r3, r1, #10
 8001eda:	4621      	mov	r1, r4
 8001edc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001ee0:	4621      	mov	r1, r4
 8001ee2:	028a      	lsls	r2, r1, #10
 8001ee4:	4610      	mov	r0, r2
 8001ee6:	4619      	mov	r1, r3
 8001ee8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001eec:	2200      	movs	r2, #0
 8001eee:	64bb      	str	r3, [r7, #72]	; 0x48
 8001ef0:	64fa      	str	r2, [r7, #76]	; 0x4c
 8001ef2:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8001ef6:	f7fe f98b 	bl	8000210 <__aeabi_uldivmod>
 8001efa:	4602      	mov	r2, r0
 8001efc:	460b      	mov	r3, r1
 8001efe:	4613      	mov	r3, r2
 8001f00:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8001f04:	4b0d      	ldr	r3, [pc, #52]	; (8001f3c <HAL_RCC_GetSysClockFreq+0x458>)
 8001f06:	685b      	ldr	r3, [r3, #4]
 8001f08:	0f1b      	lsrs	r3, r3, #28
 8001f0a:	f003 0307 	and.w	r3, r3, #7
 8001f0e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8001f12:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8001f16:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001f1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f1e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8001f22:	e003      	b.n	8001f2c <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001f24:	4b06      	ldr	r3, [pc, #24]	; (8001f40 <HAL_RCC_GetSysClockFreq+0x45c>)
 8001f26:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8001f2a:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001f2c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8001f30:	4618      	mov	r0, r3
 8001f32:	37b8      	adds	r7, #184	; 0xb8
 8001f34:	46bd      	mov	sp, r7
 8001f36:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001f3a:	bf00      	nop
 8001f3c:	40023800 	.word	0x40023800
 8001f40:	00f42400 	.word	0x00f42400

08001f44 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001f44:	b580      	push	{r7, lr}
 8001f46:	b086      	sub	sp, #24
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d101      	bne.n	8001f56 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001f52:	2301      	movs	r3, #1
 8001f54:	e28d      	b.n	8002472 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	f003 0301 	and.w	r3, r3, #1
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	f000 8083 	beq.w	800206a <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001f64:	4b94      	ldr	r3, [pc, #592]	; (80021b8 <HAL_RCC_OscConfig+0x274>)
 8001f66:	689b      	ldr	r3, [r3, #8]
 8001f68:	f003 030c 	and.w	r3, r3, #12
 8001f6c:	2b04      	cmp	r3, #4
 8001f6e:	d019      	beq.n	8001fa4 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001f70:	4b91      	ldr	r3, [pc, #580]	; (80021b8 <HAL_RCC_OscConfig+0x274>)
 8001f72:	689b      	ldr	r3, [r3, #8]
 8001f74:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001f78:	2b08      	cmp	r3, #8
 8001f7a:	d106      	bne.n	8001f8a <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001f7c:	4b8e      	ldr	r3, [pc, #568]	; (80021b8 <HAL_RCC_OscConfig+0x274>)
 8001f7e:	685b      	ldr	r3, [r3, #4]
 8001f80:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f84:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001f88:	d00c      	beq.n	8001fa4 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001f8a:	4b8b      	ldr	r3, [pc, #556]	; (80021b8 <HAL_RCC_OscConfig+0x274>)
 8001f8c:	689b      	ldr	r3, [r3, #8]
 8001f8e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001f92:	2b0c      	cmp	r3, #12
 8001f94:	d112      	bne.n	8001fbc <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001f96:	4b88      	ldr	r3, [pc, #544]	; (80021b8 <HAL_RCC_OscConfig+0x274>)
 8001f98:	685b      	ldr	r3, [r3, #4]
 8001f9a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f9e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001fa2:	d10b      	bne.n	8001fbc <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001fa4:	4b84      	ldr	r3, [pc, #528]	; (80021b8 <HAL_RCC_OscConfig+0x274>)
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d05b      	beq.n	8002068 <HAL_RCC_OscConfig+0x124>
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	685b      	ldr	r3, [r3, #4]
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d157      	bne.n	8002068 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8001fb8:	2301      	movs	r3, #1
 8001fba:	e25a      	b.n	8002472 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	685b      	ldr	r3, [r3, #4]
 8001fc0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001fc4:	d106      	bne.n	8001fd4 <HAL_RCC_OscConfig+0x90>
 8001fc6:	4b7c      	ldr	r3, [pc, #496]	; (80021b8 <HAL_RCC_OscConfig+0x274>)
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	4a7b      	ldr	r2, [pc, #492]	; (80021b8 <HAL_RCC_OscConfig+0x274>)
 8001fcc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001fd0:	6013      	str	r3, [r2, #0]
 8001fd2:	e01d      	b.n	8002010 <HAL_RCC_OscConfig+0xcc>
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	685b      	ldr	r3, [r3, #4]
 8001fd8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001fdc:	d10c      	bne.n	8001ff8 <HAL_RCC_OscConfig+0xb4>
 8001fde:	4b76      	ldr	r3, [pc, #472]	; (80021b8 <HAL_RCC_OscConfig+0x274>)
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	4a75      	ldr	r2, [pc, #468]	; (80021b8 <HAL_RCC_OscConfig+0x274>)
 8001fe4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001fe8:	6013      	str	r3, [r2, #0]
 8001fea:	4b73      	ldr	r3, [pc, #460]	; (80021b8 <HAL_RCC_OscConfig+0x274>)
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	4a72      	ldr	r2, [pc, #456]	; (80021b8 <HAL_RCC_OscConfig+0x274>)
 8001ff0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ff4:	6013      	str	r3, [r2, #0]
 8001ff6:	e00b      	b.n	8002010 <HAL_RCC_OscConfig+0xcc>
 8001ff8:	4b6f      	ldr	r3, [pc, #444]	; (80021b8 <HAL_RCC_OscConfig+0x274>)
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	4a6e      	ldr	r2, [pc, #440]	; (80021b8 <HAL_RCC_OscConfig+0x274>)
 8001ffe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002002:	6013      	str	r3, [r2, #0]
 8002004:	4b6c      	ldr	r3, [pc, #432]	; (80021b8 <HAL_RCC_OscConfig+0x274>)
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	4a6b      	ldr	r2, [pc, #428]	; (80021b8 <HAL_RCC_OscConfig+0x274>)
 800200a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800200e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	685b      	ldr	r3, [r3, #4]
 8002014:	2b00      	cmp	r3, #0
 8002016:	d013      	beq.n	8002040 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002018:	f7fe fe02 	bl	8000c20 <HAL_GetTick>
 800201c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800201e:	e008      	b.n	8002032 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002020:	f7fe fdfe 	bl	8000c20 <HAL_GetTick>
 8002024:	4602      	mov	r2, r0
 8002026:	693b      	ldr	r3, [r7, #16]
 8002028:	1ad3      	subs	r3, r2, r3
 800202a:	2b64      	cmp	r3, #100	; 0x64
 800202c:	d901      	bls.n	8002032 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800202e:	2303      	movs	r3, #3
 8002030:	e21f      	b.n	8002472 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002032:	4b61      	ldr	r3, [pc, #388]	; (80021b8 <HAL_RCC_OscConfig+0x274>)
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800203a:	2b00      	cmp	r3, #0
 800203c:	d0f0      	beq.n	8002020 <HAL_RCC_OscConfig+0xdc>
 800203e:	e014      	b.n	800206a <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002040:	f7fe fdee 	bl	8000c20 <HAL_GetTick>
 8002044:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002046:	e008      	b.n	800205a <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002048:	f7fe fdea 	bl	8000c20 <HAL_GetTick>
 800204c:	4602      	mov	r2, r0
 800204e:	693b      	ldr	r3, [r7, #16]
 8002050:	1ad3      	subs	r3, r2, r3
 8002052:	2b64      	cmp	r3, #100	; 0x64
 8002054:	d901      	bls.n	800205a <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8002056:	2303      	movs	r3, #3
 8002058:	e20b      	b.n	8002472 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800205a:	4b57      	ldr	r3, [pc, #348]	; (80021b8 <HAL_RCC_OscConfig+0x274>)
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002062:	2b00      	cmp	r3, #0
 8002064:	d1f0      	bne.n	8002048 <HAL_RCC_OscConfig+0x104>
 8002066:	e000      	b.n	800206a <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002068:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	f003 0302 	and.w	r3, r3, #2
 8002072:	2b00      	cmp	r3, #0
 8002074:	d06f      	beq.n	8002156 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002076:	4b50      	ldr	r3, [pc, #320]	; (80021b8 <HAL_RCC_OscConfig+0x274>)
 8002078:	689b      	ldr	r3, [r3, #8]
 800207a:	f003 030c 	and.w	r3, r3, #12
 800207e:	2b00      	cmp	r3, #0
 8002080:	d017      	beq.n	80020b2 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002082:	4b4d      	ldr	r3, [pc, #308]	; (80021b8 <HAL_RCC_OscConfig+0x274>)
 8002084:	689b      	ldr	r3, [r3, #8]
 8002086:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800208a:	2b08      	cmp	r3, #8
 800208c:	d105      	bne.n	800209a <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800208e:	4b4a      	ldr	r3, [pc, #296]	; (80021b8 <HAL_RCC_OscConfig+0x274>)
 8002090:	685b      	ldr	r3, [r3, #4]
 8002092:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002096:	2b00      	cmp	r3, #0
 8002098:	d00b      	beq.n	80020b2 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800209a:	4b47      	ldr	r3, [pc, #284]	; (80021b8 <HAL_RCC_OscConfig+0x274>)
 800209c:	689b      	ldr	r3, [r3, #8]
 800209e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80020a2:	2b0c      	cmp	r3, #12
 80020a4:	d11c      	bne.n	80020e0 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80020a6:	4b44      	ldr	r3, [pc, #272]	; (80021b8 <HAL_RCC_OscConfig+0x274>)
 80020a8:	685b      	ldr	r3, [r3, #4]
 80020aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d116      	bne.n	80020e0 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80020b2:	4b41      	ldr	r3, [pc, #260]	; (80021b8 <HAL_RCC_OscConfig+0x274>)
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	f003 0302 	and.w	r3, r3, #2
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d005      	beq.n	80020ca <HAL_RCC_OscConfig+0x186>
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	68db      	ldr	r3, [r3, #12]
 80020c2:	2b01      	cmp	r3, #1
 80020c4:	d001      	beq.n	80020ca <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80020c6:	2301      	movs	r3, #1
 80020c8:	e1d3      	b.n	8002472 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020ca:	4b3b      	ldr	r3, [pc, #236]	; (80021b8 <HAL_RCC_OscConfig+0x274>)
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	691b      	ldr	r3, [r3, #16]
 80020d6:	00db      	lsls	r3, r3, #3
 80020d8:	4937      	ldr	r1, [pc, #220]	; (80021b8 <HAL_RCC_OscConfig+0x274>)
 80020da:	4313      	orrs	r3, r2
 80020dc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80020de:	e03a      	b.n	8002156 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	68db      	ldr	r3, [r3, #12]
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d020      	beq.n	800212a <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80020e8:	4b34      	ldr	r3, [pc, #208]	; (80021bc <HAL_RCC_OscConfig+0x278>)
 80020ea:	2201      	movs	r2, #1
 80020ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020ee:	f7fe fd97 	bl	8000c20 <HAL_GetTick>
 80020f2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020f4:	e008      	b.n	8002108 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80020f6:	f7fe fd93 	bl	8000c20 <HAL_GetTick>
 80020fa:	4602      	mov	r2, r0
 80020fc:	693b      	ldr	r3, [r7, #16]
 80020fe:	1ad3      	subs	r3, r2, r3
 8002100:	2b02      	cmp	r3, #2
 8002102:	d901      	bls.n	8002108 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8002104:	2303      	movs	r3, #3
 8002106:	e1b4      	b.n	8002472 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002108:	4b2b      	ldr	r3, [pc, #172]	; (80021b8 <HAL_RCC_OscConfig+0x274>)
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	f003 0302 	and.w	r3, r3, #2
 8002110:	2b00      	cmp	r3, #0
 8002112:	d0f0      	beq.n	80020f6 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002114:	4b28      	ldr	r3, [pc, #160]	; (80021b8 <HAL_RCC_OscConfig+0x274>)
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	691b      	ldr	r3, [r3, #16]
 8002120:	00db      	lsls	r3, r3, #3
 8002122:	4925      	ldr	r1, [pc, #148]	; (80021b8 <HAL_RCC_OscConfig+0x274>)
 8002124:	4313      	orrs	r3, r2
 8002126:	600b      	str	r3, [r1, #0]
 8002128:	e015      	b.n	8002156 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800212a:	4b24      	ldr	r3, [pc, #144]	; (80021bc <HAL_RCC_OscConfig+0x278>)
 800212c:	2200      	movs	r2, #0
 800212e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002130:	f7fe fd76 	bl	8000c20 <HAL_GetTick>
 8002134:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002136:	e008      	b.n	800214a <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002138:	f7fe fd72 	bl	8000c20 <HAL_GetTick>
 800213c:	4602      	mov	r2, r0
 800213e:	693b      	ldr	r3, [r7, #16]
 8002140:	1ad3      	subs	r3, r2, r3
 8002142:	2b02      	cmp	r3, #2
 8002144:	d901      	bls.n	800214a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002146:	2303      	movs	r3, #3
 8002148:	e193      	b.n	8002472 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800214a:	4b1b      	ldr	r3, [pc, #108]	; (80021b8 <HAL_RCC_OscConfig+0x274>)
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	f003 0302 	and.w	r3, r3, #2
 8002152:	2b00      	cmp	r3, #0
 8002154:	d1f0      	bne.n	8002138 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	f003 0308 	and.w	r3, r3, #8
 800215e:	2b00      	cmp	r3, #0
 8002160:	d036      	beq.n	80021d0 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	695b      	ldr	r3, [r3, #20]
 8002166:	2b00      	cmp	r3, #0
 8002168:	d016      	beq.n	8002198 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800216a:	4b15      	ldr	r3, [pc, #84]	; (80021c0 <HAL_RCC_OscConfig+0x27c>)
 800216c:	2201      	movs	r2, #1
 800216e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002170:	f7fe fd56 	bl	8000c20 <HAL_GetTick>
 8002174:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002176:	e008      	b.n	800218a <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002178:	f7fe fd52 	bl	8000c20 <HAL_GetTick>
 800217c:	4602      	mov	r2, r0
 800217e:	693b      	ldr	r3, [r7, #16]
 8002180:	1ad3      	subs	r3, r2, r3
 8002182:	2b02      	cmp	r3, #2
 8002184:	d901      	bls.n	800218a <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8002186:	2303      	movs	r3, #3
 8002188:	e173      	b.n	8002472 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800218a:	4b0b      	ldr	r3, [pc, #44]	; (80021b8 <HAL_RCC_OscConfig+0x274>)
 800218c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800218e:	f003 0302 	and.w	r3, r3, #2
 8002192:	2b00      	cmp	r3, #0
 8002194:	d0f0      	beq.n	8002178 <HAL_RCC_OscConfig+0x234>
 8002196:	e01b      	b.n	80021d0 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002198:	4b09      	ldr	r3, [pc, #36]	; (80021c0 <HAL_RCC_OscConfig+0x27c>)
 800219a:	2200      	movs	r2, #0
 800219c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800219e:	f7fe fd3f 	bl	8000c20 <HAL_GetTick>
 80021a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80021a4:	e00e      	b.n	80021c4 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80021a6:	f7fe fd3b 	bl	8000c20 <HAL_GetTick>
 80021aa:	4602      	mov	r2, r0
 80021ac:	693b      	ldr	r3, [r7, #16]
 80021ae:	1ad3      	subs	r3, r2, r3
 80021b0:	2b02      	cmp	r3, #2
 80021b2:	d907      	bls.n	80021c4 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80021b4:	2303      	movs	r3, #3
 80021b6:	e15c      	b.n	8002472 <HAL_RCC_OscConfig+0x52e>
 80021b8:	40023800 	.word	0x40023800
 80021bc:	42470000 	.word	0x42470000
 80021c0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80021c4:	4b8a      	ldr	r3, [pc, #552]	; (80023f0 <HAL_RCC_OscConfig+0x4ac>)
 80021c6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80021c8:	f003 0302 	and.w	r3, r3, #2
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d1ea      	bne.n	80021a6 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	f003 0304 	and.w	r3, r3, #4
 80021d8:	2b00      	cmp	r3, #0
 80021da:	f000 8097 	beq.w	800230c <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80021de:	2300      	movs	r3, #0
 80021e0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80021e2:	4b83      	ldr	r3, [pc, #524]	; (80023f0 <HAL_RCC_OscConfig+0x4ac>)
 80021e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d10f      	bne.n	800220e <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80021ee:	2300      	movs	r3, #0
 80021f0:	60bb      	str	r3, [r7, #8]
 80021f2:	4b7f      	ldr	r3, [pc, #508]	; (80023f0 <HAL_RCC_OscConfig+0x4ac>)
 80021f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021f6:	4a7e      	ldr	r2, [pc, #504]	; (80023f0 <HAL_RCC_OscConfig+0x4ac>)
 80021f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80021fc:	6413      	str	r3, [r2, #64]	; 0x40
 80021fe:	4b7c      	ldr	r3, [pc, #496]	; (80023f0 <HAL_RCC_OscConfig+0x4ac>)
 8002200:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002202:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002206:	60bb      	str	r3, [r7, #8]
 8002208:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800220a:	2301      	movs	r3, #1
 800220c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800220e:	4b79      	ldr	r3, [pc, #484]	; (80023f4 <HAL_RCC_OscConfig+0x4b0>)
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002216:	2b00      	cmp	r3, #0
 8002218:	d118      	bne.n	800224c <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800221a:	4b76      	ldr	r3, [pc, #472]	; (80023f4 <HAL_RCC_OscConfig+0x4b0>)
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	4a75      	ldr	r2, [pc, #468]	; (80023f4 <HAL_RCC_OscConfig+0x4b0>)
 8002220:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002224:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002226:	f7fe fcfb 	bl	8000c20 <HAL_GetTick>
 800222a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800222c:	e008      	b.n	8002240 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800222e:	f7fe fcf7 	bl	8000c20 <HAL_GetTick>
 8002232:	4602      	mov	r2, r0
 8002234:	693b      	ldr	r3, [r7, #16]
 8002236:	1ad3      	subs	r3, r2, r3
 8002238:	2b02      	cmp	r3, #2
 800223a:	d901      	bls.n	8002240 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 800223c:	2303      	movs	r3, #3
 800223e:	e118      	b.n	8002472 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002240:	4b6c      	ldr	r3, [pc, #432]	; (80023f4 <HAL_RCC_OscConfig+0x4b0>)
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002248:	2b00      	cmp	r3, #0
 800224a:	d0f0      	beq.n	800222e <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	689b      	ldr	r3, [r3, #8]
 8002250:	2b01      	cmp	r3, #1
 8002252:	d106      	bne.n	8002262 <HAL_RCC_OscConfig+0x31e>
 8002254:	4b66      	ldr	r3, [pc, #408]	; (80023f0 <HAL_RCC_OscConfig+0x4ac>)
 8002256:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002258:	4a65      	ldr	r2, [pc, #404]	; (80023f0 <HAL_RCC_OscConfig+0x4ac>)
 800225a:	f043 0301 	orr.w	r3, r3, #1
 800225e:	6713      	str	r3, [r2, #112]	; 0x70
 8002260:	e01c      	b.n	800229c <HAL_RCC_OscConfig+0x358>
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	689b      	ldr	r3, [r3, #8]
 8002266:	2b05      	cmp	r3, #5
 8002268:	d10c      	bne.n	8002284 <HAL_RCC_OscConfig+0x340>
 800226a:	4b61      	ldr	r3, [pc, #388]	; (80023f0 <HAL_RCC_OscConfig+0x4ac>)
 800226c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800226e:	4a60      	ldr	r2, [pc, #384]	; (80023f0 <HAL_RCC_OscConfig+0x4ac>)
 8002270:	f043 0304 	orr.w	r3, r3, #4
 8002274:	6713      	str	r3, [r2, #112]	; 0x70
 8002276:	4b5e      	ldr	r3, [pc, #376]	; (80023f0 <HAL_RCC_OscConfig+0x4ac>)
 8002278:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800227a:	4a5d      	ldr	r2, [pc, #372]	; (80023f0 <HAL_RCC_OscConfig+0x4ac>)
 800227c:	f043 0301 	orr.w	r3, r3, #1
 8002280:	6713      	str	r3, [r2, #112]	; 0x70
 8002282:	e00b      	b.n	800229c <HAL_RCC_OscConfig+0x358>
 8002284:	4b5a      	ldr	r3, [pc, #360]	; (80023f0 <HAL_RCC_OscConfig+0x4ac>)
 8002286:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002288:	4a59      	ldr	r2, [pc, #356]	; (80023f0 <HAL_RCC_OscConfig+0x4ac>)
 800228a:	f023 0301 	bic.w	r3, r3, #1
 800228e:	6713      	str	r3, [r2, #112]	; 0x70
 8002290:	4b57      	ldr	r3, [pc, #348]	; (80023f0 <HAL_RCC_OscConfig+0x4ac>)
 8002292:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002294:	4a56      	ldr	r2, [pc, #344]	; (80023f0 <HAL_RCC_OscConfig+0x4ac>)
 8002296:	f023 0304 	bic.w	r3, r3, #4
 800229a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	689b      	ldr	r3, [r3, #8]
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d015      	beq.n	80022d0 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022a4:	f7fe fcbc 	bl	8000c20 <HAL_GetTick>
 80022a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022aa:	e00a      	b.n	80022c2 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80022ac:	f7fe fcb8 	bl	8000c20 <HAL_GetTick>
 80022b0:	4602      	mov	r2, r0
 80022b2:	693b      	ldr	r3, [r7, #16]
 80022b4:	1ad3      	subs	r3, r2, r3
 80022b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80022ba:	4293      	cmp	r3, r2
 80022bc:	d901      	bls.n	80022c2 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80022be:	2303      	movs	r3, #3
 80022c0:	e0d7      	b.n	8002472 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022c2:	4b4b      	ldr	r3, [pc, #300]	; (80023f0 <HAL_RCC_OscConfig+0x4ac>)
 80022c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022c6:	f003 0302 	and.w	r3, r3, #2
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d0ee      	beq.n	80022ac <HAL_RCC_OscConfig+0x368>
 80022ce:	e014      	b.n	80022fa <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022d0:	f7fe fca6 	bl	8000c20 <HAL_GetTick>
 80022d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80022d6:	e00a      	b.n	80022ee <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80022d8:	f7fe fca2 	bl	8000c20 <HAL_GetTick>
 80022dc:	4602      	mov	r2, r0
 80022de:	693b      	ldr	r3, [r7, #16]
 80022e0:	1ad3      	subs	r3, r2, r3
 80022e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80022e6:	4293      	cmp	r3, r2
 80022e8:	d901      	bls.n	80022ee <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80022ea:	2303      	movs	r3, #3
 80022ec:	e0c1      	b.n	8002472 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80022ee:	4b40      	ldr	r3, [pc, #256]	; (80023f0 <HAL_RCC_OscConfig+0x4ac>)
 80022f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022f2:	f003 0302 	and.w	r3, r3, #2
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d1ee      	bne.n	80022d8 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80022fa:	7dfb      	ldrb	r3, [r7, #23]
 80022fc:	2b01      	cmp	r3, #1
 80022fe:	d105      	bne.n	800230c <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002300:	4b3b      	ldr	r3, [pc, #236]	; (80023f0 <HAL_RCC_OscConfig+0x4ac>)
 8002302:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002304:	4a3a      	ldr	r2, [pc, #232]	; (80023f0 <HAL_RCC_OscConfig+0x4ac>)
 8002306:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800230a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	699b      	ldr	r3, [r3, #24]
 8002310:	2b00      	cmp	r3, #0
 8002312:	f000 80ad 	beq.w	8002470 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002316:	4b36      	ldr	r3, [pc, #216]	; (80023f0 <HAL_RCC_OscConfig+0x4ac>)
 8002318:	689b      	ldr	r3, [r3, #8]
 800231a:	f003 030c 	and.w	r3, r3, #12
 800231e:	2b08      	cmp	r3, #8
 8002320:	d060      	beq.n	80023e4 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	699b      	ldr	r3, [r3, #24]
 8002326:	2b02      	cmp	r3, #2
 8002328:	d145      	bne.n	80023b6 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800232a:	4b33      	ldr	r3, [pc, #204]	; (80023f8 <HAL_RCC_OscConfig+0x4b4>)
 800232c:	2200      	movs	r2, #0
 800232e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002330:	f7fe fc76 	bl	8000c20 <HAL_GetTick>
 8002334:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002336:	e008      	b.n	800234a <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002338:	f7fe fc72 	bl	8000c20 <HAL_GetTick>
 800233c:	4602      	mov	r2, r0
 800233e:	693b      	ldr	r3, [r7, #16]
 8002340:	1ad3      	subs	r3, r2, r3
 8002342:	2b02      	cmp	r3, #2
 8002344:	d901      	bls.n	800234a <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8002346:	2303      	movs	r3, #3
 8002348:	e093      	b.n	8002472 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800234a:	4b29      	ldr	r3, [pc, #164]	; (80023f0 <HAL_RCC_OscConfig+0x4ac>)
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002352:	2b00      	cmp	r3, #0
 8002354:	d1f0      	bne.n	8002338 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	69da      	ldr	r2, [r3, #28]
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	6a1b      	ldr	r3, [r3, #32]
 800235e:	431a      	orrs	r2, r3
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002364:	019b      	lsls	r3, r3, #6
 8002366:	431a      	orrs	r2, r3
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800236c:	085b      	lsrs	r3, r3, #1
 800236e:	3b01      	subs	r3, #1
 8002370:	041b      	lsls	r3, r3, #16
 8002372:	431a      	orrs	r2, r3
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002378:	061b      	lsls	r3, r3, #24
 800237a:	431a      	orrs	r2, r3
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002380:	071b      	lsls	r3, r3, #28
 8002382:	491b      	ldr	r1, [pc, #108]	; (80023f0 <HAL_RCC_OscConfig+0x4ac>)
 8002384:	4313      	orrs	r3, r2
 8002386:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002388:	4b1b      	ldr	r3, [pc, #108]	; (80023f8 <HAL_RCC_OscConfig+0x4b4>)
 800238a:	2201      	movs	r2, #1
 800238c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800238e:	f7fe fc47 	bl	8000c20 <HAL_GetTick>
 8002392:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002394:	e008      	b.n	80023a8 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002396:	f7fe fc43 	bl	8000c20 <HAL_GetTick>
 800239a:	4602      	mov	r2, r0
 800239c:	693b      	ldr	r3, [r7, #16]
 800239e:	1ad3      	subs	r3, r2, r3
 80023a0:	2b02      	cmp	r3, #2
 80023a2:	d901      	bls.n	80023a8 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80023a4:	2303      	movs	r3, #3
 80023a6:	e064      	b.n	8002472 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80023a8:	4b11      	ldr	r3, [pc, #68]	; (80023f0 <HAL_RCC_OscConfig+0x4ac>)
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d0f0      	beq.n	8002396 <HAL_RCC_OscConfig+0x452>
 80023b4:	e05c      	b.n	8002470 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023b6:	4b10      	ldr	r3, [pc, #64]	; (80023f8 <HAL_RCC_OscConfig+0x4b4>)
 80023b8:	2200      	movs	r2, #0
 80023ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023bc:	f7fe fc30 	bl	8000c20 <HAL_GetTick>
 80023c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80023c2:	e008      	b.n	80023d6 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80023c4:	f7fe fc2c 	bl	8000c20 <HAL_GetTick>
 80023c8:	4602      	mov	r2, r0
 80023ca:	693b      	ldr	r3, [r7, #16]
 80023cc:	1ad3      	subs	r3, r2, r3
 80023ce:	2b02      	cmp	r3, #2
 80023d0:	d901      	bls.n	80023d6 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80023d2:	2303      	movs	r3, #3
 80023d4:	e04d      	b.n	8002472 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80023d6:	4b06      	ldr	r3, [pc, #24]	; (80023f0 <HAL_RCC_OscConfig+0x4ac>)
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d1f0      	bne.n	80023c4 <HAL_RCC_OscConfig+0x480>
 80023e2:	e045      	b.n	8002470 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	699b      	ldr	r3, [r3, #24]
 80023e8:	2b01      	cmp	r3, #1
 80023ea:	d107      	bne.n	80023fc <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80023ec:	2301      	movs	r3, #1
 80023ee:	e040      	b.n	8002472 <HAL_RCC_OscConfig+0x52e>
 80023f0:	40023800 	.word	0x40023800
 80023f4:	40007000 	.word	0x40007000
 80023f8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80023fc:	4b1f      	ldr	r3, [pc, #124]	; (800247c <HAL_RCC_OscConfig+0x538>)
 80023fe:	685b      	ldr	r3, [r3, #4]
 8002400:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	699b      	ldr	r3, [r3, #24]
 8002406:	2b01      	cmp	r3, #1
 8002408:	d030      	beq.n	800246c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002414:	429a      	cmp	r2, r3
 8002416:	d129      	bne.n	800246c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002422:	429a      	cmp	r2, r3
 8002424:	d122      	bne.n	800246c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002426:	68fa      	ldr	r2, [r7, #12]
 8002428:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800242c:	4013      	ands	r3, r2
 800242e:	687a      	ldr	r2, [r7, #4]
 8002430:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002432:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002434:	4293      	cmp	r3, r2
 8002436:	d119      	bne.n	800246c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002442:	085b      	lsrs	r3, r3, #1
 8002444:	3b01      	subs	r3, #1
 8002446:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002448:	429a      	cmp	r2, r3
 800244a:	d10f      	bne.n	800246c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002456:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002458:	429a      	cmp	r2, r3
 800245a:	d107      	bne.n	800246c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002466:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002468:	429a      	cmp	r2, r3
 800246a:	d001      	beq.n	8002470 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 800246c:	2301      	movs	r3, #1
 800246e:	e000      	b.n	8002472 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8002470:	2300      	movs	r3, #0
}
 8002472:	4618      	mov	r0, r3
 8002474:	3718      	adds	r7, #24
 8002476:	46bd      	mov	sp, r7
 8002478:	bd80      	pop	{r7, pc}
 800247a:	bf00      	nop
 800247c:	40023800 	.word	0x40023800

08002480 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002480:	b580      	push	{r7, lr}
 8002482:	b082      	sub	sp, #8
 8002484:	af00      	add	r7, sp, #0
 8002486:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	2b00      	cmp	r3, #0
 800248c:	d101      	bne.n	8002492 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800248e:	2301      	movs	r3, #1
 8002490:	e03f      	b.n	8002512 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002498:	b2db      	uxtb	r3, r3
 800249a:	2b00      	cmp	r3, #0
 800249c:	d106      	bne.n	80024ac <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	2200      	movs	r2, #0
 80024a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80024a6:	6878      	ldr	r0, [r7, #4]
 80024a8:	f7fe f9e8 	bl	800087c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	2224      	movs	r2, #36	; 0x24
 80024b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	68da      	ldr	r2, [r3, #12]
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80024c2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80024c4:	6878      	ldr	r0, [r7, #4]
 80024c6:	f000 fc7b 	bl	8002dc0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	691a      	ldr	r2, [r3, #16]
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80024d8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	695a      	ldr	r2, [r3, #20]
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80024e8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	68da      	ldr	r2, [r3, #12]
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80024f8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	2200      	movs	r2, #0
 80024fe:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	2220      	movs	r2, #32
 8002504:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	2220      	movs	r2, #32
 800250c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002510:	2300      	movs	r3, #0
}
 8002512:	4618      	mov	r0, r3
 8002514:	3708      	adds	r7, #8
 8002516:	46bd      	mov	sp, r7
 8002518:	bd80      	pop	{r7, pc}
	...

0800251c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800251c:	b580      	push	{r7, lr}
 800251e:	b0ba      	sub	sp, #232	; 0xe8
 8002520:	af00      	add	r7, sp, #0
 8002522:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	68db      	ldr	r3, [r3, #12]
 8002534:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	695b      	ldr	r3, [r3, #20]
 800253e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8002542:	2300      	movs	r3, #0
 8002544:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8002548:	2300      	movs	r3, #0
 800254a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800254e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002552:	f003 030f 	and.w	r3, r3, #15
 8002556:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800255a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800255e:	2b00      	cmp	r3, #0
 8002560:	d10f      	bne.n	8002582 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002562:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002566:	f003 0320 	and.w	r3, r3, #32
 800256a:	2b00      	cmp	r3, #0
 800256c:	d009      	beq.n	8002582 <HAL_UART_IRQHandler+0x66>
 800256e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002572:	f003 0320 	and.w	r3, r3, #32
 8002576:	2b00      	cmp	r3, #0
 8002578:	d003      	beq.n	8002582 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800257a:	6878      	ldr	r0, [r7, #4]
 800257c:	f000 fb65 	bl	8002c4a <UART_Receive_IT>
      return;
 8002580:	e256      	b.n	8002a30 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8002582:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002586:	2b00      	cmp	r3, #0
 8002588:	f000 80de 	beq.w	8002748 <HAL_UART_IRQHandler+0x22c>
 800258c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002590:	f003 0301 	and.w	r3, r3, #1
 8002594:	2b00      	cmp	r3, #0
 8002596:	d106      	bne.n	80025a6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002598:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800259c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	f000 80d1 	beq.w	8002748 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80025a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80025aa:	f003 0301 	and.w	r3, r3, #1
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d00b      	beq.n	80025ca <HAL_UART_IRQHandler+0xae>
 80025b2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80025b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d005      	beq.n	80025ca <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025c2:	f043 0201 	orr.w	r2, r3, #1
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80025ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80025ce:	f003 0304 	and.w	r3, r3, #4
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d00b      	beq.n	80025ee <HAL_UART_IRQHandler+0xd2>
 80025d6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80025da:	f003 0301 	and.w	r3, r3, #1
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d005      	beq.n	80025ee <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025e6:	f043 0202 	orr.w	r2, r3, #2
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80025ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80025f2:	f003 0302 	and.w	r3, r3, #2
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d00b      	beq.n	8002612 <HAL_UART_IRQHandler+0xf6>
 80025fa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80025fe:	f003 0301 	and.w	r3, r3, #1
 8002602:	2b00      	cmp	r3, #0
 8002604:	d005      	beq.n	8002612 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800260a:	f043 0204 	orr.w	r2, r3, #4
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8002612:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002616:	f003 0308 	and.w	r3, r3, #8
 800261a:	2b00      	cmp	r3, #0
 800261c:	d011      	beq.n	8002642 <HAL_UART_IRQHandler+0x126>
 800261e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002622:	f003 0320 	and.w	r3, r3, #32
 8002626:	2b00      	cmp	r3, #0
 8002628:	d105      	bne.n	8002636 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800262a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800262e:	f003 0301 	and.w	r3, r3, #1
 8002632:	2b00      	cmp	r3, #0
 8002634:	d005      	beq.n	8002642 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800263a:	f043 0208 	orr.w	r2, r3, #8
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002646:	2b00      	cmp	r3, #0
 8002648:	f000 81ed 	beq.w	8002a26 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800264c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002650:	f003 0320 	and.w	r3, r3, #32
 8002654:	2b00      	cmp	r3, #0
 8002656:	d008      	beq.n	800266a <HAL_UART_IRQHandler+0x14e>
 8002658:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800265c:	f003 0320 	and.w	r3, r3, #32
 8002660:	2b00      	cmp	r3, #0
 8002662:	d002      	beq.n	800266a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002664:	6878      	ldr	r0, [r7, #4]
 8002666:	f000 faf0 	bl	8002c4a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	695b      	ldr	r3, [r3, #20]
 8002670:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002674:	2b40      	cmp	r3, #64	; 0x40
 8002676:	bf0c      	ite	eq
 8002678:	2301      	moveq	r3, #1
 800267a:	2300      	movne	r3, #0
 800267c:	b2db      	uxtb	r3, r3
 800267e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002686:	f003 0308 	and.w	r3, r3, #8
 800268a:	2b00      	cmp	r3, #0
 800268c:	d103      	bne.n	8002696 <HAL_UART_IRQHandler+0x17a>
 800268e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002692:	2b00      	cmp	r3, #0
 8002694:	d04f      	beq.n	8002736 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002696:	6878      	ldr	r0, [r7, #4]
 8002698:	f000 f9f8 	bl	8002a8c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	695b      	ldr	r3, [r3, #20]
 80026a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026a6:	2b40      	cmp	r3, #64	; 0x40
 80026a8:	d141      	bne.n	800272e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	3314      	adds	r3, #20
 80026b0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80026b4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80026b8:	e853 3f00 	ldrex	r3, [r3]
 80026bc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80026c0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80026c4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80026c8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	3314      	adds	r3, #20
 80026d2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80026d6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80026da:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80026de:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80026e2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80026e6:	e841 2300 	strex	r3, r2, [r1]
 80026ea:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80026ee:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d1d9      	bne.n	80026aa <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d013      	beq.n	8002726 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002702:	4a7d      	ldr	r2, [pc, #500]	; (80028f8 <HAL_UART_IRQHandler+0x3dc>)
 8002704:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800270a:	4618      	mov	r0, r3
 800270c:	f7fe fcc4 	bl	8001098 <HAL_DMA_Abort_IT>
 8002710:	4603      	mov	r3, r0
 8002712:	2b00      	cmp	r3, #0
 8002714:	d016      	beq.n	8002744 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800271a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800271c:	687a      	ldr	r2, [r7, #4]
 800271e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002720:	4610      	mov	r0, r2
 8002722:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002724:	e00e      	b.n	8002744 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002726:	6878      	ldr	r0, [r7, #4]
 8002728:	f000 f99a 	bl	8002a60 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800272c:	e00a      	b.n	8002744 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800272e:	6878      	ldr	r0, [r7, #4]
 8002730:	f000 f996 	bl	8002a60 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002734:	e006      	b.n	8002744 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002736:	6878      	ldr	r0, [r7, #4]
 8002738:	f000 f992 	bl	8002a60 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	2200      	movs	r2, #0
 8002740:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8002742:	e170      	b.n	8002a26 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002744:	bf00      	nop
    return;
 8002746:	e16e      	b.n	8002a26 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800274c:	2b01      	cmp	r3, #1
 800274e:	f040 814a 	bne.w	80029e6 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8002752:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002756:	f003 0310 	and.w	r3, r3, #16
 800275a:	2b00      	cmp	r3, #0
 800275c:	f000 8143 	beq.w	80029e6 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8002760:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002764:	f003 0310 	and.w	r3, r3, #16
 8002768:	2b00      	cmp	r3, #0
 800276a:	f000 813c 	beq.w	80029e6 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800276e:	2300      	movs	r3, #0
 8002770:	60bb      	str	r3, [r7, #8]
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	60bb      	str	r3, [r7, #8]
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	685b      	ldr	r3, [r3, #4]
 8002780:	60bb      	str	r3, [r7, #8]
 8002782:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	695b      	ldr	r3, [r3, #20]
 800278a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800278e:	2b40      	cmp	r3, #64	; 0x40
 8002790:	f040 80b4 	bne.w	80028fc <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	685b      	ldr	r3, [r3, #4]
 800279c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80027a0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	f000 8140 	beq.w	8002a2a <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80027ae:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80027b2:	429a      	cmp	r2, r3
 80027b4:	f080 8139 	bcs.w	8002a2a <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80027be:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027c4:	69db      	ldr	r3, [r3, #28]
 80027c6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80027ca:	f000 8088 	beq.w	80028de <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	330c      	adds	r3, #12
 80027d4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80027d8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80027dc:	e853 3f00 	ldrex	r3, [r3]
 80027e0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80027e4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80027e8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80027ec:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	330c      	adds	r3, #12
 80027f6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80027fa:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80027fe:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002802:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8002806:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800280a:	e841 2300 	strex	r3, r2, [r1]
 800280e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8002812:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002816:	2b00      	cmp	r3, #0
 8002818:	d1d9      	bne.n	80027ce <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	3314      	adds	r3, #20
 8002820:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002822:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002824:	e853 3f00 	ldrex	r3, [r3]
 8002828:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800282a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800282c:	f023 0301 	bic.w	r3, r3, #1
 8002830:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	3314      	adds	r3, #20
 800283a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800283e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8002842:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002844:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8002846:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800284a:	e841 2300 	strex	r3, r2, [r1]
 800284e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8002850:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002852:	2b00      	cmp	r3, #0
 8002854:	d1e1      	bne.n	800281a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	3314      	adds	r3, #20
 800285c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800285e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002860:	e853 3f00 	ldrex	r3, [r3]
 8002864:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8002866:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002868:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800286c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	3314      	adds	r3, #20
 8002876:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800287a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800287c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800287e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8002880:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002882:	e841 2300 	strex	r3, r2, [r1]
 8002886:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8002888:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800288a:	2b00      	cmp	r3, #0
 800288c:	d1e3      	bne.n	8002856 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	2220      	movs	r2, #32
 8002892:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	2200      	movs	r2, #0
 800289a:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	330c      	adds	r3, #12
 80028a2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80028a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80028a6:	e853 3f00 	ldrex	r3, [r3]
 80028aa:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80028ac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80028ae:	f023 0310 	bic.w	r3, r3, #16
 80028b2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	330c      	adds	r3, #12
 80028bc:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80028c0:	65ba      	str	r2, [r7, #88]	; 0x58
 80028c2:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80028c4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80028c6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80028c8:	e841 2300 	strex	r3, r2, [r1]
 80028cc:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80028ce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d1e3      	bne.n	800289c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028d8:	4618      	mov	r0, r3
 80028da:	f7fe fb6d 	bl	8000fb8 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80028e6:	b29b      	uxth	r3, r3
 80028e8:	1ad3      	subs	r3, r2, r3
 80028ea:	b29b      	uxth	r3, r3
 80028ec:	4619      	mov	r1, r3
 80028ee:	6878      	ldr	r0, [r7, #4]
 80028f0:	f000 f8c0 	bl	8002a74 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80028f4:	e099      	b.n	8002a2a <HAL_UART_IRQHandler+0x50e>
 80028f6:	bf00      	nop
 80028f8:	08002b53 	.word	0x08002b53
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002904:	b29b      	uxth	r3, r3
 8002906:	1ad3      	subs	r3, r2, r3
 8002908:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002910:	b29b      	uxth	r3, r3
 8002912:	2b00      	cmp	r3, #0
 8002914:	f000 808b 	beq.w	8002a2e <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8002918:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800291c:	2b00      	cmp	r3, #0
 800291e:	f000 8086 	beq.w	8002a2e <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	330c      	adds	r3, #12
 8002928:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800292a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800292c:	e853 3f00 	ldrex	r3, [r3]
 8002930:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8002932:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002934:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002938:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	330c      	adds	r3, #12
 8002942:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8002946:	647a      	str	r2, [r7, #68]	; 0x44
 8002948:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800294a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800294c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800294e:	e841 2300 	strex	r3, r2, [r1]
 8002952:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002954:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002956:	2b00      	cmp	r3, #0
 8002958:	d1e3      	bne.n	8002922 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	3314      	adds	r3, #20
 8002960:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002962:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002964:	e853 3f00 	ldrex	r3, [r3]
 8002968:	623b      	str	r3, [r7, #32]
   return(result);
 800296a:	6a3b      	ldr	r3, [r7, #32]
 800296c:	f023 0301 	bic.w	r3, r3, #1
 8002970:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	3314      	adds	r3, #20
 800297a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800297e:	633a      	str	r2, [r7, #48]	; 0x30
 8002980:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002982:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002984:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002986:	e841 2300 	strex	r3, r2, [r1]
 800298a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800298c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800298e:	2b00      	cmp	r3, #0
 8002990:	d1e3      	bne.n	800295a <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	2220      	movs	r2, #32
 8002996:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	2200      	movs	r2, #0
 800299e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	330c      	adds	r3, #12
 80029a6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80029a8:	693b      	ldr	r3, [r7, #16]
 80029aa:	e853 3f00 	ldrex	r3, [r3]
 80029ae:	60fb      	str	r3, [r7, #12]
   return(result);
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	f023 0310 	bic.w	r3, r3, #16
 80029b6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	330c      	adds	r3, #12
 80029c0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80029c4:	61fa      	str	r2, [r7, #28]
 80029c6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80029c8:	69b9      	ldr	r1, [r7, #24]
 80029ca:	69fa      	ldr	r2, [r7, #28]
 80029cc:	e841 2300 	strex	r3, r2, [r1]
 80029d0:	617b      	str	r3, [r7, #20]
   return(result);
 80029d2:	697b      	ldr	r3, [r7, #20]
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d1e3      	bne.n	80029a0 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80029d8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80029dc:	4619      	mov	r1, r3
 80029de:	6878      	ldr	r0, [r7, #4]
 80029e0:	f000 f848 	bl	8002a74 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80029e4:	e023      	b.n	8002a2e <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80029e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80029ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d009      	beq.n	8002a06 <HAL_UART_IRQHandler+0x4ea>
 80029f2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80029f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d003      	beq.n	8002a06 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80029fe:	6878      	ldr	r0, [r7, #4]
 8002a00:	f000 f8bb 	bl	8002b7a <UART_Transmit_IT>
    return;
 8002a04:	e014      	b.n	8002a30 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002a06:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002a0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d00e      	beq.n	8002a30 <HAL_UART_IRQHandler+0x514>
 8002a12:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002a16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d008      	beq.n	8002a30 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8002a1e:	6878      	ldr	r0, [r7, #4]
 8002a20:	f000 f8fb 	bl	8002c1a <UART_EndTransmit_IT>
    return;
 8002a24:	e004      	b.n	8002a30 <HAL_UART_IRQHandler+0x514>
    return;
 8002a26:	bf00      	nop
 8002a28:	e002      	b.n	8002a30 <HAL_UART_IRQHandler+0x514>
      return;
 8002a2a:	bf00      	nop
 8002a2c:	e000      	b.n	8002a30 <HAL_UART_IRQHandler+0x514>
      return;
 8002a2e:	bf00      	nop
  }
}
 8002a30:	37e8      	adds	r7, #232	; 0xe8
 8002a32:	46bd      	mov	sp, r7
 8002a34:	bd80      	pop	{r7, pc}
 8002a36:	bf00      	nop

08002a38 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002a38:	b480      	push	{r7}
 8002a3a:	b083      	sub	sp, #12
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002a40:	bf00      	nop
 8002a42:	370c      	adds	r7, #12
 8002a44:	46bd      	mov	sp, r7
 8002a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a4a:	4770      	bx	lr

08002a4c <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002a4c:	b480      	push	{r7}
 8002a4e:	b083      	sub	sp, #12
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8002a54:	bf00      	nop
 8002a56:	370c      	adds	r7, #12
 8002a58:	46bd      	mov	sp, r7
 8002a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a5e:	4770      	bx	lr

08002a60 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002a60:	b480      	push	{r7}
 8002a62:	b083      	sub	sp, #12
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002a68:	bf00      	nop
 8002a6a:	370c      	adds	r7, #12
 8002a6c:	46bd      	mov	sp, r7
 8002a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a72:	4770      	bx	lr

08002a74 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002a74:	b480      	push	{r7}
 8002a76:	b083      	sub	sp, #12
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	6078      	str	r0, [r7, #4]
 8002a7c:	460b      	mov	r3, r1
 8002a7e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002a80:	bf00      	nop
 8002a82:	370c      	adds	r7, #12
 8002a84:	46bd      	mov	sp, r7
 8002a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a8a:	4770      	bx	lr

08002a8c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002a8c:	b480      	push	{r7}
 8002a8e:	b095      	sub	sp, #84	; 0x54
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	330c      	adds	r3, #12
 8002a9a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a9e:	e853 3f00 	ldrex	r3, [r3]
 8002aa2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8002aa4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002aa6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002aaa:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	330c      	adds	r3, #12
 8002ab2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002ab4:	643a      	str	r2, [r7, #64]	; 0x40
 8002ab6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ab8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8002aba:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002abc:	e841 2300 	strex	r3, r2, [r1]
 8002ac0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8002ac2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d1e5      	bne.n	8002a94 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	3314      	adds	r3, #20
 8002ace:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ad0:	6a3b      	ldr	r3, [r7, #32]
 8002ad2:	e853 3f00 	ldrex	r3, [r3]
 8002ad6:	61fb      	str	r3, [r7, #28]
   return(result);
 8002ad8:	69fb      	ldr	r3, [r7, #28]
 8002ada:	f023 0301 	bic.w	r3, r3, #1
 8002ade:	64bb      	str	r3, [r7, #72]	; 0x48
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	3314      	adds	r3, #20
 8002ae6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002ae8:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002aea:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002aec:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002aee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002af0:	e841 2300 	strex	r3, r2, [r1]
 8002af4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002af6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d1e5      	bne.n	8002ac8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b00:	2b01      	cmp	r3, #1
 8002b02:	d119      	bne.n	8002b38 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	330c      	adds	r3, #12
 8002b0a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	e853 3f00 	ldrex	r3, [r3]
 8002b12:	60bb      	str	r3, [r7, #8]
   return(result);
 8002b14:	68bb      	ldr	r3, [r7, #8]
 8002b16:	f023 0310 	bic.w	r3, r3, #16
 8002b1a:	647b      	str	r3, [r7, #68]	; 0x44
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	330c      	adds	r3, #12
 8002b22:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002b24:	61ba      	str	r2, [r7, #24]
 8002b26:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b28:	6979      	ldr	r1, [r7, #20]
 8002b2a:	69ba      	ldr	r2, [r7, #24]
 8002b2c:	e841 2300 	strex	r3, r2, [r1]
 8002b30:	613b      	str	r3, [r7, #16]
   return(result);
 8002b32:	693b      	ldr	r3, [r7, #16]
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d1e5      	bne.n	8002b04 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	2220      	movs	r2, #32
 8002b3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	2200      	movs	r2, #0
 8002b44:	631a      	str	r2, [r3, #48]	; 0x30
}
 8002b46:	bf00      	nop
 8002b48:	3754      	adds	r7, #84	; 0x54
 8002b4a:	46bd      	mov	sp, r7
 8002b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b50:	4770      	bx	lr

08002b52 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002b52:	b580      	push	{r7, lr}
 8002b54:	b084      	sub	sp, #16
 8002b56:	af00      	add	r7, sp, #0
 8002b58:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b5e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	2200      	movs	r2, #0
 8002b64:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	2200      	movs	r2, #0
 8002b6a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002b6c:	68f8      	ldr	r0, [r7, #12]
 8002b6e:	f7ff ff77 	bl	8002a60 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002b72:	bf00      	nop
 8002b74:	3710      	adds	r7, #16
 8002b76:	46bd      	mov	sp, r7
 8002b78:	bd80      	pop	{r7, pc}

08002b7a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002b7a:	b480      	push	{r7}
 8002b7c:	b085      	sub	sp, #20
 8002b7e:	af00      	add	r7, sp, #0
 8002b80:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b88:	b2db      	uxtb	r3, r3
 8002b8a:	2b21      	cmp	r3, #33	; 0x21
 8002b8c:	d13e      	bne.n	8002c0c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	689b      	ldr	r3, [r3, #8]
 8002b92:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b96:	d114      	bne.n	8002bc2 <UART_Transmit_IT+0x48>
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	691b      	ldr	r3, [r3, #16]
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d110      	bne.n	8002bc2 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	6a1b      	ldr	r3, [r3, #32]
 8002ba4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	881b      	ldrh	r3, [r3, #0]
 8002baa:	461a      	mov	r2, r3
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002bb4:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	6a1b      	ldr	r3, [r3, #32]
 8002bba:	1c9a      	adds	r2, r3, #2
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	621a      	str	r2, [r3, #32]
 8002bc0:	e008      	b.n	8002bd4 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	6a1b      	ldr	r3, [r3, #32]
 8002bc6:	1c59      	adds	r1, r3, #1
 8002bc8:	687a      	ldr	r2, [r7, #4]
 8002bca:	6211      	str	r1, [r2, #32]
 8002bcc:	781a      	ldrb	r2, [r3, #0]
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002bd8:	b29b      	uxth	r3, r3
 8002bda:	3b01      	subs	r3, #1
 8002bdc:	b29b      	uxth	r3, r3
 8002bde:	687a      	ldr	r2, [r7, #4]
 8002be0:	4619      	mov	r1, r3
 8002be2:	84d1      	strh	r1, [r2, #38]	; 0x26
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d10f      	bne.n	8002c08 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	68da      	ldr	r2, [r3, #12]
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002bf6:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	68da      	ldr	r2, [r3, #12]
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002c06:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002c08:	2300      	movs	r3, #0
 8002c0a:	e000      	b.n	8002c0e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002c0c:	2302      	movs	r3, #2
  }
}
 8002c0e:	4618      	mov	r0, r3
 8002c10:	3714      	adds	r7, #20
 8002c12:	46bd      	mov	sp, r7
 8002c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c18:	4770      	bx	lr

08002c1a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002c1a:	b580      	push	{r7, lr}
 8002c1c:	b082      	sub	sp, #8
 8002c1e:	af00      	add	r7, sp, #0
 8002c20:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	68da      	ldr	r2, [r3, #12]
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002c30:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	2220      	movs	r2, #32
 8002c36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002c3a:	6878      	ldr	r0, [r7, #4]
 8002c3c:	f7ff fefc 	bl	8002a38 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002c40:	2300      	movs	r3, #0
}
 8002c42:	4618      	mov	r0, r3
 8002c44:	3708      	adds	r7, #8
 8002c46:	46bd      	mov	sp, r7
 8002c48:	bd80      	pop	{r7, pc}

08002c4a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002c4a:	b580      	push	{r7, lr}
 8002c4c:	b08c      	sub	sp, #48	; 0x30
 8002c4e:	af00      	add	r7, sp, #0
 8002c50:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002c58:	b2db      	uxtb	r3, r3
 8002c5a:	2b22      	cmp	r3, #34	; 0x22
 8002c5c:	f040 80ab 	bne.w	8002db6 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	689b      	ldr	r3, [r3, #8]
 8002c64:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c68:	d117      	bne.n	8002c9a <UART_Receive_IT+0x50>
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	691b      	ldr	r3, [r3, #16]
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d113      	bne.n	8002c9a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8002c72:	2300      	movs	r3, #0
 8002c74:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c7a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	685b      	ldr	r3, [r3, #4]
 8002c82:	b29b      	uxth	r3, r3
 8002c84:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002c88:	b29a      	uxth	r2, r3
 8002c8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c8c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c92:	1c9a      	adds	r2, r3, #2
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	629a      	str	r2, [r3, #40]	; 0x28
 8002c98:	e026      	b.n	8002ce8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c9e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8002ca0:	2300      	movs	r3, #0
 8002ca2:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	689b      	ldr	r3, [r3, #8]
 8002ca8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002cac:	d007      	beq.n	8002cbe <UART_Receive_IT+0x74>
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	689b      	ldr	r3, [r3, #8]
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d10a      	bne.n	8002ccc <UART_Receive_IT+0x82>
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	691b      	ldr	r3, [r3, #16]
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d106      	bne.n	8002ccc <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	685b      	ldr	r3, [r3, #4]
 8002cc4:	b2da      	uxtb	r2, r3
 8002cc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cc8:	701a      	strb	r2, [r3, #0]
 8002cca:	e008      	b.n	8002cde <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	685b      	ldr	r3, [r3, #4]
 8002cd2:	b2db      	uxtb	r3, r3
 8002cd4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002cd8:	b2da      	uxtb	r2, r3
 8002cda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cdc:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ce2:	1c5a      	adds	r2, r3, #1
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002cec:	b29b      	uxth	r3, r3
 8002cee:	3b01      	subs	r3, #1
 8002cf0:	b29b      	uxth	r3, r3
 8002cf2:	687a      	ldr	r2, [r7, #4]
 8002cf4:	4619      	mov	r1, r3
 8002cf6:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d15a      	bne.n	8002db2 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	68da      	ldr	r2, [r3, #12]
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f022 0220 	bic.w	r2, r2, #32
 8002d0a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	68da      	ldr	r2, [r3, #12]
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002d1a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	695a      	ldr	r2, [r3, #20]
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f022 0201 	bic.w	r2, r2, #1
 8002d2a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	2220      	movs	r2, #32
 8002d30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d38:	2b01      	cmp	r3, #1
 8002d3a:	d135      	bne.n	8002da8 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	2200      	movs	r2, #0
 8002d40:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	330c      	adds	r3, #12
 8002d48:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d4a:	697b      	ldr	r3, [r7, #20]
 8002d4c:	e853 3f00 	ldrex	r3, [r3]
 8002d50:	613b      	str	r3, [r7, #16]
   return(result);
 8002d52:	693b      	ldr	r3, [r7, #16]
 8002d54:	f023 0310 	bic.w	r3, r3, #16
 8002d58:	627b      	str	r3, [r7, #36]	; 0x24
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	330c      	adds	r3, #12
 8002d60:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d62:	623a      	str	r2, [r7, #32]
 8002d64:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d66:	69f9      	ldr	r1, [r7, #28]
 8002d68:	6a3a      	ldr	r2, [r7, #32]
 8002d6a:	e841 2300 	strex	r3, r2, [r1]
 8002d6e:	61bb      	str	r3, [r7, #24]
   return(result);
 8002d70:	69bb      	ldr	r3, [r7, #24]
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d1e5      	bne.n	8002d42 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	f003 0310 	and.w	r3, r3, #16
 8002d80:	2b10      	cmp	r3, #16
 8002d82:	d10a      	bne.n	8002d9a <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002d84:	2300      	movs	r3, #0
 8002d86:	60fb      	str	r3, [r7, #12]
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	60fb      	str	r3, [r7, #12]
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	685b      	ldr	r3, [r3, #4]
 8002d96:	60fb      	str	r3, [r7, #12]
 8002d98:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002d9e:	4619      	mov	r1, r3
 8002da0:	6878      	ldr	r0, [r7, #4]
 8002da2:	f7ff fe67 	bl	8002a74 <HAL_UARTEx_RxEventCallback>
 8002da6:	e002      	b.n	8002dae <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8002da8:	6878      	ldr	r0, [r7, #4]
 8002daa:	f7ff fe4f 	bl	8002a4c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8002dae:	2300      	movs	r3, #0
 8002db0:	e002      	b.n	8002db8 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8002db2:	2300      	movs	r3, #0
 8002db4:	e000      	b.n	8002db8 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8002db6:	2302      	movs	r3, #2
  }
}
 8002db8:	4618      	mov	r0, r3
 8002dba:	3730      	adds	r7, #48	; 0x30
 8002dbc:	46bd      	mov	sp, r7
 8002dbe:	bd80      	pop	{r7, pc}

08002dc0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002dc0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002dc4:	b0c0      	sub	sp, #256	; 0x100
 8002dc6:	af00      	add	r7, sp, #0
 8002dc8:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002dcc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	691b      	ldr	r3, [r3, #16]
 8002dd4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002dd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ddc:	68d9      	ldr	r1, [r3, #12]
 8002dde:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002de2:	681a      	ldr	r2, [r3, #0]
 8002de4:	ea40 0301 	orr.w	r3, r0, r1
 8002de8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002dea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002dee:	689a      	ldr	r2, [r3, #8]
 8002df0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002df4:	691b      	ldr	r3, [r3, #16]
 8002df6:	431a      	orrs	r2, r3
 8002df8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002dfc:	695b      	ldr	r3, [r3, #20]
 8002dfe:	431a      	orrs	r2, r3
 8002e00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e04:	69db      	ldr	r3, [r3, #28]
 8002e06:	4313      	orrs	r3, r2
 8002e08:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002e0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	68db      	ldr	r3, [r3, #12]
 8002e14:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002e18:	f021 010c 	bic.w	r1, r1, #12
 8002e1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e20:	681a      	ldr	r2, [r3, #0]
 8002e22:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002e26:	430b      	orrs	r3, r1
 8002e28:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002e2a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	695b      	ldr	r3, [r3, #20]
 8002e32:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002e36:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e3a:	6999      	ldr	r1, [r3, #24]
 8002e3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e40:	681a      	ldr	r2, [r3, #0]
 8002e42:	ea40 0301 	orr.w	r3, r0, r1
 8002e46:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002e48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e4c:	681a      	ldr	r2, [r3, #0]
 8002e4e:	4b8f      	ldr	r3, [pc, #572]	; (800308c <UART_SetConfig+0x2cc>)
 8002e50:	429a      	cmp	r2, r3
 8002e52:	d005      	beq.n	8002e60 <UART_SetConfig+0xa0>
 8002e54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e58:	681a      	ldr	r2, [r3, #0]
 8002e5a:	4b8d      	ldr	r3, [pc, #564]	; (8003090 <UART_SetConfig+0x2d0>)
 8002e5c:	429a      	cmp	r2, r3
 8002e5e:	d104      	bne.n	8002e6a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002e60:	f7fe fe2c 	bl	8001abc <HAL_RCC_GetPCLK2Freq>
 8002e64:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8002e68:	e003      	b.n	8002e72 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002e6a:	f7fe fe13 	bl	8001a94 <HAL_RCC_GetPCLK1Freq>
 8002e6e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002e72:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e76:	69db      	ldr	r3, [r3, #28]
 8002e78:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002e7c:	f040 810c 	bne.w	8003098 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002e80:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002e84:	2200      	movs	r2, #0
 8002e86:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002e8a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8002e8e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8002e92:	4622      	mov	r2, r4
 8002e94:	462b      	mov	r3, r5
 8002e96:	1891      	adds	r1, r2, r2
 8002e98:	65b9      	str	r1, [r7, #88]	; 0x58
 8002e9a:	415b      	adcs	r3, r3
 8002e9c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002e9e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002ea2:	4621      	mov	r1, r4
 8002ea4:	eb12 0801 	adds.w	r8, r2, r1
 8002ea8:	4629      	mov	r1, r5
 8002eaa:	eb43 0901 	adc.w	r9, r3, r1
 8002eae:	f04f 0200 	mov.w	r2, #0
 8002eb2:	f04f 0300 	mov.w	r3, #0
 8002eb6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002eba:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002ebe:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002ec2:	4690      	mov	r8, r2
 8002ec4:	4699      	mov	r9, r3
 8002ec6:	4623      	mov	r3, r4
 8002ec8:	eb18 0303 	adds.w	r3, r8, r3
 8002ecc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002ed0:	462b      	mov	r3, r5
 8002ed2:	eb49 0303 	adc.w	r3, r9, r3
 8002ed6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002eda:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ede:	685b      	ldr	r3, [r3, #4]
 8002ee0:	2200      	movs	r2, #0
 8002ee2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002ee6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8002eea:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8002eee:	460b      	mov	r3, r1
 8002ef0:	18db      	adds	r3, r3, r3
 8002ef2:	653b      	str	r3, [r7, #80]	; 0x50
 8002ef4:	4613      	mov	r3, r2
 8002ef6:	eb42 0303 	adc.w	r3, r2, r3
 8002efa:	657b      	str	r3, [r7, #84]	; 0x54
 8002efc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002f00:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8002f04:	f7fd f984 	bl	8000210 <__aeabi_uldivmod>
 8002f08:	4602      	mov	r2, r0
 8002f0a:	460b      	mov	r3, r1
 8002f0c:	4b61      	ldr	r3, [pc, #388]	; (8003094 <UART_SetConfig+0x2d4>)
 8002f0e:	fba3 2302 	umull	r2, r3, r3, r2
 8002f12:	095b      	lsrs	r3, r3, #5
 8002f14:	011c      	lsls	r4, r3, #4
 8002f16:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002f1a:	2200      	movs	r2, #0
 8002f1c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002f20:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8002f24:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8002f28:	4642      	mov	r2, r8
 8002f2a:	464b      	mov	r3, r9
 8002f2c:	1891      	adds	r1, r2, r2
 8002f2e:	64b9      	str	r1, [r7, #72]	; 0x48
 8002f30:	415b      	adcs	r3, r3
 8002f32:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002f34:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002f38:	4641      	mov	r1, r8
 8002f3a:	eb12 0a01 	adds.w	sl, r2, r1
 8002f3e:	4649      	mov	r1, r9
 8002f40:	eb43 0b01 	adc.w	fp, r3, r1
 8002f44:	f04f 0200 	mov.w	r2, #0
 8002f48:	f04f 0300 	mov.w	r3, #0
 8002f4c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002f50:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002f54:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002f58:	4692      	mov	sl, r2
 8002f5a:	469b      	mov	fp, r3
 8002f5c:	4643      	mov	r3, r8
 8002f5e:	eb1a 0303 	adds.w	r3, sl, r3
 8002f62:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002f66:	464b      	mov	r3, r9
 8002f68:	eb4b 0303 	adc.w	r3, fp, r3
 8002f6c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002f70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f74:	685b      	ldr	r3, [r3, #4]
 8002f76:	2200      	movs	r2, #0
 8002f78:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002f7c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8002f80:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8002f84:	460b      	mov	r3, r1
 8002f86:	18db      	adds	r3, r3, r3
 8002f88:	643b      	str	r3, [r7, #64]	; 0x40
 8002f8a:	4613      	mov	r3, r2
 8002f8c:	eb42 0303 	adc.w	r3, r2, r3
 8002f90:	647b      	str	r3, [r7, #68]	; 0x44
 8002f92:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002f96:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8002f9a:	f7fd f939 	bl	8000210 <__aeabi_uldivmod>
 8002f9e:	4602      	mov	r2, r0
 8002fa0:	460b      	mov	r3, r1
 8002fa2:	4611      	mov	r1, r2
 8002fa4:	4b3b      	ldr	r3, [pc, #236]	; (8003094 <UART_SetConfig+0x2d4>)
 8002fa6:	fba3 2301 	umull	r2, r3, r3, r1
 8002faa:	095b      	lsrs	r3, r3, #5
 8002fac:	2264      	movs	r2, #100	; 0x64
 8002fae:	fb02 f303 	mul.w	r3, r2, r3
 8002fb2:	1acb      	subs	r3, r1, r3
 8002fb4:	00db      	lsls	r3, r3, #3
 8002fb6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8002fba:	4b36      	ldr	r3, [pc, #216]	; (8003094 <UART_SetConfig+0x2d4>)
 8002fbc:	fba3 2302 	umull	r2, r3, r3, r2
 8002fc0:	095b      	lsrs	r3, r3, #5
 8002fc2:	005b      	lsls	r3, r3, #1
 8002fc4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002fc8:	441c      	add	r4, r3
 8002fca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002fce:	2200      	movs	r2, #0
 8002fd0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002fd4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8002fd8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8002fdc:	4642      	mov	r2, r8
 8002fde:	464b      	mov	r3, r9
 8002fe0:	1891      	adds	r1, r2, r2
 8002fe2:	63b9      	str	r1, [r7, #56]	; 0x38
 8002fe4:	415b      	adcs	r3, r3
 8002fe6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002fe8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002fec:	4641      	mov	r1, r8
 8002fee:	1851      	adds	r1, r2, r1
 8002ff0:	6339      	str	r1, [r7, #48]	; 0x30
 8002ff2:	4649      	mov	r1, r9
 8002ff4:	414b      	adcs	r3, r1
 8002ff6:	637b      	str	r3, [r7, #52]	; 0x34
 8002ff8:	f04f 0200 	mov.w	r2, #0
 8002ffc:	f04f 0300 	mov.w	r3, #0
 8003000:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003004:	4659      	mov	r1, fp
 8003006:	00cb      	lsls	r3, r1, #3
 8003008:	4651      	mov	r1, sl
 800300a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800300e:	4651      	mov	r1, sl
 8003010:	00ca      	lsls	r2, r1, #3
 8003012:	4610      	mov	r0, r2
 8003014:	4619      	mov	r1, r3
 8003016:	4603      	mov	r3, r0
 8003018:	4642      	mov	r2, r8
 800301a:	189b      	adds	r3, r3, r2
 800301c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003020:	464b      	mov	r3, r9
 8003022:	460a      	mov	r2, r1
 8003024:	eb42 0303 	adc.w	r3, r2, r3
 8003028:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800302c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003030:	685b      	ldr	r3, [r3, #4]
 8003032:	2200      	movs	r2, #0
 8003034:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003038:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800303c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003040:	460b      	mov	r3, r1
 8003042:	18db      	adds	r3, r3, r3
 8003044:	62bb      	str	r3, [r7, #40]	; 0x28
 8003046:	4613      	mov	r3, r2
 8003048:	eb42 0303 	adc.w	r3, r2, r3
 800304c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800304e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003052:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003056:	f7fd f8db 	bl	8000210 <__aeabi_uldivmod>
 800305a:	4602      	mov	r2, r0
 800305c:	460b      	mov	r3, r1
 800305e:	4b0d      	ldr	r3, [pc, #52]	; (8003094 <UART_SetConfig+0x2d4>)
 8003060:	fba3 1302 	umull	r1, r3, r3, r2
 8003064:	095b      	lsrs	r3, r3, #5
 8003066:	2164      	movs	r1, #100	; 0x64
 8003068:	fb01 f303 	mul.w	r3, r1, r3
 800306c:	1ad3      	subs	r3, r2, r3
 800306e:	00db      	lsls	r3, r3, #3
 8003070:	3332      	adds	r3, #50	; 0x32
 8003072:	4a08      	ldr	r2, [pc, #32]	; (8003094 <UART_SetConfig+0x2d4>)
 8003074:	fba2 2303 	umull	r2, r3, r2, r3
 8003078:	095b      	lsrs	r3, r3, #5
 800307a:	f003 0207 	and.w	r2, r3, #7
 800307e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	4422      	add	r2, r4
 8003086:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003088:	e105      	b.n	8003296 <UART_SetConfig+0x4d6>
 800308a:	bf00      	nop
 800308c:	40011000 	.word	0x40011000
 8003090:	40011400 	.word	0x40011400
 8003094:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003098:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800309c:	2200      	movs	r2, #0
 800309e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80030a2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80030a6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80030aa:	4642      	mov	r2, r8
 80030ac:	464b      	mov	r3, r9
 80030ae:	1891      	adds	r1, r2, r2
 80030b0:	6239      	str	r1, [r7, #32]
 80030b2:	415b      	adcs	r3, r3
 80030b4:	627b      	str	r3, [r7, #36]	; 0x24
 80030b6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80030ba:	4641      	mov	r1, r8
 80030bc:	1854      	adds	r4, r2, r1
 80030be:	4649      	mov	r1, r9
 80030c0:	eb43 0501 	adc.w	r5, r3, r1
 80030c4:	f04f 0200 	mov.w	r2, #0
 80030c8:	f04f 0300 	mov.w	r3, #0
 80030cc:	00eb      	lsls	r3, r5, #3
 80030ce:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80030d2:	00e2      	lsls	r2, r4, #3
 80030d4:	4614      	mov	r4, r2
 80030d6:	461d      	mov	r5, r3
 80030d8:	4643      	mov	r3, r8
 80030da:	18e3      	adds	r3, r4, r3
 80030dc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80030e0:	464b      	mov	r3, r9
 80030e2:	eb45 0303 	adc.w	r3, r5, r3
 80030e6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80030ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80030ee:	685b      	ldr	r3, [r3, #4]
 80030f0:	2200      	movs	r2, #0
 80030f2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80030f6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80030fa:	f04f 0200 	mov.w	r2, #0
 80030fe:	f04f 0300 	mov.w	r3, #0
 8003102:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003106:	4629      	mov	r1, r5
 8003108:	008b      	lsls	r3, r1, #2
 800310a:	4621      	mov	r1, r4
 800310c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003110:	4621      	mov	r1, r4
 8003112:	008a      	lsls	r2, r1, #2
 8003114:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003118:	f7fd f87a 	bl	8000210 <__aeabi_uldivmod>
 800311c:	4602      	mov	r2, r0
 800311e:	460b      	mov	r3, r1
 8003120:	4b60      	ldr	r3, [pc, #384]	; (80032a4 <UART_SetConfig+0x4e4>)
 8003122:	fba3 2302 	umull	r2, r3, r3, r2
 8003126:	095b      	lsrs	r3, r3, #5
 8003128:	011c      	lsls	r4, r3, #4
 800312a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800312e:	2200      	movs	r2, #0
 8003130:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003134:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003138:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800313c:	4642      	mov	r2, r8
 800313e:	464b      	mov	r3, r9
 8003140:	1891      	adds	r1, r2, r2
 8003142:	61b9      	str	r1, [r7, #24]
 8003144:	415b      	adcs	r3, r3
 8003146:	61fb      	str	r3, [r7, #28]
 8003148:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800314c:	4641      	mov	r1, r8
 800314e:	1851      	adds	r1, r2, r1
 8003150:	6139      	str	r1, [r7, #16]
 8003152:	4649      	mov	r1, r9
 8003154:	414b      	adcs	r3, r1
 8003156:	617b      	str	r3, [r7, #20]
 8003158:	f04f 0200 	mov.w	r2, #0
 800315c:	f04f 0300 	mov.w	r3, #0
 8003160:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003164:	4659      	mov	r1, fp
 8003166:	00cb      	lsls	r3, r1, #3
 8003168:	4651      	mov	r1, sl
 800316a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800316e:	4651      	mov	r1, sl
 8003170:	00ca      	lsls	r2, r1, #3
 8003172:	4610      	mov	r0, r2
 8003174:	4619      	mov	r1, r3
 8003176:	4603      	mov	r3, r0
 8003178:	4642      	mov	r2, r8
 800317a:	189b      	adds	r3, r3, r2
 800317c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003180:	464b      	mov	r3, r9
 8003182:	460a      	mov	r2, r1
 8003184:	eb42 0303 	adc.w	r3, r2, r3
 8003188:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800318c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003190:	685b      	ldr	r3, [r3, #4]
 8003192:	2200      	movs	r2, #0
 8003194:	67bb      	str	r3, [r7, #120]	; 0x78
 8003196:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003198:	f04f 0200 	mov.w	r2, #0
 800319c:	f04f 0300 	mov.w	r3, #0
 80031a0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80031a4:	4649      	mov	r1, r9
 80031a6:	008b      	lsls	r3, r1, #2
 80031a8:	4641      	mov	r1, r8
 80031aa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80031ae:	4641      	mov	r1, r8
 80031b0:	008a      	lsls	r2, r1, #2
 80031b2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80031b6:	f7fd f82b 	bl	8000210 <__aeabi_uldivmod>
 80031ba:	4602      	mov	r2, r0
 80031bc:	460b      	mov	r3, r1
 80031be:	4b39      	ldr	r3, [pc, #228]	; (80032a4 <UART_SetConfig+0x4e4>)
 80031c0:	fba3 1302 	umull	r1, r3, r3, r2
 80031c4:	095b      	lsrs	r3, r3, #5
 80031c6:	2164      	movs	r1, #100	; 0x64
 80031c8:	fb01 f303 	mul.w	r3, r1, r3
 80031cc:	1ad3      	subs	r3, r2, r3
 80031ce:	011b      	lsls	r3, r3, #4
 80031d0:	3332      	adds	r3, #50	; 0x32
 80031d2:	4a34      	ldr	r2, [pc, #208]	; (80032a4 <UART_SetConfig+0x4e4>)
 80031d4:	fba2 2303 	umull	r2, r3, r2, r3
 80031d8:	095b      	lsrs	r3, r3, #5
 80031da:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80031de:	441c      	add	r4, r3
 80031e0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80031e4:	2200      	movs	r2, #0
 80031e6:	673b      	str	r3, [r7, #112]	; 0x70
 80031e8:	677a      	str	r2, [r7, #116]	; 0x74
 80031ea:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80031ee:	4642      	mov	r2, r8
 80031f0:	464b      	mov	r3, r9
 80031f2:	1891      	adds	r1, r2, r2
 80031f4:	60b9      	str	r1, [r7, #8]
 80031f6:	415b      	adcs	r3, r3
 80031f8:	60fb      	str	r3, [r7, #12]
 80031fa:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80031fe:	4641      	mov	r1, r8
 8003200:	1851      	adds	r1, r2, r1
 8003202:	6039      	str	r1, [r7, #0]
 8003204:	4649      	mov	r1, r9
 8003206:	414b      	adcs	r3, r1
 8003208:	607b      	str	r3, [r7, #4]
 800320a:	f04f 0200 	mov.w	r2, #0
 800320e:	f04f 0300 	mov.w	r3, #0
 8003212:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003216:	4659      	mov	r1, fp
 8003218:	00cb      	lsls	r3, r1, #3
 800321a:	4651      	mov	r1, sl
 800321c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003220:	4651      	mov	r1, sl
 8003222:	00ca      	lsls	r2, r1, #3
 8003224:	4610      	mov	r0, r2
 8003226:	4619      	mov	r1, r3
 8003228:	4603      	mov	r3, r0
 800322a:	4642      	mov	r2, r8
 800322c:	189b      	adds	r3, r3, r2
 800322e:	66bb      	str	r3, [r7, #104]	; 0x68
 8003230:	464b      	mov	r3, r9
 8003232:	460a      	mov	r2, r1
 8003234:	eb42 0303 	adc.w	r3, r2, r3
 8003238:	66fb      	str	r3, [r7, #108]	; 0x6c
 800323a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800323e:	685b      	ldr	r3, [r3, #4]
 8003240:	2200      	movs	r2, #0
 8003242:	663b      	str	r3, [r7, #96]	; 0x60
 8003244:	667a      	str	r2, [r7, #100]	; 0x64
 8003246:	f04f 0200 	mov.w	r2, #0
 800324a:	f04f 0300 	mov.w	r3, #0
 800324e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003252:	4649      	mov	r1, r9
 8003254:	008b      	lsls	r3, r1, #2
 8003256:	4641      	mov	r1, r8
 8003258:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800325c:	4641      	mov	r1, r8
 800325e:	008a      	lsls	r2, r1, #2
 8003260:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003264:	f7fc ffd4 	bl	8000210 <__aeabi_uldivmod>
 8003268:	4602      	mov	r2, r0
 800326a:	460b      	mov	r3, r1
 800326c:	4b0d      	ldr	r3, [pc, #52]	; (80032a4 <UART_SetConfig+0x4e4>)
 800326e:	fba3 1302 	umull	r1, r3, r3, r2
 8003272:	095b      	lsrs	r3, r3, #5
 8003274:	2164      	movs	r1, #100	; 0x64
 8003276:	fb01 f303 	mul.w	r3, r1, r3
 800327a:	1ad3      	subs	r3, r2, r3
 800327c:	011b      	lsls	r3, r3, #4
 800327e:	3332      	adds	r3, #50	; 0x32
 8003280:	4a08      	ldr	r2, [pc, #32]	; (80032a4 <UART_SetConfig+0x4e4>)
 8003282:	fba2 2303 	umull	r2, r3, r2, r3
 8003286:	095b      	lsrs	r3, r3, #5
 8003288:	f003 020f 	and.w	r2, r3, #15
 800328c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	4422      	add	r2, r4
 8003294:	609a      	str	r2, [r3, #8]
}
 8003296:	bf00      	nop
 8003298:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800329c:	46bd      	mov	sp, r7
 800329e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80032a2:	bf00      	nop
 80032a4:	51eb851f 	.word	0x51eb851f

080032a8 <__NVIC_SetPriority>:
{
 80032a8:	b480      	push	{r7}
 80032aa:	b083      	sub	sp, #12
 80032ac:	af00      	add	r7, sp, #0
 80032ae:	4603      	mov	r3, r0
 80032b0:	6039      	str	r1, [r7, #0]
 80032b2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80032b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	db0a      	blt.n	80032d2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80032bc:	683b      	ldr	r3, [r7, #0]
 80032be:	b2da      	uxtb	r2, r3
 80032c0:	490c      	ldr	r1, [pc, #48]	; (80032f4 <__NVIC_SetPriority+0x4c>)
 80032c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032c6:	0112      	lsls	r2, r2, #4
 80032c8:	b2d2      	uxtb	r2, r2
 80032ca:	440b      	add	r3, r1
 80032cc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80032d0:	e00a      	b.n	80032e8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80032d2:	683b      	ldr	r3, [r7, #0]
 80032d4:	b2da      	uxtb	r2, r3
 80032d6:	4908      	ldr	r1, [pc, #32]	; (80032f8 <__NVIC_SetPriority+0x50>)
 80032d8:	79fb      	ldrb	r3, [r7, #7]
 80032da:	f003 030f 	and.w	r3, r3, #15
 80032de:	3b04      	subs	r3, #4
 80032e0:	0112      	lsls	r2, r2, #4
 80032e2:	b2d2      	uxtb	r2, r2
 80032e4:	440b      	add	r3, r1
 80032e6:	761a      	strb	r2, [r3, #24]
}
 80032e8:	bf00      	nop
 80032ea:	370c      	adds	r7, #12
 80032ec:	46bd      	mov	sp, r7
 80032ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f2:	4770      	bx	lr
 80032f4:	e000e100 	.word	0xe000e100
 80032f8:	e000ed00 	.word	0xe000ed00

080032fc <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80032fc:	b580      	push	{r7, lr}
 80032fe:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8003300:	2100      	movs	r1, #0
 8003302:	f06f 0004 	mvn.w	r0, #4
 8003306:	f7ff ffcf 	bl	80032a8 <__NVIC_SetPriority>
#endif
}
 800330a:	bf00      	nop
 800330c:	bd80      	pop	{r7, pc}
	...

08003310 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8003310:	b480      	push	{r7}
 8003312:	b083      	sub	sp, #12
 8003314:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003316:	f3ef 8305 	mrs	r3, IPSR
 800331a:	603b      	str	r3, [r7, #0]
  return(result);
 800331c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800331e:	2b00      	cmp	r3, #0
 8003320:	d003      	beq.n	800332a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8003322:	f06f 0305 	mvn.w	r3, #5
 8003326:	607b      	str	r3, [r7, #4]
 8003328:	e00c      	b.n	8003344 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800332a:	4b0a      	ldr	r3, [pc, #40]	; (8003354 <osKernelInitialize+0x44>)
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	2b00      	cmp	r3, #0
 8003330:	d105      	bne.n	800333e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8003332:	4b08      	ldr	r3, [pc, #32]	; (8003354 <osKernelInitialize+0x44>)
 8003334:	2201      	movs	r2, #1
 8003336:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8003338:	2300      	movs	r3, #0
 800333a:	607b      	str	r3, [r7, #4]
 800333c:	e002      	b.n	8003344 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800333e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003342:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8003344:	687b      	ldr	r3, [r7, #4]
}
 8003346:	4618      	mov	r0, r3
 8003348:	370c      	adds	r7, #12
 800334a:	46bd      	mov	sp, r7
 800334c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003350:	4770      	bx	lr
 8003352:	bf00      	nop
 8003354:	2000317c 	.word	0x2000317c

08003358 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8003358:	b580      	push	{r7, lr}
 800335a:	b082      	sub	sp, #8
 800335c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800335e:	f3ef 8305 	mrs	r3, IPSR
 8003362:	603b      	str	r3, [r7, #0]
  return(result);
 8003364:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003366:	2b00      	cmp	r3, #0
 8003368:	d003      	beq.n	8003372 <osKernelStart+0x1a>
    stat = osErrorISR;
 800336a:	f06f 0305 	mvn.w	r3, #5
 800336e:	607b      	str	r3, [r7, #4]
 8003370:	e010      	b.n	8003394 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8003372:	4b0b      	ldr	r3, [pc, #44]	; (80033a0 <osKernelStart+0x48>)
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	2b01      	cmp	r3, #1
 8003378:	d109      	bne.n	800338e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800337a:	f7ff ffbf 	bl	80032fc <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800337e:	4b08      	ldr	r3, [pc, #32]	; (80033a0 <osKernelStart+0x48>)
 8003380:	2202      	movs	r2, #2
 8003382:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8003384:	f001 f87c 	bl	8004480 <vTaskStartScheduler>
      stat = osOK;
 8003388:	2300      	movs	r3, #0
 800338a:	607b      	str	r3, [r7, #4]
 800338c:	e002      	b.n	8003394 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800338e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003392:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8003394:	687b      	ldr	r3, [r7, #4]
}
 8003396:	4618      	mov	r0, r3
 8003398:	3708      	adds	r7, #8
 800339a:	46bd      	mov	sp, r7
 800339c:	bd80      	pop	{r7, pc}
 800339e:	bf00      	nop
 80033a0:	2000317c 	.word	0x2000317c

080033a4 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80033a4:	b580      	push	{r7, lr}
 80033a6:	b08e      	sub	sp, #56	; 0x38
 80033a8:	af04      	add	r7, sp, #16
 80033aa:	60f8      	str	r0, [r7, #12]
 80033ac:	60b9      	str	r1, [r7, #8]
 80033ae:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80033b0:	2300      	movs	r3, #0
 80033b2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80033b4:	f3ef 8305 	mrs	r3, IPSR
 80033b8:	617b      	str	r3, [r7, #20]
  return(result);
 80033ba:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d17e      	bne.n	80034be <osThreadNew+0x11a>
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d07b      	beq.n	80034be <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80033c6:	2380      	movs	r3, #128	; 0x80
 80033c8:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80033ca:	2318      	movs	r3, #24
 80033cc:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80033ce:	2300      	movs	r3, #0
 80033d0:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 80033d2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80033d6:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d045      	beq.n	800346a <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d002      	beq.n	80033ec <osThreadNew+0x48>
        name = attr->name;
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	699b      	ldr	r3, [r3, #24]
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d002      	beq.n	80033fa <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	699b      	ldr	r3, [r3, #24]
 80033f8:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80033fa:	69fb      	ldr	r3, [r7, #28]
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d008      	beq.n	8003412 <osThreadNew+0x6e>
 8003400:	69fb      	ldr	r3, [r7, #28]
 8003402:	2b38      	cmp	r3, #56	; 0x38
 8003404:	d805      	bhi.n	8003412 <osThreadNew+0x6e>
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	685b      	ldr	r3, [r3, #4]
 800340a:	f003 0301 	and.w	r3, r3, #1
 800340e:	2b00      	cmp	r3, #0
 8003410:	d001      	beq.n	8003416 <osThreadNew+0x72>
        return (NULL);
 8003412:	2300      	movs	r3, #0
 8003414:	e054      	b.n	80034c0 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	695b      	ldr	r3, [r3, #20]
 800341a:	2b00      	cmp	r3, #0
 800341c:	d003      	beq.n	8003426 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	695b      	ldr	r3, [r3, #20]
 8003422:	089b      	lsrs	r3, r3, #2
 8003424:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	689b      	ldr	r3, [r3, #8]
 800342a:	2b00      	cmp	r3, #0
 800342c:	d00e      	beq.n	800344c <osThreadNew+0xa8>
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	68db      	ldr	r3, [r3, #12]
 8003432:	2bbb      	cmp	r3, #187	; 0xbb
 8003434:	d90a      	bls.n	800344c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800343a:	2b00      	cmp	r3, #0
 800343c:	d006      	beq.n	800344c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	695b      	ldr	r3, [r3, #20]
 8003442:	2b00      	cmp	r3, #0
 8003444:	d002      	beq.n	800344c <osThreadNew+0xa8>
        mem = 1;
 8003446:	2301      	movs	r3, #1
 8003448:	61bb      	str	r3, [r7, #24]
 800344a:	e010      	b.n	800346e <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	689b      	ldr	r3, [r3, #8]
 8003450:	2b00      	cmp	r3, #0
 8003452:	d10c      	bne.n	800346e <osThreadNew+0xca>
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	68db      	ldr	r3, [r3, #12]
 8003458:	2b00      	cmp	r3, #0
 800345a:	d108      	bne.n	800346e <osThreadNew+0xca>
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	691b      	ldr	r3, [r3, #16]
 8003460:	2b00      	cmp	r3, #0
 8003462:	d104      	bne.n	800346e <osThreadNew+0xca>
          mem = 0;
 8003464:	2300      	movs	r3, #0
 8003466:	61bb      	str	r3, [r7, #24]
 8003468:	e001      	b.n	800346e <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800346a:	2300      	movs	r3, #0
 800346c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800346e:	69bb      	ldr	r3, [r7, #24]
 8003470:	2b01      	cmp	r3, #1
 8003472:	d110      	bne.n	8003496 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8003478:	687a      	ldr	r2, [r7, #4]
 800347a:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800347c:	9202      	str	r2, [sp, #8]
 800347e:	9301      	str	r3, [sp, #4]
 8003480:	69fb      	ldr	r3, [r7, #28]
 8003482:	9300      	str	r3, [sp, #0]
 8003484:	68bb      	ldr	r3, [r7, #8]
 8003486:	6a3a      	ldr	r2, [r7, #32]
 8003488:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800348a:	68f8      	ldr	r0, [r7, #12]
 800348c:	f000 fe0c 	bl	80040a8 <xTaskCreateStatic>
 8003490:	4603      	mov	r3, r0
 8003492:	613b      	str	r3, [r7, #16]
 8003494:	e013      	b.n	80034be <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8003496:	69bb      	ldr	r3, [r7, #24]
 8003498:	2b00      	cmp	r3, #0
 800349a:	d110      	bne.n	80034be <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800349c:	6a3b      	ldr	r3, [r7, #32]
 800349e:	b29a      	uxth	r2, r3
 80034a0:	f107 0310 	add.w	r3, r7, #16
 80034a4:	9301      	str	r3, [sp, #4]
 80034a6:	69fb      	ldr	r3, [r7, #28]
 80034a8:	9300      	str	r3, [sp, #0]
 80034aa:	68bb      	ldr	r3, [r7, #8]
 80034ac:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80034ae:	68f8      	ldr	r0, [r7, #12]
 80034b0:	f000 fe57 	bl	8004162 <xTaskCreate>
 80034b4:	4603      	mov	r3, r0
 80034b6:	2b01      	cmp	r3, #1
 80034b8:	d001      	beq.n	80034be <osThreadNew+0x11a>
            hTask = NULL;
 80034ba:	2300      	movs	r3, #0
 80034bc:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80034be:	693b      	ldr	r3, [r7, #16]
}
 80034c0:	4618      	mov	r0, r3
 80034c2:	3728      	adds	r7, #40	; 0x28
 80034c4:	46bd      	mov	sp, r7
 80034c6:	bd80      	pop	{r7, pc}

080034c8 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80034c8:	b580      	push	{r7, lr}
 80034ca:	b084      	sub	sp, #16
 80034cc:	af00      	add	r7, sp, #0
 80034ce:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80034d0:	f3ef 8305 	mrs	r3, IPSR
 80034d4:	60bb      	str	r3, [r7, #8]
  return(result);
 80034d6:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d003      	beq.n	80034e4 <osDelay+0x1c>
    stat = osErrorISR;
 80034dc:	f06f 0305 	mvn.w	r3, #5
 80034e0:	60fb      	str	r3, [r7, #12]
 80034e2:	e007      	b.n	80034f4 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80034e4:	2300      	movs	r3, #0
 80034e6:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d002      	beq.n	80034f4 <osDelay+0x2c>
      vTaskDelay(ticks);
 80034ee:	6878      	ldr	r0, [r7, #4]
 80034f0:	f000 ff92 	bl	8004418 <vTaskDelay>
    }
  }

  return (stat);
 80034f4:	68fb      	ldr	r3, [r7, #12]
}
 80034f6:	4618      	mov	r0, r3
 80034f8:	3710      	adds	r7, #16
 80034fa:	46bd      	mov	sp, r7
 80034fc:	bd80      	pop	{r7, pc}
	...

08003500 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8003500:	b480      	push	{r7}
 8003502:	b085      	sub	sp, #20
 8003504:	af00      	add	r7, sp, #0
 8003506:	60f8      	str	r0, [r7, #12]
 8003508:	60b9      	str	r1, [r7, #8]
 800350a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	4a07      	ldr	r2, [pc, #28]	; (800352c <vApplicationGetIdleTaskMemory+0x2c>)
 8003510:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8003512:	68bb      	ldr	r3, [r7, #8]
 8003514:	4a06      	ldr	r2, [pc, #24]	; (8003530 <vApplicationGetIdleTaskMemory+0x30>)
 8003516:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	2280      	movs	r2, #128	; 0x80
 800351c:	601a      	str	r2, [r3, #0]
}
 800351e:	bf00      	nop
 8003520:	3714      	adds	r7, #20
 8003522:	46bd      	mov	sp, r7
 8003524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003528:	4770      	bx	lr
 800352a:	bf00      	nop
 800352c:	20003180 	.word	0x20003180
 8003530:	2000323c 	.word	0x2000323c

08003534 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8003534:	b480      	push	{r7}
 8003536:	b085      	sub	sp, #20
 8003538:	af00      	add	r7, sp, #0
 800353a:	60f8      	str	r0, [r7, #12]
 800353c:	60b9      	str	r1, [r7, #8]
 800353e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	4a07      	ldr	r2, [pc, #28]	; (8003560 <vApplicationGetTimerTaskMemory+0x2c>)
 8003544:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8003546:	68bb      	ldr	r3, [r7, #8]
 8003548:	4a06      	ldr	r2, [pc, #24]	; (8003564 <vApplicationGetTimerTaskMemory+0x30>)
 800354a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003552:	601a      	str	r2, [r3, #0]
}
 8003554:	bf00      	nop
 8003556:	3714      	adds	r7, #20
 8003558:	46bd      	mov	sp, r7
 800355a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800355e:	4770      	bx	lr
 8003560:	2000343c 	.word	0x2000343c
 8003564:	200034f8 	.word	0x200034f8

08003568 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003568:	b480      	push	{r7}
 800356a:	b083      	sub	sp, #12
 800356c:	af00      	add	r7, sp, #0
 800356e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	f103 0208 	add.w	r2, r3, #8
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003580:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	f103 0208 	add.w	r2, r3, #8
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	f103 0208 	add.w	r2, r3, #8
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	2200      	movs	r2, #0
 800359a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800359c:	bf00      	nop
 800359e:	370c      	adds	r7, #12
 80035a0:	46bd      	mov	sp, r7
 80035a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a6:	4770      	bx	lr

080035a8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80035a8:	b480      	push	{r7}
 80035aa:	b083      	sub	sp, #12
 80035ac:	af00      	add	r7, sp, #0
 80035ae:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	2200      	movs	r2, #0
 80035b4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80035b6:	bf00      	nop
 80035b8:	370c      	adds	r7, #12
 80035ba:	46bd      	mov	sp, r7
 80035bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c0:	4770      	bx	lr

080035c2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80035c2:	b480      	push	{r7}
 80035c4:	b085      	sub	sp, #20
 80035c6:	af00      	add	r7, sp, #0
 80035c8:	6078      	str	r0, [r7, #4]
 80035ca:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	685b      	ldr	r3, [r3, #4]
 80035d0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80035d2:	683b      	ldr	r3, [r7, #0]
 80035d4:	68fa      	ldr	r2, [r7, #12]
 80035d6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	689a      	ldr	r2, [r3, #8]
 80035dc:	683b      	ldr	r3, [r7, #0]
 80035de:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	689b      	ldr	r3, [r3, #8]
 80035e4:	683a      	ldr	r2, [r7, #0]
 80035e6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	683a      	ldr	r2, [r7, #0]
 80035ec:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80035ee:	683b      	ldr	r3, [r7, #0]
 80035f0:	687a      	ldr	r2, [r7, #4]
 80035f2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	1c5a      	adds	r2, r3, #1
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	601a      	str	r2, [r3, #0]
}
 80035fe:	bf00      	nop
 8003600:	3714      	adds	r7, #20
 8003602:	46bd      	mov	sp, r7
 8003604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003608:	4770      	bx	lr

0800360a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800360a:	b480      	push	{r7}
 800360c:	b085      	sub	sp, #20
 800360e:	af00      	add	r7, sp, #0
 8003610:	6078      	str	r0, [r7, #4]
 8003612:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003614:	683b      	ldr	r3, [r7, #0]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800361a:	68bb      	ldr	r3, [r7, #8]
 800361c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003620:	d103      	bne.n	800362a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	691b      	ldr	r3, [r3, #16]
 8003626:	60fb      	str	r3, [r7, #12]
 8003628:	e00c      	b.n	8003644 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	3308      	adds	r3, #8
 800362e:	60fb      	str	r3, [r7, #12]
 8003630:	e002      	b.n	8003638 <vListInsert+0x2e>
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	685b      	ldr	r3, [r3, #4]
 8003636:	60fb      	str	r3, [r7, #12]
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	685b      	ldr	r3, [r3, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	68ba      	ldr	r2, [r7, #8]
 8003640:	429a      	cmp	r2, r3
 8003642:	d2f6      	bcs.n	8003632 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	685a      	ldr	r2, [r3, #4]
 8003648:	683b      	ldr	r3, [r7, #0]
 800364a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800364c:	683b      	ldr	r3, [r7, #0]
 800364e:	685b      	ldr	r3, [r3, #4]
 8003650:	683a      	ldr	r2, [r7, #0]
 8003652:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003654:	683b      	ldr	r3, [r7, #0]
 8003656:	68fa      	ldr	r2, [r7, #12]
 8003658:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	683a      	ldr	r2, [r7, #0]
 800365e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8003660:	683b      	ldr	r3, [r7, #0]
 8003662:	687a      	ldr	r2, [r7, #4]
 8003664:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	1c5a      	adds	r2, r3, #1
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	601a      	str	r2, [r3, #0]
}
 8003670:	bf00      	nop
 8003672:	3714      	adds	r7, #20
 8003674:	46bd      	mov	sp, r7
 8003676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800367a:	4770      	bx	lr

0800367c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800367c:	b480      	push	{r7}
 800367e:	b085      	sub	sp, #20
 8003680:	af00      	add	r7, sp, #0
 8003682:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	691b      	ldr	r3, [r3, #16]
 8003688:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	685b      	ldr	r3, [r3, #4]
 800368e:	687a      	ldr	r2, [r7, #4]
 8003690:	6892      	ldr	r2, [r2, #8]
 8003692:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	689b      	ldr	r3, [r3, #8]
 8003698:	687a      	ldr	r2, [r7, #4]
 800369a:	6852      	ldr	r2, [r2, #4]
 800369c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	685b      	ldr	r3, [r3, #4]
 80036a2:	687a      	ldr	r2, [r7, #4]
 80036a4:	429a      	cmp	r2, r3
 80036a6:	d103      	bne.n	80036b0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	689a      	ldr	r2, [r3, #8]
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	2200      	movs	r2, #0
 80036b4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	1e5a      	subs	r2, r3, #1
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	681b      	ldr	r3, [r3, #0]
}
 80036c4:	4618      	mov	r0, r3
 80036c6:	3714      	adds	r7, #20
 80036c8:	46bd      	mov	sp, r7
 80036ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ce:	4770      	bx	lr

080036d0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80036d0:	b580      	push	{r7, lr}
 80036d2:	b084      	sub	sp, #16
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	6078      	str	r0, [r7, #4]
 80036d8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d10a      	bne.n	80036fa <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80036e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036e8:	f383 8811 	msr	BASEPRI, r3
 80036ec:	f3bf 8f6f 	isb	sy
 80036f0:	f3bf 8f4f 	dsb	sy
 80036f4:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80036f6:	bf00      	nop
 80036f8:	e7fe      	b.n	80036f8 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80036fa:	f002 f87b 	bl	80057f4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	681a      	ldr	r2, [r3, #0]
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003706:	68f9      	ldr	r1, [r7, #12]
 8003708:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800370a:	fb01 f303 	mul.w	r3, r1, r3
 800370e:	441a      	add	r2, r3
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	2200      	movs	r2, #0
 8003718:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	681a      	ldr	r2, [r3, #0]
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	681a      	ldr	r2, [r3, #0]
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800372a:	3b01      	subs	r3, #1
 800372c:	68f9      	ldr	r1, [r7, #12]
 800372e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003730:	fb01 f303 	mul.w	r3, r1, r3
 8003734:	441a      	add	r2, r3
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	22ff      	movs	r2, #255	; 0xff
 800373e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	22ff      	movs	r2, #255	; 0xff
 8003746:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800374a:	683b      	ldr	r3, [r7, #0]
 800374c:	2b00      	cmp	r3, #0
 800374e:	d114      	bne.n	800377a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	691b      	ldr	r3, [r3, #16]
 8003754:	2b00      	cmp	r3, #0
 8003756:	d01a      	beq.n	800378e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	3310      	adds	r3, #16
 800375c:	4618      	mov	r0, r3
 800375e:	f001 f929 	bl	80049b4 <xTaskRemoveFromEventList>
 8003762:	4603      	mov	r3, r0
 8003764:	2b00      	cmp	r3, #0
 8003766:	d012      	beq.n	800378e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8003768:	4b0c      	ldr	r3, [pc, #48]	; (800379c <xQueueGenericReset+0xcc>)
 800376a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800376e:	601a      	str	r2, [r3, #0]
 8003770:	f3bf 8f4f 	dsb	sy
 8003774:	f3bf 8f6f 	isb	sy
 8003778:	e009      	b.n	800378e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	3310      	adds	r3, #16
 800377e:	4618      	mov	r0, r3
 8003780:	f7ff fef2 	bl	8003568 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	3324      	adds	r3, #36	; 0x24
 8003788:	4618      	mov	r0, r3
 800378a:	f7ff feed 	bl	8003568 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800378e:	f002 f861 	bl	8005854 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8003792:	2301      	movs	r3, #1
}
 8003794:	4618      	mov	r0, r3
 8003796:	3710      	adds	r7, #16
 8003798:	46bd      	mov	sp, r7
 800379a:	bd80      	pop	{r7, pc}
 800379c:	e000ed04 	.word	0xe000ed04

080037a0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80037a0:	b580      	push	{r7, lr}
 80037a2:	b08e      	sub	sp, #56	; 0x38
 80037a4:	af02      	add	r7, sp, #8
 80037a6:	60f8      	str	r0, [r7, #12]
 80037a8:	60b9      	str	r1, [r7, #8]
 80037aa:	607a      	str	r2, [r7, #4]
 80037ac:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d10a      	bne.n	80037ca <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80037b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037b8:	f383 8811 	msr	BASEPRI, r3
 80037bc:	f3bf 8f6f 	isb	sy
 80037c0:	f3bf 8f4f 	dsb	sy
 80037c4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80037c6:	bf00      	nop
 80037c8:	e7fe      	b.n	80037c8 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80037ca:	683b      	ldr	r3, [r7, #0]
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d10a      	bne.n	80037e6 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80037d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037d4:	f383 8811 	msr	BASEPRI, r3
 80037d8:	f3bf 8f6f 	isb	sy
 80037dc:	f3bf 8f4f 	dsb	sy
 80037e0:	627b      	str	r3, [r7, #36]	; 0x24
}
 80037e2:	bf00      	nop
 80037e4:	e7fe      	b.n	80037e4 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d002      	beq.n	80037f2 <xQueueGenericCreateStatic+0x52>
 80037ec:	68bb      	ldr	r3, [r7, #8]
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d001      	beq.n	80037f6 <xQueueGenericCreateStatic+0x56>
 80037f2:	2301      	movs	r3, #1
 80037f4:	e000      	b.n	80037f8 <xQueueGenericCreateStatic+0x58>
 80037f6:	2300      	movs	r3, #0
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d10a      	bne.n	8003812 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80037fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003800:	f383 8811 	msr	BASEPRI, r3
 8003804:	f3bf 8f6f 	isb	sy
 8003808:	f3bf 8f4f 	dsb	sy
 800380c:	623b      	str	r3, [r7, #32]
}
 800380e:	bf00      	nop
 8003810:	e7fe      	b.n	8003810 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	2b00      	cmp	r3, #0
 8003816:	d102      	bne.n	800381e <xQueueGenericCreateStatic+0x7e>
 8003818:	68bb      	ldr	r3, [r7, #8]
 800381a:	2b00      	cmp	r3, #0
 800381c:	d101      	bne.n	8003822 <xQueueGenericCreateStatic+0x82>
 800381e:	2301      	movs	r3, #1
 8003820:	e000      	b.n	8003824 <xQueueGenericCreateStatic+0x84>
 8003822:	2300      	movs	r3, #0
 8003824:	2b00      	cmp	r3, #0
 8003826:	d10a      	bne.n	800383e <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8003828:	f04f 0350 	mov.w	r3, #80	; 0x50
 800382c:	f383 8811 	msr	BASEPRI, r3
 8003830:	f3bf 8f6f 	isb	sy
 8003834:	f3bf 8f4f 	dsb	sy
 8003838:	61fb      	str	r3, [r7, #28]
}
 800383a:	bf00      	nop
 800383c:	e7fe      	b.n	800383c <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800383e:	2350      	movs	r3, #80	; 0x50
 8003840:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8003842:	697b      	ldr	r3, [r7, #20]
 8003844:	2b50      	cmp	r3, #80	; 0x50
 8003846:	d00a      	beq.n	800385e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8003848:	f04f 0350 	mov.w	r3, #80	; 0x50
 800384c:	f383 8811 	msr	BASEPRI, r3
 8003850:	f3bf 8f6f 	isb	sy
 8003854:	f3bf 8f4f 	dsb	sy
 8003858:	61bb      	str	r3, [r7, #24]
}
 800385a:	bf00      	nop
 800385c:	e7fe      	b.n	800385c <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800385e:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003860:	683b      	ldr	r3, [r7, #0]
 8003862:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8003864:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003866:	2b00      	cmp	r3, #0
 8003868:	d00d      	beq.n	8003886 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800386a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800386c:	2201      	movs	r2, #1
 800386e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003872:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8003876:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003878:	9300      	str	r3, [sp, #0]
 800387a:	4613      	mov	r3, r2
 800387c:	687a      	ldr	r2, [r7, #4]
 800387e:	68b9      	ldr	r1, [r7, #8]
 8003880:	68f8      	ldr	r0, [r7, #12]
 8003882:	f000 f805 	bl	8003890 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8003886:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8003888:	4618      	mov	r0, r3
 800388a:	3730      	adds	r7, #48	; 0x30
 800388c:	46bd      	mov	sp, r7
 800388e:	bd80      	pop	{r7, pc}

08003890 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8003890:	b580      	push	{r7, lr}
 8003892:	b084      	sub	sp, #16
 8003894:	af00      	add	r7, sp, #0
 8003896:	60f8      	str	r0, [r7, #12]
 8003898:	60b9      	str	r1, [r7, #8]
 800389a:	607a      	str	r2, [r7, #4]
 800389c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800389e:	68bb      	ldr	r3, [r7, #8]
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d103      	bne.n	80038ac <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80038a4:	69bb      	ldr	r3, [r7, #24]
 80038a6:	69ba      	ldr	r2, [r7, #24]
 80038a8:	601a      	str	r2, [r3, #0]
 80038aa:	e002      	b.n	80038b2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80038ac:	69bb      	ldr	r3, [r7, #24]
 80038ae:	687a      	ldr	r2, [r7, #4]
 80038b0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80038b2:	69bb      	ldr	r3, [r7, #24]
 80038b4:	68fa      	ldr	r2, [r7, #12]
 80038b6:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80038b8:	69bb      	ldr	r3, [r7, #24]
 80038ba:	68ba      	ldr	r2, [r7, #8]
 80038bc:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80038be:	2101      	movs	r1, #1
 80038c0:	69b8      	ldr	r0, [r7, #24]
 80038c2:	f7ff ff05 	bl	80036d0 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80038c6:	69bb      	ldr	r3, [r7, #24]
 80038c8:	78fa      	ldrb	r2, [r7, #3]
 80038ca:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80038ce:	bf00      	nop
 80038d0:	3710      	adds	r7, #16
 80038d2:	46bd      	mov	sp, r7
 80038d4:	bd80      	pop	{r7, pc}
	...

080038d8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80038d8:	b580      	push	{r7, lr}
 80038da:	b08e      	sub	sp, #56	; 0x38
 80038dc:	af00      	add	r7, sp, #0
 80038de:	60f8      	str	r0, [r7, #12]
 80038e0:	60b9      	str	r1, [r7, #8]
 80038e2:	607a      	str	r2, [r7, #4]
 80038e4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80038e6:	2300      	movs	r3, #0
 80038e8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80038ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d10a      	bne.n	800390a <xQueueGenericSend+0x32>
	__asm volatile
 80038f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038f8:	f383 8811 	msr	BASEPRI, r3
 80038fc:	f3bf 8f6f 	isb	sy
 8003900:	f3bf 8f4f 	dsb	sy
 8003904:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8003906:	bf00      	nop
 8003908:	e7fe      	b.n	8003908 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800390a:	68bb      	ldr	r3, [r7, #8]
 800390c:	2b00      	cmp	r3, #0
 800390e:	d103      	bne.n	8003918 <xQueueGenericSend+0x40>
 8003910:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003912:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003914:	2b00      	cmp	r3, #0
 8003916:	d101      	bne.n	800391c <xQueueGenericSend+0x44>
 8003918:	2301      	movs	r3, #1
 800391a:	e000      	b.n	800391e <xQueueGenericSend+0x46>
 800391c:	2300      	movs	r3, #0
 800391e:	2b00      	cmp	r3, #0
 8003920:	d10a      	bne.n	8003938 <xQueueGenericSend+0x60>
	__asm volatile
 8003922:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003926:	f383 8811 	msr	BASEPRI, r3
 800392a:	f3bf 8f6f 	isb	sy
 800392e:	f3bf 8f4f 	dsb	sy
 8003932:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003934:	bf00      	nop
 8003936:	e7fe      	b.n	8003936 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003938:	683b      	ldr	r3, [r7, #0]
 800393a:	2b02      	cmp	r3, #2
 800393c:	d103      	bne.n	8003946 <xQueueGenericSend+0x6e>
 800393e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003940:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003942:	2b01      	cmp	r3, #1
 8003944:	d101      	bne.n	800394a <xQueueGenericSend+0x72>
 8003946:	2301      	movs	r3, #1
 8003948:	e000      	b.n	800394c <xQueueGenericSend+0x74>
 800394a:	2300      	movs	r3, #0
 800394c:	2b00      	cmp	r3, #0
 800394e:	d10a      	bne.n	8003966 <xQueueGenericSend+0x8e>
	__asm volatile
 8003950:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003954:	f383 8811 	msr	BASEPRI, r3
 8003958:	f3bf 8f6f 	isb	sy
 800395c:	f3bf 8f4f 	dsb	sy
 8003960:	623b      	str	r3, [r7, #32]
}
 8003962:	bf00      	nop
 8003964:	e7fe      	b.n	8003964 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003966:	f001 f9e7 	bl	8004d38 <xTaskGetSchedulerState>
 800396a:	4603      	mov	r3, r0
 800396c:	2b00      	cmp	r3, #0
 800396e:	d102      	bne.n	8003976 <xQueueGenericSend+0x9e>
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	2b00      	cmp	r3, #0
 8003974:	d101      	bne.n	800397a <xQueueGenericSend+0xa2>
 8003976:	2301      	movs	r3, #1
 8003978:	e000      	b.n	800397c <xQueueGenericSend+0xa4>
 800397a:	2300      	movs	r3, #0
 800397c:	2b00      	cmp	r3, #0
 800397e:	d10a      	bne.n	8003996 <xQueueGenericSend+0xbe>
	__asm volatile
 8003980:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003984:	f383 8811 	msr	BASEPRI, r3
 8003988:	f3bf 8f6f 	isb	sy
 800398c:	f3bf 8f4f 	dsb	sy
 8003990:	61fb      	str	r3, [r7, #28]
}
 8003992:	bf00      	nop
 8003994:	e7fe      	b.n	8003994 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003996:	f001 ff2d 	bl	80057f4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800399a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800399c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800399e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039a2:	429a      	cmp	r2, r3
 80039a4:	d302      	bcc.n	80039ac <xQueueGenericSend+0xd4>
 80039a6:	683b      	ldr	r3, [r7, #0]
 80039a8:	2b02      	cmp	r3, #2
 80039aa:	d129      	bne.n	8003a00 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80039ac:	683a      	ldr	r2, [r7, #0]
 80039ae:	68b9      	ldr	r1, [r7, #8]
 80039b0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80039b2:	f000 fa0b 	bl	8003dcc <prvCopyDataToQueue>
 80039b6:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80039b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d010      	beq.n	80039e2 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80039c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039c2:	3324      	adds	r3, #36	; 0x24
 80039c4:	4618      	mov	r0, r3
 80039c6:	f000 fff5 	bl	80049b4 <xTaskRemoveFromEventList>
 80039ca:	4603      	mov	r3, r0
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d013      	beq.n	80039f8 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80039d0:	4b3f      	ldr	r3, [pc, #252]	; (8003ad0 <xQueueGenericSend+0x1f8>)
 80039d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80039d6:	601a      	str	r2, [r3, #0]
 80039d8:	f3bf 8f4f 	dsb	sy
 80039dc:	f3bf 8f6f 	isb	sy
 80039e0:	e00a      	b.n	80039f8 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80039e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d007      	beq.n	80039f8 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80039e8:	4b39      	ldr	r3, [pc, #228]	; (8003ad0 <xQueueGenericSend+0x1f8>)
 80039ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80039ee:	601a      	str	r2, [r3, #0]
 80039f0:	f3bf 8f4f 	dsb	sy
 80039f4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80039f8:	f001 ff2c 	bl	8005854 <vPortExitCritical>
				return pdPASS;
 80039fc:	2301      	movs	r3, #1
 80039fe:	e063      	b.n	8003ac8 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d103      	bne.n	8003a0e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003a06:	f001 ff25 	bl	8005854 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8003a0a:	2300      	movs	r3, #0
 8003a0c:	e05c      	b.n	8003ac8 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003a0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d106      	bne.n	8003a22 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003a14:	f107 0314 	add.w	r3, r7, #20
 8003a18:	4618      	mov	r0, r3
 8003a1a:	f001 f82f 	bl	8004a7c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003a1e:	2301      	movs	r3, #1
 8003a20:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003a22:	f001 ff17 	bl	8005854 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003a26:	f000 fd9b 	bl	8004560 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003a2a:	f001 fee3 	bl	80057f4 <vPortEnterCritical>
 8003a2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a30:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003a34:	b25b      	sxtb	r3, r3
 8003a36:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003a3a:	d103      	bne.n	8003a44 <xQueueGenericSend+0x16c>
 8003a3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a3e:	2200      	movs	r2, #0
 8003a40:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003a44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a46:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003a4a:	b25b      	sxtb	r3, r3
 8003a4c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003a50:	d103      	bne.n	8003a5a <xQueueGenericSend+0x182>
 8003a52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a54:	2200      	movs	r2, #0
 8003a56:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003a5a:	f001 fefb 	bl	8005854 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003a5e:	1d3a      	adds	r2, r7, #4
 8003a60:	f107 0314 	add.w	r3, r7, #20
 8003a64:	4611      	mov	r1, r2
 8003a66:	4618      	mov	r0, r3
 8003a68:	f001 f81e 	bl	8004aa8 <xTaskCheckForTimeOut>
 8003a6c:	4603      	mov	r3, r0
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d124      	bne.n	8003abc <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8003a72:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003a74:	f000 faa2 	bl	8003fbc <prvIsQueueFull>
 8003a78:	4603      	mov	r3, r0
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d018      	beq.n	8003ab0 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003a7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a80:	3310      	adds	r3, #16
 8003a82:	687a      	ldr	r2, [r7, #4]
 8003a84:	4611      	mov	r1, r2
 8003a86:	4618      	mov	r0, r3
 8003a88:	f000 ff44 	bl	8004914 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003a8c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003a8e:	f000 fa2d 	bl	8003eec <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8003a92:	f000 fd73 	bl	800457c <xTaskResumeAll>
 8003a96:	4603      	mov	r3, r0
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	f47f af7c 	bne.w	8003996 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8003a9e:	4b0c      	ldr	r3, [pc, #48]	; (8003ad0 <xQueueGenericSend+0x1f8>)
 8003aa0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003aa4:	601a      	str	r2, [r3, #0]
 8003aa6:	f3bf 8f4f 	dsb	sy
 8003aaa:	f3bf 8f6f 	isb	sy
 8003aae:	e772      	b.n	8003996 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003ab0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003ab2:	f000 fa1b 	bl	8003eec <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003ab6:	f000 fd61 	bl	800457c <xTaskResumeAll>
 8003aba:	e76c      	b.n	8003996 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003abc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003abe:	f000 fa15 	bl	8003eec <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003ac2:	f000 fd5b 	bl	800457c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8003ac6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8003ac8:	4618      	mov	r0, r3
 8003aca:	3738      	adds	r7, #56	; 0x38
 8003acc:	46bd      	mov	sp, r7
 8003ace:	bd80      	pop	{r7, pc}
 8003ad0:	e000ed04 	.word	0xe000ed04

08003ad4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8003ad4:	b580      	push	{r7, lr}
 8003ad6:	b090      	sub	sp, #64	; 0x40
 8003ad8:	af00      	add	r7, sp, #0
 8003ada:	60f8      	str	r0, [r7, #12]
 8003adc:	60b9      	str	r1, [r7, #8]
 8003ade:	607a      	str	r2, [r7, #4]
 8003ae0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8003ae6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d10a      	bne.n	8003b02 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8003aec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003af0:	f383 8811 	msr	BASEPRI, r3
 8003af4:	f3bf 8f6f 	isb	sy
 8003af8:	f3bf 8f4f 	dsb	sy
 8003afc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8003afe:	bf00      	nop
 8003b00:	e7fe      	b.n	8003b00 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003b02:	68bb      	ldr	r3, [r7, #8]
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d103      	bne.n	8003b10 <xQueueGenericSendFromISR+0x3c>
 8003b08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d101      	bne.n	8003b14 <xQueueGenericSendFromISR+0x40>
 8003b10:	2301      	movs	r3, #1
 8003b12:	e000      	b.n	8003b16 <xQueueGenericSendFromISR+0x42>
 8003b14:	2300      	movs	r3, #0
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d10a      	bne.n	8003b30 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8003b1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b1e:	f383 8811 	msr	BASEPRI, r3
 8003b22:	f3bf 8f6f 	isb	sy
 8003b26:	f3bf 8f4f 	dsb	sy
 8003b2a:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003b2c:	bf00      	nop
 8003b2e:	e7fe      	b.n	8003b2e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003b30:	683b      	ldr	r3, [r7, #0]
 8003b32:	2b02      	cmp	r3, #2
 8003b34:	d103      	bne.n	8003b3e <xQueueGenericSendFromISR+0x6a>
 8003b36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b3a:	2b01      	cmp	r3, #1
 8003b3c:	d101      	bne.n	8003b42 <xQueueGenericSendFromISR+0x6e>
 8003b3e:	2301      	movs	r3, #1
 8003b40:	e000      	b.n	8003b44 <xQueueGenericSendFromISR+0x70>
 8003b42:	2300      	movs	r3, #0
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d10a      	bne.n	8003b5e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8003b48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b4c:	f383 8811 	msr	BASEPRI, r3
 8003b50:	f3bf 8f6f 	isb	sy
 8003b54:	f3bf 8f4f 	dsb	sy
 8003b58:	623b      	str	r3, [r7, #32]
}
 8003b5a:	bf00      	nop
 8003b5c:	e7fe      	b.n	8003b5c <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003b5e:	f001 ff2b 	bl	80059b8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8003b62:	f3ef 8211 	mrs	r2, BASEPRI
 8003b66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b6a:	f383 8811 	msr	BASEPRI, r3
 8003b6e:	f3bf 8f6f 	isb	sy
 8003b72:	f3bf 8f4f 	dsb	sy
 8003b76:	61fa      	str	r2, [r7, #28]
 8003b78:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8003b7a:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003b7c:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003b7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b80:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003b82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b86:	429a      	cmp	r2, r3
 8003b88:	d302      	bcc.n	8003b90 <xQueueGenericSendFromISR+0xbc>
 8003b8a:	683b      	ldr	r3, [r7, #0]
 8003b8c:	2b02      	cmp	r3, #2
 8003b8e:	d12f      	bne.n	8003bf0 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003b90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b92:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003b96:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003b9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b9e:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003ba0:	683a      	ldr	r2, [r7, #0]
 8003ba2:	68b9      	ldr	r1, [r7, #8]
 8003ba4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8003ba6:	f000 f911 	bl	8003dcc <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8003baa:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8003bae:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003bb2:	d112      	bne.n	8003bda <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003bb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003bb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d016      	beq.n	8003bea <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003bbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003bbe:	3324      	adds	r3, #36	; 0x24
 8003bc0:	4618      	mov	r0, r3
 8003bc2:	f000 fef7 	bl	80049b4 <xTaskRemoveFromEventList>
 8003bc6:	4603      	mov	r3, r0
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d00e      	beq.n	8003bea <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d00b      	beq.n	8003bea <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	2201      	movs	r2, #1
 8003bd6:	601a      	str	r2, [r3, #0]
 8003bd8:	e007      	b.n	8003bea <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003bda:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003bde:	3301      	adds	r3, #1
 8003be0:	b2db      	uxtb	r3, r3
 8003be2:	b25a      	sxtb	r2, r3
 8003be4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003be6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8003bea:	2301      	movs	r3, #1
 8003bec:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8003bee:	e001      	b.n	8003bf4 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8003bf0:	2300      	movs	r3, #0
 8003bf2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003bf4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003bf6:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003bf8:	697b      	ldr	r3, [r7, #20]
 8003bfa:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8003bfe:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003c00:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8003c02:	4618      	mov	r0, r3
 8003c04:	3740      	adds	r7, #64	; 0x40
 8003c06:	46bd      	mov	sp, r7
 8003c08:	bd80      	pop	{r7, pc}
	...

08003c0c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8003c0c:	b580      	push	{r7, lr}
 8003c0e:	b08c      	sub	sp, #48	; 0x30
 8003c10:	af00      	add	r7, sp, #0
 8003c12:	60f8      	str	r0, [r7, #12]
 8003c14:	60b9      	str	r1, [r7, #8]
 8003c16:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8003c18:	2300      	movs	r3, #0
 8003c1a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003c20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d10a      	bne.n	8003c3c <xQueueReceive+0x30>
	__asm volatile
 8003c26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c2a:	f383 8811 	msr	BASEPRI, r3
 8003c2e:	f3bf 8f6f 	isb	sy
 8003c32:	f3bf 8f4f 	dsb	sy
 8003c36:	623b      	str	r3, [r7, #32]
}
 8003c38:	bf00      	nop
 8003c3a:	e7fe      	b.n	8003c3a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003c3c:	68bb      	ldr	r3, [r7, #8]
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d103      	bne.n	8003c4a <xQueueReceive+0x3e>
 8003c42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d101      	bne.n	8003c4e <xQueueReceive+0x42>
 8003c4a:	2301      	movs	r3, #1
 8003c4c:	e000      	b.n	8003c50 <xQueueReceive+0x44>
 8003c4e:	2300      	movs	r3, #0
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d10a      	bne.n	8003c6a <xQueueReceive+0x5e>
	__asm volatile
 8003c54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c58:	f383 8811 	msr	BASEPRI, r3
 8003c5c:	f3bf 8f6f 	isb	sy
 8003c60:	f3bf 8f4f 	dsb	sy
 8003c64:	61fb      	str	r3, [r7, #28]
}
 8003c66:	bf00      	nop
 8003c68:	e7fe      	b.n	8003c68 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003c6a:	f001 f865 	bl	8004d38 <xTaskGetSchedulerState>
 8003c6e:	4603      	mov	r3, r0
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d102      	bne.n	8003c7a <xQueueReceive+0x6e>
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d101      	bne.n	8003c7e <xQueueReceive+0x72>
 8003c7a:	2301      	movs	r3, #1
 8003c7c:	e000      	b.n	8003c80 <xQueueReceive+0x74>
 8003c7e:	2300      	movs	r3, #0
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d10a      	bne.n	8003c9a <xQueueReceive+0x8e>
	__asm volatile
 8003c84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c88:	f383 8811 	msr	BASEPRI, r3
 8003c8c:	f3bf 8f6f 	isb	sy
 8003c90:	f3bf 8f4f 	dsb	sy
 8003c94:	61bb      	str	r3, [r7, #24]
}
 8003c96:	bf00      	nop
 8003c98:	e7fe      	b.n	8003c98 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003c9a:	f001 fdab 	bl	80057f4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003c9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ca0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ca2:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003ca4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d01f      	beq.n	8003cea <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003caa:	68b9      	ldr	r1, [r7, #8]
 8003cac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003cae:	f000 f8f7 	bl	8003ea0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003cb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cb4:	1e5a      	subs	r2, r3, #1
 8003cb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cb8:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003cba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cbc:	691b      	ldr	r3, [r3, #16]
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d00f      	beq.n	8003ce2 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003cc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cc4:	3310      	adds	r3, #16
 8003cc6:	4618      	mov	r0, r3
 8003cc8:	f000 fe74 	bl	80049b4 <xTaskRemoveFromEventList>
 8003ccc:	4603      	mov	r3, r0
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d007      	beq.n	8003ce2 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003cd2:	4b3d      	ldr	r3, [pc, #244]	; (8003dc8 <xQueueReceive+0x1bc>)
 8003cd4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003cd8:	601a      	str	r2, [r3, #0]
 8003cda:	f3bf 8f4f 	dsb	sy
 8003cde:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003ce2:	f001 fdb7 	bl	8005854 <vPortExitCritical>
				return pdPASS;
 8003ce6:	2301      	movs	r3, #1
 8003ce8:	e069      	b.n	8003dbe <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d103      	bne.n	8003cf8 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003cf0:	f001 fdb0 	bl	8005854 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003cf4:	2300      	movs	r3, #0
 8003cf6:	e062      	b.n	8003dbe <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003cf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d106      	bne.n	8003d0c <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003cfe:	f107 0310 	add.w	r3, r7, #16
 8003d02:	4618      	mov	r0, r3
 8003d04:	f000 feba 	bl	8004a7c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003d08:	2301      	movs	r3, #1
 8003d0a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003d0c:	f001 fda2 	bl	8005854 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003d10:	f000 fc26 	bl	8004560 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003d14:	f001 fd6e 	bl	80057f4 <vPortEnterCritical>
 8003d18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d1a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003d1e:	b25b      	sxtb	r3, r3
 8003d20:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003d24:	d103      	bne.n	8003d2e <xQueueReceive+0x122>
 8003d26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d28:	2200      	movs	r2, #0
 8003d2a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003d2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d30:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003d34:	b25b      	sxtb	r3, r3
 8003d36:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003d3a:	d103      	bne.n	8003d44 <xQueueReceive+0x138>
 8003d3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d3e:	2200      	movs	r2, #0
 8003d40:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003d44:	f001 fd86 	bl	8005854 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003d48:	1d3a      	adds	r2, r7, #4
 8003d4a:	f107 0310 	add.w	r3, r7, #16
 8003d4e:	4611      	mov	r1, r2
 8003d50:	4618      	mov	r0, r3
 8003d52:	f000 fea9 	bl	8004aa8 <xTaskCheckForTimeOut>
 8003d56:	4603      	mov	r3, r0
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d123      	bne.n	8003da4 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003d5c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003d5e:	f000 f917 	bl	8003f90 <prvIsQueueEmpty>
 8003d62:	4603      	mov	r3, r0
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d017      	beq.n	8003d98 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003d68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d6a:	3324      	adds	r3, #36	; 0x24
 8003d6c:	687a      	ldr	r2, [r7, #4]
 8003d6e:	4611      	mov	r1, r2
 8003d70:	4618      	mov	r0, r3
 8003d72:	f000 fdcf 	bl	8004914 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003d76:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003d78:	f000 f8b8 	bl	8003eec <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003d7c:	f000 fbfe 	bl	800457c <xTaskResumeAll>
 8003d80:	4603      	mov	r3, r0
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d189      	bne.n	8003c9a <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8003d86:	4b10      	ldr	r3, [pc, #64]	; (8003dc8 <xQueueReceive+0x1bc>)
 8003d88:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003d8c:	601a      	str	r2, [r3, #0]
 8003d8e:	f3bf 8f4f 	dsb	sy
 8003d92:	f3bf 8f6f 	isb	sy
 8003d96:	e780      	b.n	8003c9a <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8003d98:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003d9a:	f000 f8a7 	bl	8003eec <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003d9e:	f000 fbed 	bl	800457c <xTaskResumeAll>
 8003da2:	e77a      	b.n	8003c9a <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8003da4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003da6:	f000 f8a1 	bl	8003eec <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003daa:	f000 fbe7 	bl	800457c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003dae:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003db0:	f000 f8ee 	bl	8003f90 <prvIsQueueEmpty>
 8003db4:	4603      	mov	r3, r0
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	f43f af6f 	beq.w	8003c9a <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003dbc:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8003dbe:	4618      	mov	r0, r3
 8003dc0:	3730      	adds	r7, #48	; 0x30
 8003dc2:	46bd      	mov	sp, r7
 8003dc4:	bd80      	pop	{r7, pc}
 8003dc6:	bf00      	nop
 8003dc8:	e000ed04 	.word	0xe000ed04

08003dcc <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003dcc:	b580      	push	{r7, lr}
 8003dce:	b086      	sub	sp, #24
 8003dd0:	af00      	add	r7, sp, #0
 8003dd2:	60f8      	str	r0, [r7, #12]
 8003dd4:	60b9      	str	r1, [r7, #8]
 8003dd6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003dd8:	2300      	movs	r3, #0
 8003dda:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003de0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d10d      	bne.n	8003e06 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d14d      	bne.n	8003e8e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	689b      	ldr	r3, [r3, #8]
 8003df6:	4618      	mov	r0, r3
 8003df8:	f000 ffbc 	bl	8004d74 <xTaskPriorityDisinherit>
 8003dfc:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	2200      	movs	r2, #0
 8003e02:	609a      	str	r2, [r3, #8]
 8003e04:	e043      	b.n	8003e8e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d119      	bne.n	8003e40 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	6858      	ldr	r0, [r3, #4]
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e14:	461a      	mov	r2, r3
 8003e16:	68b9      	ldr	r1, [r7, #8]
 8003e18:	f002 f81e 	bl	8005e58 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	685a      	ldr	r2, [r3, #4]
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e24:	441a      	add	r2, r3
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	685a      	ldr	r2, [r3, #4]
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	689b      	ldr	r3, [r3, #8]
 8003e32:	429a      	cmp	r2, r3
 8003e34:	d32b      	bcc.n	8003e8e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	681a      	ldr	r2, [r3, #0]
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	605a      	str	r2, [r3, #4]
 8003e3e:	e026      	b.n	8003e8e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	68d8      	ldr	r0, [r3, #12]
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e48:	461a      	mov	r2, r3
 8003e4a:	68b9      	ldr	r1, [r7, #8]
 8003e4c:	f002 f804 	bl	8005e58 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	68da      	ldr	r2, [r3, #12]
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e58:	425b      	negs	r3, r3
 8003e5a:	441a      	add	r2, r3
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	68da      	ldr	r2, [r3, #12]
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	429a      	cmp	r2, r3
 8003e6a:	d207      	bcs.n	8003e7c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	689a      	ldr	r2, [r3, #8]
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e74:	425b      	negs	r3, r3
 8003e76:	441a      	add	r2, r3
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	2b02      	cmp	r3, #2
 8003e80:	d105      	bne.n	8003e8e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003e82:	693b      	ldr	r3, [r7, #16]
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d002      	beq.n	8003e8e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8003e88:	693b      	ldr	r3, [r7, #16]
 8003e8a:	3b01      	subs	r3, #1
 8003e8c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003e8e:	693b      	ldr	r3, [r7, #16]
 8003e90:	1c5a      	adds	r2, r3, #1
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8003e96:	697b      	ldr	r3, [r7, #20]
}
 8003e98:	4618      	mov	r0, r3
 8003e9a:	3718      	adds	r7, #24
 8003e9c:	46bd      	mov	sp, r7
 8003e9e:	bd80      	pop	{r7, pc}

08003ea0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8003ea0:	b580      	push	{r7, lr}
 8003ea2:	b082      	sub	sp, #8
 8003ea4:	af00      	add	r7, sp, #0
 8003ea6:	6078      	str	r0, [r7, #4]
 8003ea8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d018      	beq.n	8003ee4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	68da      	ldr	r2, [r3, #12]
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eba:	441a      	add	r2, r3
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	68da      	ldr	r2, [r3, #12]
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	689b      	ldr	r3, [r3, #8]
 8003ec8:	429a      	cmp	r2, r3
 8003eca:	d303      	bcc.n	8003ed4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681a      	ldr	r2, [r3, #0]
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	68d9      	ldr	r1, [r3, #12]
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003edc:	461a      	mov	r2, r3
 8003ede:	6838      	ldr	r0, [r7, #0]
 8003ee0:	f001 ffba 	bl	8005e58 <memcpy>
	}
}
 8003ee4:	bf00      	nop
 8003ee6:	3708      	adds	r7, #8
 8003ee8:	46bd      	mov	sp, r7
 8003eea:	bd80      	pop	{r7, pc}

08003eec <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003eec:	b580      	push	{r7, lr}
 8003eee:	b084      	sub	sp, #16
 8003ef0:	af00      	add	r7, sp, #0
 8003ef2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003ef4:	f001 fc7e 	bl	80057f4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003efe:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003f00:	e011      	b.n	8003f26 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d012      	beq.n	8003f30 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	3324      	adds	r3, #36	; 0x24
 8003f0e:	4618      	mov	r0, r3
 8003f10:	f000 fd50 	bl	80049b4 <xTaskRemoveFromEventList>
 8003f14:	4603      	mov	r3, r0
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d001      	beq.n	8003f1e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8003f1a:	f000 fe27 	bl	8004b6c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8003f1e:	7bfb      	ldrb	r3, [r7, #15]
 8003f20:	3b01      	subs	r3, #1
 8003f22:	b2db      	uxtb	r3, r3
 8003f24:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003f26:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	dce9      	bgt.n	8003f02 <prvUnlockQueue+0x16>
 8003f2e:	e000      	b.n	8003f32 <prvUnlockQueue+0x46>
					break;
 8003f30:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	22ff      	movs	r2, #255	; 0xff
 8003f36:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8003f3a:	f001 fc8b 	bl	8005854 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8003f3e:	f001 fc59 	bl	80057f4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003f48:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003f4a:	e011      	b.n	8003f70 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	691b      	ldr	r3, [r3, #16]
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d012      	beq.n	8003f7a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	3310      	adds	r3, #16
 8003f58:	4618      	mov	r0, r3
 8003f5a:	f000 fd2b 	bl	80049b4 <xTaskRemoveFromEventList>
 8003f5e:	4603      	mov	r3, r0
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d001      	beq.n	8003f68 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8003f64:	f000 fe02 	bl	8004b6c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8003f68:	7bbb      	ldrb	r3, [r7, #14]
 8003f6a:	3b01      	subs	r3, #1
 8003f6c:	b2db      	uxtb	r3, r3
 8003f6e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003f70:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	dce9      	bgt.n	8003f4c <prvUnlockQueue+0x60>
 8003f78:	e000      	b.n	8003f7c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8003f7a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	22ff      	movs	r2, #255	; 0xff
 8003f80:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8003f84:	f001 fc66 	bl	8005854 <vPortExitCritical>
}
 8003f88:	bf00      	nop
 8003f8a:	3710      	adds	r7, #16
 8003f8c:	46bd      	mov	sp, r7
 8003f8e:	bd80      	pop	{r7, pc}

08003f90 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8003f90:	b580      	push	{r7, lr}
 8003f92:	b084      	sub	sp, #16
 8003f94:	af00      	add	r7, sp, #0
 8003f96:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003f98:	f001 fc2c 	bl	80057f4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d102      	bne.n	8003faa <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8003fa4:	2301      	movs	r3, #1
 8003fa6:	60fb      	str	r3, [r7, #12]
 8003fa8:	e001      	b.n	8003fae <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8003faa:	2300      	movs	r3, #0
 8003fac:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003fae:	f001 fc51 	bl	8005854 <vPortExitCritical>

	return xReturn;
 8003fb2:	68fb      	ldr	r3, [r7, #12]
}
 8003fb4:	4618      	mov	r0, r3
 8003fb6:	3710      	adds	r7, #16
 8003fb8:	46bd      	mov	sp, r7
 8003fba:	bd80      	pop	{r7, pc}

08003fbc <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8003fbc:	b580      	push	{r7, lr}
 8003fbe:	b084      	sub	sp, #16
 8003fc0:	af00      	add	r7, sp, #0
 8003fc2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003fc4:	f001 fc16 	bl	80057f4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fd0:	429a      	cmp	r2, r3
 8003fd2:	d102      	bne.n	8003fda <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8003fd4:	2301      	movs	r3, #1
 8003fd6:	60fb      	str	r3, [r7, #12]
 8003fd8:	e001      	b.n	8003fde <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8003fda:	2300      	movs	r3, #0
 8003fdc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003fde:	f001 fc39 	bl	8005854 <vPortExitCritical>

	return xReturn;
 8003fe2:	68fb      	ldr	r3, [r7, #12]
}
 8003fe4:	4618      	mov	r0, r3
 8003fe6:	3710      	adds	r7, #16
 8003fe8:	46bd      	mov	sp, r7
 8003fea:	bd80      	pop	{r7, pc}

08003fec <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8003fec:	b480      	push	{r7}
 8003fee:	b085      	sub	sp, #20
 8003ff0:	af00      	add	r7, sp, #0
 8003ff2:	6078      	str	r0, [r7, #4]
 8003ff4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003ff6:	2300      	movs	r3, #0
 8003ff8:	60fb      	str	r3, [r7, #12]
 8003ffa:	e014      	b.n	8004026 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8003ffc:	4a0f      	ldr	r2, [pc, #60]	; (800403c <vQueueAddToRegistry+0x50>)
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004004:	2b00      	cmp	r3, #0
 8004006:	d10b      	bne.n	8004020 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8004008:	490c      	ldr	r1, [pc, #48]	; (800403c <vQueueAddToRegistry+0x50>)
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	683a      	ldr	r2, [r7, #0]
 800400e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8004012:	4a0a      	ldr	r2, [pc, #40]	; (800403c <vQueueAddToRegistry+0x50>)
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	00db      	lsls	r3, r3, #3
 8004018:	4413      	add	r3, r2
 800401a:	687a      	ldr	r2, [r7, #4]
 800401c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800401e:	e006      	b.n	800402e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	3301      	adds	r3, #1
 8004024:	60fb      	str	r3, [r7, #12]
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	2b07      	cmp	r3, #7
 800402a:	d9e7      	bls.n	8003ffc <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800402c:	bf00      	nop
 800402e:	bf00      	nop
 8004030:	3714      	adds	r7, #20
 8004032:	46bd      	mov	sp, r7
 8004034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004038:	4770      	bx	lr
 800403a:	bf00      	nop
 800403c:	200038f8 	.word	0x200038f8

08004040 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004040:	b580      	push	{r7, lr}
 8004042:	b086      	sub	sp, #24
 8004044:	af00      	add	r7, sp, #0
 8004046:	60f8      	str	r0, [r7, #12]
 8004048:	60b9      	str	r1, [r7, #8]
 800404a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8004050:	f001 fbd0 	bl	80057f4 <vPortEnterCritical>
 8004054:	697b      	ldr	r3, [r7, #20]
 8004056:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800405a:	b25b      	sxtb	r3, r3
 800405c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004060:	d103      	bne.n	800406a <vQueueWaitForMessageRestricted+0x2a>
 8004062:	697b      	ldr	r3, [r7, #20]
 8004064:	2200      	movs	r2, #0
 8004066:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800406a:	697b      	ldr	r3, [r7, #20]
 800406c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004070:	b25b      	sxtb	r3, r3
 8004072:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004076:	d103      	bne.n	8004080 <vQueueWaitForMessageRestricted+0x40>
 8004078:	697b      	ldr	r3, [r7, #20]
 800407a:	2200      	movs	r2, #0
 800407c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004080:	f001 fbe8 	bl	8005854 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8004084:	697b      	ldr	r3, [r7, #20]
 8004086:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004088:	2b00      	cmp	r3, #0
 800408a:	d106      	bne.n	800409a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800408c:	697b      	ldr	r3, [r7, #20]
 800408e:	3324      	adds	r3, #36	; 0x24
 8004090:	687a      	ldr	r2, [r7, #4]
 8004092:	68b9      	ldr	r1, [r7, #8]
 8004094:	4618      	mov	r0, r3
 8004096:	f000 fc61 	bl	800495c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800409a:	6978      	ldr	r0, [r7, #20]
 800409c:	f7ff ff26 	bl	8003eec <prvUnlockQueue>
	}
 80040a0:	bf00      	nop
 80040a2:	3718      	adds	r7, #24
 80040a4:	46bd      	mov	sp, r7
 80040a6:	bd80      	pop	{r7, pc}

080040a8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80040a8:	b580      	push	{r7, lr}
 80040aa:	b08e      	sub	sp, #56	; 0x38
 80040ac:	af04      	add	r7, sp, #16
 80040ae:	60f8      	str	r0, [r7, #12]
 80040b0:	60b9      	str	r1, [r7, #8]
 80040b2:	607a      	str	r2, [r7, #4]
 80040b4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80040b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d10a      	bne.n	80040d2 <xTaskCreateStatic+0x2a>
	__asm volatile
 80040bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040c0:	f383 8811 	msr	BASEPRI, r3
 80040c4:	f3bf 8f6f 	isb	sy
 80040c8:	f3bf 8f4f 	dsb	sy
 80040cc:	623b      	str	r3, [r7, #32]
}
 80040ce:	bf00      	nop
 80040d0:	e7fe      	b.n	80040d0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80040d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d10a      	bne.n	80040ee <xTaskCreateStatic+0x46>
	__asm volatile
 80040d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040dc:	f383 8811 	msr	BASEPRI, r3
 80040e0:	f3bf 8f6f 	isb	sy
 80040e4:	f3bf 8f4f 	dsb	sy
 80040e8:	61fb      	str	r3, [r7, #28]
}
 80040ea:	bf00      	nop
 80040ec:	e7fe      	b.n	80040ec <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80040ee:	23bc      	movs	r3, #188	; 0xbc
 80040f0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80040f2:	693b      	ldr	r3, [r7, #16]
 80040f4:	2bbc      	cmp	r3, #188	; 0xbc
 80040f6:	d00a      	beq.n	800410e <xTaskCreateStatic+0x66>
	__asm volatile
 80040f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040fc:	f383 8811 	msr	BASEPRI, r3
 8004100:	f3bf 8f6f 	isb	sy
 8004104:	f3bf 8f4f 	dsb	sy
 8004108:	61bb      	str	r3, [r7, #24]
}
 800410a:	bf00      	nop
 800410c:	e7fe      	b.n	800410c <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800410e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004110:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004112:	2b00      	cmp	r3, #0
 8004114:	d01e      	beq.n	8004154 <xTaskCreateStatic+0xac>
 8004116:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004118:	2b00      	cmp	r3, #0
 800411a:	d01b      	beq.n	8004154 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800411c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800411e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004120:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004122:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004124:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004126:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004128:	2202      	movs	r2, #2
 800412a:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800412e:	2300      	movs	r3, #0
 8004130:	9303      	str	r3, [sp, #12]
 8004132:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004134:	9302      	str	r3, [sp, #8]
 8004136:	f107 0314 	add.w	r3, r7, #20
 800413a:	9301      	str	r3, [sp, #4]
 800413c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800413e:	9300      	str	r3, [sp, #0]
 8004140:	683b      	ldr	r3, [r7, #0]
 8004142:	687a      	ldr	r2, [r7, #4]
 8004144:	68b9      	ldr	r1, [r7, #8]
 8004146:	68f8      	ldr	r0, [r7, #12]
 8004148:	f000 f850 	bl	80041ec <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800414c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800414e:	f000 f8f3 	bl	8004338 <prvAddNewTaskToReadyList>
 8004152:	e001      	b.n	8004158 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8004154:	2300      	movs	r3, #0
 8004156:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004158:	697b      	ldr	r3, [r7, #20]
	}
 800415a:	4618      	mov	r0, r3
 800415c:	3728      	adds	r7, #40	; 0x28
 800415e:	46bd      	mov	sp, r7
 8004160:	bd80      	pop	{r7, pc}

08004162 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004162:	b580      	push	{r7, lr}
 8004164:	b08c      	sub	sp, #48	; 0x30
 8004166:	af04      	add	r7, sp, #16
 8004168:	60f8      	str	r0, [r7, #12]
 800416a:	60b9      	str	r1, [r7, #8]
 800416c:	603b      	str	r3, [r7, #0]
 800416e:	4613      	mov	r3, r2
 8004170:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004172:	88fb      	ldrh	r3, [r7, #6]
 8004174:	009b      	lsls	r3, r3, #2
 8004176:	4618      	mov	r0, r3
 8004178:	f001 fc5e 	bl	8005a38 <pvPortMalloc>
 800417c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800417e:	697b      	ldr	r3, [r7, #20]
 8004180:	2b00      	cmp	r3, #0
 8004182:	d00e      	beq.n	80041a2 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8004184:	20bc      	movs	r0, #188	; 0xbc
 8004186:	f001 fc57 	bl	8005a38 <pvPortMalloc>
 800418a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800418c:	69fb      	ldr	r3, [r7, #28]
 800418e:	2b00      	cmp	r3, #0
 8004190:	d003      	beq.n	800419a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004192:	69fb      	ldr	r3, [r7, #28]
 8004194:	697a      	ldr	r2, [r7, #20]
 8004196:	631a      	str	r2, [r3, #48]	; 0x30
 8004198:	e005      	b.n	80041a6 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800419a:	6978      	ldr	r0, [r7, #20]
 800419c:	f001 fd18 	bl	8005bd0 <vPortFree>
 80041a0:	e001      	b.n	80041a6 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80041a2:	2300      	movs	r3, #0
 80041a4:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80041a6:	69fb      	ldr	r3, [r7, #28]
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d017      	beq.n	80041dc <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80041ac:	69fb      	ldr	r3, [r7, #28]
 80041ae:	2200      	movs	r2, #0
 80041b0:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80041b4:	88fa      	ldrh	r2, [r7, #6]
 80041b6:	2300      	movs	r3, #0
 80041b8:	9303      	str	r3, [sp, #12]
 80041ba:	69fb      	ldr	r3, [r7, #28]
 80041bc:	9302      	str	r3, [sp, #8]
 80041be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041c0:	9301      	str	r3, [sp, #4]
 80041c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041c4:	9300      	str	r3, [sp, #0]
 80041c6:	683b      	ldr	r3, [r7, #0]
 80041c8:	68b9      	ldr	r1, [r7, #8]
 80041ca:	68f8      	ldr	r0, [r7, #12]
 80041cc:	f000 f80e 	bl	80041ec <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80041d0:	69f8      	ldr	r0, [r7, #28]
 80041d2:	f000 f8b1 	bl	8004338 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80041d6:	2301      	movs	r3, #1
 80041d8:	61bb      	str	r3, [r7, #24]
 80041da:	e002      	b.n	80041e2 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80041dc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80041e0:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80041e2:	69bb      	ldr	r3, [r7, #24]
	}
 80041e4:	4618      	mov	r0, r3
 80041e6:	3720      	adds	r7, #32
 80041e8:	46bd      	mov	sp, r7
 80041ea:	bd80      	pop	{r7, pc}

080041ec <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80041ec:	b580      	push	{r7, lr}
 80041ee:	b088      	sub	sp, #32
 80041f0:	af00      	add	r7, sp, #0
 80041f2:	60f8      	str	r0, [r7, #12]
 80041f4:	60b9      	str	r1, [r7, #8]
 80041f6:	607a      	str	r2, [r7, #4]
 80041f8:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80041fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041fc:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	009b      	lsls	r3, r3, #2
 8004202:	461a      	mov	r2, r3
 8004204:	21a5      	movs	r1, #165	; 0xa5
 8004206:	f001 fe35 	bl	8005e74 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800420a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800420c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004214:	3b01      	subs	r3, #1
 8004216:	009b      	lsls	r3, r3, #2
 8004218:	4413      	add	r3, r2
 800421a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800421c:	69bb      	ldr	r3, [r7, #24]
 800421e:	f023 0307 	bic.w	r3, r3, #7
 8004222:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004224:	69bb      	ldr	r3, [r7, #24]
 8004226:	f003 0307 	and.w	r3, r3, #7
 800422a:	2b00      	cmp	r3, #0
 800422c:	d00a      	beq.n	8004244 <prvInitialiseNewTask+0x58>
	__asm volatile
 800422e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004232:	f383 8811 	msr	BASEPRI, r3
 8004236:	f3bf 8f6f 	isb	sy
 800423a:	f3bf 8f4f 	dsb	sy
 800423e:	617b      	str	r3, [r7, #20]
}
 8004240:	bf00      	nop
 8004242:	e7fe      	b.n	8004242 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8004244:	68bb      	ldr	r3, [r7, #8]
 8004246:	2b00      	cmp	r3, #0
 8004248:	d01f      	beq.n	800428a <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800424a:	2300      	movs	r3, #0
 800424c:	61fb      	str	r3, [r7, #28]
 800424e:	e012      	b.n	8004276 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004250:	68ba      	ldr	r2, [r7, #8]
 8004252:	69fb      	ldr	r3, [r7, #28]
 8004254:	4413      	add	r3, r2
 8004256:	7819      	ldrb	r1, [r3, #0]
 8004258:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800425a:	69fb      	ldr	r3, [r7, #28]
 800425c:	4413      	add	r3, r2
 800425e:	3334      	adds	r3, #52	; 0x34
 8004260:	460a      	mov	r2, r1
 8004262:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8004264:	68ba      	ldr	r2, [r7, #8]
 8004266:	69fb      	ldr	r3, [r7, #28]
 8004268:	4413      	add	r3, r2
 800426a:	781b      	ldrb	r3, [r3, #0]
 800426c:	2b00      	cmp	r3, #0
 800426e:	d006      	beq.n	800427e <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004270:	69fb      	ldr	r3, [r7, #28]
 8004272:	3301      	adds	r3, #1
 8004274:	61fb      	str	r3, [r7, #28]
 8004276:	69fb      	ldr	r3, [r7, #28]
 8004278:	2b0f      	cmp	r3, #15
 800427a:	d9e9      	bls.n	8004250 <prvInitialiseNewTask+0x64>
 800427c:	e000      	b.n	8004280 <prvInitialiseNewTask+0x94>
			{
				break;
 800427e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004280:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004282:	2200      	movs	r2, #0
 8004284:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004288:	e003      	b.n	8004292 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800428a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800428c:	2200      	movs	r2, #0
 800428e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004292:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004294:	2b37      	cmp	r3, #55	; 0x37
 8004296:	d901      	bls.n	800429c <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004298:	2337      	movs	r3, #55	; 0x37
 800429a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800429c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800429e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80042a0:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80042a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042a4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80042a6:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80042a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042aa:	2200      	movs	r2, #0
 80042ac:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80042ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042b0:	3304      	adds	r3, #4
 80042b2:	4618      	mov	r0, r3
 80042b4:	f7ff f978 	bl	80035a8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80042b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042ba:	3318      	adds	r3, #24
 80042bc:	4618      	mov	r0, r3
 80042be:	f7ff f973 	bl	80035a8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80042c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042c4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80042c6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80042c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042ca:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80042ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042d0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80042d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042d4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80042d6:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80042d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042da:	2200      	movs	r2, #0
 80042dc:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80042e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042e2:	2200      	movs	r2, #0
 80042e4:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80042e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042ea:	3354      	adds	r3, #84	; 0x54
 80042ec:	2260      	movs	r2, #96	; 0x60
 80042ee:	2100      	movs	r1, #0
 80042f0:	4618      	mov	r0, r3
 80042f2:	f001 fdbf 	bl	8005e74 <memset>
 80042f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042f8:	4a0c      	ldr	r2, [pc, #48]	; (800432c <prvInitialiseNewTask+0x140>)
 80042fa:	659a      	str	r2, [r3, #88]	; 0x58
 80042fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042fe:	4a0c      	ldr	r2, [pc, #48]	; (8004330 <prvInitialiseNewTask+0x144>)
 8004300:	65da      	str	r2, [r3, #92]	; 0x5c
 8004302:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004304:	4a0b      	ldr	r2, [pc, #44]	; (8004334 <prvInitialiseNewTask+0x148>)
 8004306:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004308:	683a      	ldr	r2, [r7, #0]
 800430a:	68f9      	ldr	r1, [r7, #12]
 800430c:	69b8      	ldr	r0, [r7, #24]
 800430e:	f001 f941 	bl	8005594 <pxPortInitialiseStack>
 8004312:	4602      	mov	r2, r0
 8004314:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004316:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8004318:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800431a:	2b00      	cmp	r3, #0
 800431c:	d002      	beq.n	8004324 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800431e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004320:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004322:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004324:	bf00      	nop
 8004326:	3720      	adds	r7, #32
 8004328:	46bd      	mov	sp, r7
 800432a:	bd80      	pop	{r7, pc}
 800432c:	080060a8 	.word	0x080060a8
 8004330:	080060c8 	.word	0x080060c8
 8004334:	08006088 	.word	0x08006088

08004338 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004338:	b580      	push	{r7, lr}
 800433a:	b082      	sub	sp, #8
 800433c:	af00      	add	r7, sp, #0
 800433e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004340:	f001 fa58 	bl	80057f4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004344:	4b2d      	ldr	r3, [pc, #180]	; (80043fc <prvAddNewTaskToReadyList+0xc4>)
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	3301      	adds	r3, #1
 800434a:	4a2c      	ldr	r2, [pc, #176]	; (80043fc <prvAddNewTaskToReadyList+0xc4>)
 800434c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800434e:	4b2c      	ldr	r3, [pc, #176]	; (8004400 <prvAddNewTaskToReadyList+0xc8>)
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	2b00      	cmp	r3, #0
 8004354:	d109      	bne.n	800436a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004356:	4a2a      	ldr	r2, [pc, #168]	; (8004400 <prvAddNewTaskToReadyList+0xc8>)
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800435c:	4b27      	ldr	r3, [pc, #156]	; (80043fc <prvAddNewTaskToReadyList+0xc4>)
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	2b01      	cmp	r3, #1
 8004362:	d110      	bne.n	8004386 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004364:	f000 fc26 	bl	8004bb4 <prvInitialiseTaskLists>
 8004368:	e00d      	b.n	8004386 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800436a:	4b26      	ldr	r3, [pc, #152]	; (8004404 <prvAddNewTaskToReadyList+0xcc>)
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	2b00      	cmp	r3, #0
 8004370:	d109      	bne.n	8004386 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004372:	4b23      	ldr	r3, [pc, #140]	; (8004400 <prvAddNewTaskToReadyList+0xc8>)
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800437c:	429a      	cmp	r2, r3
 800437e:	d802      	bhi.n	8004386 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004380:	4a1f      	ldr	r2, [pc, #124]	; (8004400 <prvAddNewTaskToReadyList+0xc8>)
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004386:	4b20      	ldr	r3, [pc, #128]	; (8004408 <prvAddNewTaskToReadyList+0xd0>)
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	3301      	adds	r3, #1
 800438c:	4a1e      	ldr	r2, [pc, #120]	; (8004408 <prvAddNewTaskToReadyList+0xd0>)
 800438e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8004390:	4b1d      	ldr	r3, [pc, #116]	; (8004408 <prvAddNewTaskToReadyList+0xd0>)
 8004392:	681a      	ldr	r2, [r3, #0]
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800439c:	4b1b      	ldr	r3, [pc, #108]	; (800440c <prvAddNewTaskToReadyList+0xd4>)
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	429a      	cmp	r2, r3
 80043a2:	d903      	bls.n	80043ac <prvAddNewTaskToReadyList+0x74>
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043a8:	4a18      	ldr	r2, [pc, #96]	; (800440c <prvAddNewTaskToReadyList+0xd4>)
 80043aa:	6013      	str	r3, [r2, #0]
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80043b0:	4613      	mov	r3, r2
 80043b2:	009b      	lsls	r3, r3, #2
 80043b4:	4413      	add	r3, r2
 80043b6:	009b      	lsls	r3, r3, #2
 80043b8:	4a15      	ldr	r2, [pc, #84]	; (8004410 <prvAddNewTaskToReadyList+0xd8>)
 80043ba:	441a      	add	r2, r3
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	3304      	adds	r3, #4
 80043c0:	4619      	mov	r1, r3
 80043c2:	4610      	mov	r0, r2
 80043c4:	f7ff f8fd 	bl	80035c2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80043c8:	f001 fa44 	bl	8005854 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80043cc:	4b0d      	ldr	r3, [pc, #52]	; (8004404 <prvAddNewTaskToReadyList+0xcc>)
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d00e      	beq.n	80043f2 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80043d4:	4b0a      	ldr	r3, [pc, #40]	; (8004400 <prvAddNewTaskToReadyList+0xc8>)
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043de:	429a      	cmp	r2, r3
 80043e0:	d207      	bcs.n	80043f2 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80043e2:	4b0c      	ldr	r3, [pc, #48]	; (8004414 <prvAddNewTaskToReadyList+0xdc>)
 80043e4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80043e8:	601a      	str	r2, [r3, #0]
 80043ea:	f3bf 8f4f 	dsb	sy
 80043ee:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80043f2:	bf00      	nop
 80043f4:	3708      	adds	r7, #8
 80043f6:	46bd      	mov	sp, r7
 80043f8:	bd80      	pop	{r7, pc}
 80043fa:	bf00      	nop
 80043fc:	20003e0c 	.word	0x20003e0c
 8004400:	20003938 	.word	0x20003938
 8004404:	20003e18 	.word	0x20003e18
 8004408:	20003e28 	.word	0x20003e28
 800440c:	20003e14 	.word	0x20003e14
 8004410:	2000393c 	.word	0x2000393c
 8004414:	e000ed04 	.word	0xe000ed04

08004418 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004418:	b580      	push	{r7, lr}
 800441a:	b084      	sub	sp, #16
 800441c:	af00      	add	r7, sp, #0
 800441e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004420:	2300      	movs	r3, #0
 8004422:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	2b00      	cmp	r3, #0
 8004428:	d017      	beq.n	800445a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800442a:	4b13      	ldr	r3, [pc, #76]	; (8004478 <vTaskDelay+0x60>)
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	2b00      	cmp	r3, #0
 8004430:	d00a      	beq.n	8004448 <vTaskDelay+0x30>
	__asm volatile
 8004432:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004436:	f383 8811 	msr	BASEPRI, r3
 800443a:	f3bf 8f6f 	isb	sy
 800443e:	f3bf 8f4f 	dsb	sy
 8004442:	60bb      	str	r3, [r7, #8]
}
 8004444:	bf00      	nop
 8004446:	e7fe      	b.n	8004446 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8004448:	f000 f88a 	bl	8004560 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800444c:	2100      	movs	r1, #0
 800444e:	6878      	ldr	r0, [r7, #4]
 8004450:	f000 fcfe 	bl	8004e50 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004454:	f000 f892 	bl	800457c <xTaskResumeAll>
 8004458:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	2b00      	cmp	r3, #0
 800445e:	d107      	bne.n	8004470 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8004460:	4b06      	ldr	r3, [pc, #24]	; (800447c <vTaskDelay+0x64>)
 8004462:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004466:	601a      	str	r2, [r3, #0]
 8004468:	f3bf 8f4f 	dsb	sy
 800446c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004470:	bf00      	nop
 8004472:	3710      	adds	r7, #16
 8004474:	46bd      	mov	sp, r7
 8004476:	bd80      	pop	{r7, pc}
 8004478:	20003e34 	.word	0x20003e34
 800447c:	e000ed04 	.word	0xe000ed04

08004480 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004480:	b580      	push	{r7, lr}
 8004482:	b08a      	sub	sp, #40	; 0x28
 8004484:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8004486:	2300      	movs	r3, #0
 8004488:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800448a:	2300      	movs	r3, #0
 800448c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800448e:	463a      	mov	r2, r7
 8004490:	1d39      	adds	r1, r7, #4
 8004492:	f107 0308 	add.w	r3, r7, #8
 8004496:	4618      	mov	r0, r3
 8004498:	f7ff f832 	bl	8003500 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800449c:	6839      	ldr	r1, [r7, #0]
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	68ba      	ldr	r2, [r7, #8]
 80044a2:	9202      	str	r2, [sp, #8]
 80044a4:	9301      	str	r3, [sp, #4]
 80044a6:	2300      	movs	r3, #0
 80044a8:	9300      	str	r3, [sp, #0]
 80044aa:	2300      	movs	r3, #0
 80044ac:	460a      	mov	r2, r1
 80044ae:	4924      	ldr	r1, [pc, #144]	; (8004540 <vTaskStartScheduler+0xc0>)
 80044b0:	4824      	ldr	r0, [pc, #144]	; (8004544 <vTaskStartScheduler+0xc4>)
 80044b2:	f7ff fdf9 	bl	80040a8 <xTaskCreateStatic>
 80044b6:	4603      	mov	r3, r0
 80044b8:	4a23      	ldr	r2, [pc, #140]	; (8004548 <vTaskStartScheduler+0xc8>)
 80044ba:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80044bc:	4b22      	ldr	r3, [pc, #136]	; (8004548 <vTaskStartScheduler+0xc8>)
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d002      	beq.n	80044ca <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80044c4:	2301      	movs	r3, #1
 80044c6:	617b      	str	r3, [r7, #20]
 80044c8:	e001      	b.n	80044ce <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80044ca:	2300      	movs	r3, #0
 80044cc:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80044ce:	697b      	ldr	r3, [r7, #20]
 80044d0:	2b01      	cmp	r3, #1
 80044d2:	d102      	bne.n	80044da <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80044d4:	f000 fd10 	bl	8004ef8 <xTimerCreateTimerTask>
 80044d8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80044da:	697b      	ldr	r3, [r7, #20]
 80044dc:	2b01      	cmp	r3, #1
 80044de:	d11b      	bne.n	8004518 <vTaskStartScheduler+0x98>
	__asm volatile
 80044e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044e4:	f383 8811 	msr	BASEPRI, r3
 80044e8:	f3bf 8f6f 	isb	sy
 80044ec:	f3bf 8f4f 	dsb	sy
 80044f0:	613b      	str	r3, [r7, #16]
}
 80044f2:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80044f4:	4b15      	ldr	r3, [pc, #84]	; (800454c <vTaskStartScheduler+0xcc>)
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	3354      	adds	r3, #84	; 0x54
 80044fa:	4a15      	ldr	r2, [pc, #84]	; (8004550 <vTaskStartScheduler+0xd0>)
 80044fc:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80044fe:	4b15      	ldr	r3, [pc, #84]	; (8004554 <vTaskStartScheduler+0xd4>)
 8004500:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004504:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004506:	4b14      	ldr	r3, [pc, #80]	; (8004558 <vTaskStartScheduler+0xd8>)
 8004508:	2201      	movs	r2, #1
 800450a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800450c:	4b13      	ldr	r3, [pc, #76]	; (800455c <vTaskStartScheduler+0xdc>)
 800450e:	2200      	movs	r2, #0
 8004510:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004512:	f001 f8cd 	bl	80056b0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004516:	e00e      	b.n	8004536 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004518:	697b      	ldr	r3, [r7, #20]
 800451a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800451e:	d10a      	bne.n	8004536 <vTaskStartScheduler+0xb6>
	__asm volatile
 8004520:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004524:	f383 8811 	msr	BASEPRI, r3
 8004528:	f3bf 8f6f 	isb	sy
 800452c:	f3bf 8f4f 	dsb	sy
 8004530:	60fb      	str	r3, [r7, #12]
}
 8004532:	bf00      	nop
 8004534:	e7fe      	b.n	8004534 <vTaskStartScheduler+0xb4>
}
 8004536:	bf00      	nop
 8004538:	3718      	adds	r7, #24
 800453a:	46bd      	mov	sp, r7
 800453c:	bd80      	pop	{r7, pc}
 800453e:	bf00      	nop
 8004540:	0800602c 	.word	0x0800602c
 8004544:	08004b85 	.word	0x08004b85
 8004548:	20003e30 	.word	0x20003e30
 800454c:	20003938 	.word	0x20003938
 8004550:	20000010 	.word	0x20000010
 8004554:	20003e2c 	.word	0x20003e2c
 8004558:	20003e18 	.word	0x20003e18
 800455c:	20003e10 	.word	0x20003e10

08004560 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004560:	b480      	push	{r7}
 8004562:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8004564:	4b04      	ldr	r3, [pc, #16]	; (8004578 <vTaskSuspendAll+0x18>)
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	3301      	adds	r3, #1
 800456a:	4a03      	ldr	r2, [pc, #12]	; (8004578 <vTaskSuspendAll+0x18>)
 800456c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800456e:	bf00      	nop
 8004570:	46bd      	mov	sp, r7
 8004572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004576:	4770      	bx	lr
 8004578:	20003e34 	.word	0x20003e34

0800457c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800457c:	b580      	push	{r7, lr}
 800457e:	b084      	sub	sp, #16
 8004580:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004582:	2300      	movs	r3, #0
 8004584:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004586:	2300      	movs	r3, #0
 8004588:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800458a:	4b42      	ldr	r3, [pc, #264]	; (8004694 <xTaskResumeAll+0x118>)
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	2b00      	cmp	r3, #0
 8004590:	d10a      	bne.n	80045a8 <xTaskResumeAll+0x2c>
	__asm volatile
 8004592:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004596:	f383 8811 	msr	BASEPRI, r3
 800459a:	f3bf 8f6f 	isb	sy
 800459e:	f3bf 8f4f 	dsb	sy
 80045a2:	603b      	str	r3, [r7, #0]
}
 80045a4:	bf00      	nop
 80045a6:	e7fe      	b.n	80045a6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80045a8:	f001 f924 	bl	80057f4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80045ac:	4b39      	ldr	r3, [pc, #228]	; (8004694 <xTaskResumeAll+0x118>)
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	3b01      	subs	r3, #1
 80045b2:	4a38      	ldr	r2, [pc, #224]	; (8004694 <xTaskResumeAll+0x118>)
 80045b4:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80045b6:	4b37      	ldr	r3, [pc, #220]	; (8004694 <xTaskResumeAll+0x118>)
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d162      	bne.n	8004684 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80045be:	4b36      	ldr	r3, [pc, #216]	; (8004698 <xTaskResumeAll+0x11c>)
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d05e      	beq.n	8004684 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80045c6:	e02f      	b.n	8004628 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80045c8:	4b34      	ldr	r3, [pc, #208]	; (800469c <xTaskResumeAll+0x120>)
 80045ca:	68db      	ldr	r3, [r3, #12]
 80045cc:	68db      	ldr	r3, [r3, #12]
 80045ce:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	3318      	adds	r3, #24
 80045d4:	4618      	mov	r0, r3
 80045d6:	f7ff f851 	bl	800367c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	3304      	adds	r3, #4
 80045de:	4618      	mov	r0, r3
 80045e0:	f7ff f84c 	bl	800367c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045e8:	4b2d      	ldr	r3, [pc, #180]	; (80046a0 <xTaskResumeAll+0x124>)
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	429a      	cmp	r2, r3
 80045ee:	d903      	bls.n	80045f8 <xTaskResumeAll+0x7c>
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045f4:	4a2a      	ldr	r2, [pc, #168]	; (80046a0 <xTaskResumeAll+0x124>)
 80045f6:	6013      	str	r3, [r2, #0]
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045fc:	4613      	mov	r3, r2
 80045fe:	009b      	lsls	r3, r3, #2
 8004600:	4413      	add	r3, r2
 8004602:	009b      	lsls	r3, r3, #2
 8004604:	4a27      	ldr	r2, [pc, #156]	; (80046a4 <xTaskResumeAll+0x128>)
 8004606:	441a      	add	r2, r3
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	3304      	adds	r3, #4
 800460c:	4619      	mov	r1, r3
 800460e:	4610      	mov	r0, r2
 8004610:	f7fe ffd7 	bl	80035c2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004618:	4b23      	ldr	r3, [pc, #140]	; (80046a8 <xTaskResumeAll+0x12c>)
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800461e:	429a      	cmp	r2, r3
 8004620:	d302      	bcc.n	8004628 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8004622:	4b22      	ldr	r3, [pc, #136]	; (80046ac <xTaskResumeAll+0x130>)
 8004624:	2201      	movs	r2, #1
 8004626:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004628:	4b1c      	ldr	r3, [pc, #112]	; (800469c <xTaskResumeAll+0x120>)
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	2b00      	cmp	r3, #0
 800462e:	d1cb      	bne.n	80045c8 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	2b00      	cmp	r3, #0
 8004634:	d001      	beq.n	800463a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004636:	f000 fb5f 	bl	8004cf8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800463a:	4b1d      	ldr	r3, [pc, #116]	; (80046b0 <xTaskResumeAll+0x134>)
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	2b00      	cmp	r3, #0
 8004644:	d010      	beq.n	8004668 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004646:	f000 f847 	bl	80046d8 <xTaskIncrementTick>
 800464a:	4603      	mov	r3, r0
 800464c:	2b00      	cmp	r3, #0
 800464e:	d002      	beq.n	8004656 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8004650:	4b16      	ldr	r3, [pc, #88]	; (80046ac <xTaskResumeAll+0x130>)
 8004652:	2201      	movs	r2, #1
 8004654:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	3b01      	subs	r3, #1
 800465a:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	2b00      	cmp	r3, #0
 8004660:	d1f1      	bne.n	8004646 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8004662:	4b13      	ldr	r3, [pc, #76]	; (80046b0 <xTaskResumeAll+0x134>)
 8004664:	2200      	movs	r2, #0
 8004666:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004668:	4b10      	ldr	r3, [pc, #64]	; (80046ac <xTaskResumeAll+0x130>)
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	2b00      	cmp	r3, #0
 800466e:	d009      	beq.n	8004684 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004670:	2301      	movs	r3, #1
 8004672:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004674:	4b0f      	ldr	r3, [pc, #60]	; (80046b4 <xTaskResumeAll+0x138>)
 8004676:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800467a:	601a      	str	r2, [r3, #0]
 800467c:	f3bf 8f4f 	dsb	sy
 8004680:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004684:	f001 f8e6 	bl	8005854 <vPortExitCritical>

	return xAlreadyYielded;
 8004688:	68bb      	ldr	r3, [r7, #8]
}
 800468a:	4618      	mov	r0, r3
 800468c:	3710      	adds	r7, #16
 800468e:	46bd      	mov	sp, r7
 8004690:	bd80      	pop	{r7, pc}
 8004692:	bf00      	nop
 8004694:	20003e34 	.word	0x20003e34
 8004698:	20003e0c 	.word	0x20003e0c
 800469c:	20003dcc 	.word	0x20003dcc
 80046a0:	20003e14 	.word	0x20003e14
 80046a4:	2000393c 	.word	0x2000393c
 80046a8:	20003938 	.word	0x20003938
 80046ac:	20003e20 	.word	0x20003e20
 80046b0:	20003e1c 	.word	0x20003e1c
 80046b4:	e000ed04 	.word	0xe000ed04

080046b8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80046b8:	b480      	push	{r7}
 80046ba:	b083      	sub	sp, #12
 80046bc:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80046be:	4b05      	ldr	r3, [pc, #20]	; (80046d4 <xTaskGetTickCount+0x1c>)
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80046c4:	687b      	ldr	r3, [r7, #4]
}
 80046c6:	4618      	mov	r0, r3
 80046c8:	370c      	adds	r7, #12
 80046ca:	46bd      	mov	sp, r7
 80046cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d0:	4770      	bx	lr
 80046d2:	bf00      	nop
 80046d4:	20003e10 	.word	0x20003e10

080046d8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80046d8:	b580      	push	{r7, lr}
 80046da:	b086      	sub	sp, #24
 80046dc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80046de:	2300      	movs	r3, #0
 80046e0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80046e2:	4b4f      	ldr	r3, [pc, #316]	; (8004820 <xTaskIncrementTick+0x148>)
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	f040 808f 	bne.w	800480a <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80046ec:	4b4d      	ldr	r3, [pc, #308]	; (8004824 <xTaskIncrementTick+0x14c>)
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	3301      	adds	r3, #1
 80046f2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80046f4:	4a4b      	ldr	r2, [pc, #300]	; (8004824 <xTaskIncrementTick+0x14c>)
 80046f6:	693b      	ldr	r3, [r7, #16]
 80046f8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80046fa:	693b      	ldr	r3, [r7, #16]
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d120      	bne.n	8004742 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8004700:	4b49      	ldr	r3, [pc, #292]	; (8004828 <xTaskIncrementTick+0x150>)
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	2b00      	cmp	r3, #0
 8004708:	d00a      	beq.n	8004720 <xTaskIncrementTick+0x48>
	__asm volatile
 800470a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800470e:	f383 8811 	msr	BASEPRI, r3
 8004712:	f3bf 8f6f 	isb	sy
 8004716:	f3bf 8f4f 	dsb	sy
 800471a:	603b      	str	r3, [r7, #0]
}
 800471c:	bf00      	nop
 800471e:	e7fe      	b.n	800471e <xTaskIncrementTick+0x46>
 8004720:	4b41      	ldr	r3, [pc, #260]	; (8004828 <xTaskIncrementTick+0x150>)
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	60fb      	str	r3, [r7, #12]
 8004726:	4b41      	ldr	r3, [pc, #260]	; (800482c <xTaskIncrementTick+0x154>)
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	4a3f      	ldr	r2, [pc, #252]	; (8004828 <xTaskIncrementTick+0x150>)
 800472c:	6013      	str	r3, [r2, #0]
 800472e:	4a3f      	ldr	r2, [pc, #252]	; (800482c <xTaskIncrementTick+0x154>)
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	6013      	str	r3, [r2, #0]
 8004734:	4b3e      	ldr	r3, [pc, #248]	; (8004830 <xTaskIncrementTick+0x158>)
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	3301      	adds	r3, #1
 800473a:	4a3d      	ldr	r2, [pc, #244]	; (8004830 <xTaskIncrementTick+0x158>)
 800473c:	6013      	str	r3, [r2, #0]
 800473e:	f000 fadb 	bl	8004cf8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004742:	4b3c      	ldr	r3, [pc, #240]	; (8004834 <xTaskIncrementTick+0x15c>)
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	693a      	ldr	r2, [r7, #16]
 8004748:	429a      	cmp	r2, r3
 800474a:	d349      	bcc.n	80047e0 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800474c:	4b36      	ldr	r3, [pc, #216]	; (8004828 <xTaskIncrementTick+0x150>)
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	2b00      	cmp	r3, #0
 8004754:	d104      	bne.n	8004760 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004756:	4b37      	ldr	r3, [pc, #220]	; (8004834 <xTaskIncrementTick+0x15c>)
 8004758:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800475c:	601a      	str	r2, [r3, #0]
					break;
 800475e:	e03f      	b.n	80047e0 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004760:	4b31      	ldr	r3, [pc, #196]	; (8004828 <xTaskIncrementTick+0x150>)
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	68db      	ldr	r3, [r3, #12]
 8004766:	68db      	ldr	r3, [r3, #12]
 8004768:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800476a:	68bb      	ldr	r3, [r7, #8]
 800476c:	685b      	ldr	r3, [r3, #4]
 800476e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004770:	693a      	ldr	r2, [r7, #16]
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	429a      	cmp	r2, r3
 8004776:	d203      	bcs.n	8004780 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004778:	4a2e      	ldr	r2, [pc, #184]	; (8004834 <xTaskIncrementTick+0x15c>)
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800477e:	e02f      	b.n	80047e0 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004780:	68bb      	ldr	r3, [r7, #8]
 8004782:	3304      	adds	r3, #4
 8004784:	4618      	mov	r0, r3
 8004786:	f7fe ff79 	bl	800367c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800478a:	68bb      	ldr	r3, [r7, #8]
 800478c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800478e:	2b00      	cmp	r3, #0
 8004790:	d004      	beq.n	800479c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004792:	68bb      	ldr	r3, [r7, #8]
 8004794:	3318      	adds	r3, #24
 8004796:	4618      	mov	r0, r3
 8004798:	f7fe ff70 	bl	800367c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800479c:	68bb      	ldr	r3, [r7, #8]
 800479e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80047a0:	4b25      	ldr	r3, [pc, #148]	; (8004838 <xTaskIncrementTick+0x160>)
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	429a      	cmp	r2, r3
 80047a6:	d903      	bls.n	80047b0 <xTaskIncrementTick+0xd8>
 80047a8:	68bb      	ldr	r3, [r7, #8]
 80047aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047ac:	4a22      	ldr	r2, [pc, #136]	; (8004838 <xTaskIncrementTick+0x160>)
 80047ae:	6013      	str	r3, [r2, #0]
 80047b0:	68bb      	ldr	r3, [r7, #8]
 80047b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80047b4:	4613      	mov	r3, r2
 80047b6:	009b      	lsls	r3, r3, #2
 80047b8:	4413      	add	r3, r2
 80047ba:	009b      	lsls	r3, r3, #2
 80047bc:	4a1f      	ldr	r2, [pc, #124]	; (800483c <xTaskIncrementTick+0x164>)
 80047be:	441a      	add	r2, r3
 80047c0:	68bb      	ldr	r3, [r7, #8]
 80047c2:	3304      	adds	r3, #4
 80047c4:	4619      	mov	r1, r3
 80047c6:	4610      	mov	r0, r2
 80047c8:	f7fe fefb 	bl	80035c2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80047cc:	68bb      	ldr	r3, [r7, #8]
 80047ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80047d0:	4b1b      	ldr	r3, [pc, #108]	; (8004840 <xTaskIncrementTick+0x168>)
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047d6:	429a      	cmp	r2, r3
 80047d8:	d3b8      	bcc.n	800474c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80047da:	2301      	movs	r3, #1
 80047dc:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80047de:	e7b5      	b.n	800474c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80047e0:	4b17      	ldr	r3, [pc, #92]	; (8004840 <xTaskIncrementTick+0x168>)
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80047e6:	4915      	ldr	r1, [pc, #84]	; (800483c <xTaskIncrementTick+0x164>)
 80047e8:	4613      	mov	r3, r2
 80047ea:	009b      	lsls	r3, r3, #2
 80047ec:	4413      	add	r3, r2
 80047ee:	009b      	lsls	r3, r3, #2
 80047f0:	440b      	add	r3, r1
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	2b01      	cmp	r3, #1
 80047f6:	d901      	bls.n	80047fc <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80047f8:	2301      	movs	r3, #1
 80047fa:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80047fc:	4b11      	ldr	r3, [pc, #68]	; (8004844 <xTaskIncrementTick+0x16c>)
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	2b00      	cmp	r3, #0
 8004802:	d007      	beq.n	8004814 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8004804:	2301      	movs	r3, #1
 8004806:	617b      	str	r3, [r7, #20]
 8004808:	e004      	b.n	8004814 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800480a:	4b0f      	ldr	r3, [pc, #60]	; (8004848 <xTaskIncrementTick+0x170>)
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	3301      	adds	r3, #1
 8004810:	4a0d      	ldr	r2, [pc, #52]	; (8004848 <xTaskIncrementTick+0x170>)
 8004812:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8004814:	697b      	ldr	r3, [r7, #20]
}
 8004816:	4618      	mov	r0, r3
 8004818:	3718      	adds	r7, #24
 800481a:	46bd      	mov	sp, r7
 800481c:	bd80      	pop	{r7, pc}
 800481e:	bf00      	nop
 8004820:	20003e34 	.word	0x20003e34
 8004824:	20003e10 	.word	0x20003e10
 8004828:	20003dc4 	.word	0x20003dc4
 800482c:	20003dc8 	.word	0x20003dc8
 8004830:	20003e24 	.word	0x20003e24
 8004834:	20003e2c 	.word	0x20003e2c
 8004838:	20003e14 	.word	0x20003e14
 800483c:	2000393c 	.word	0x2000393c
 8004840:	20003938 	.word	0x20003938
 8004844:	20003e20 	.word	0x20003e20
 8004848:	20003e1c 	.word	0x20003e1c

0800484c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800484c:	b480      	push	{r7}
 800484e:	b085      	sub	sp, #20
 8004850:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004852:	4b2a      	ldr	r3, [pc, #168]	; (80048fc <vTaskSwitchContext+0xb0>)
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	2b00      	cmp	r3, #0
 8004858:	d003      	beq.n	8004862 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800485a:	4b29      	ldr	r3, [pc, #164]	; (8004900 <vTaskSwitchContext+0xb4>)
 800485c:	2201      	movs	r2, #1
 800485e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004860:	e046      	b.n	80048f0 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8004862:	4b27      	ldr	r3, [pc, #156]	; (8004900 <vTaskSwitchContext+0xb4>)
 8004864:	2200      	movs	r2, #0
 8004866:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004868:	4b26      	ldr	r3, [pc, #152]	; (8004904 <vTaskSwitchContext+0xb8>)
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	60fb      	str	r3, [r7, #12]
 800486e:	e010      	b.n	8004892 <vTaskSwitchContext+0x46>
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	2b00      	cmp	r3, #0
 8004874:	d10a      	bne.n	800488c <vTaskSwitchContext+0x40>
	__asm volatile
 8004876:	f04f 0350 	mov.w	r3, #80	; 0x50
 800487a:	f383 8811 	msr	BASEPRI, r3
 800487e:	f3bf 8f6f 	isb	sy
 8004882:	f3bf 8f4f 	dsb	sy
 8004886:	607b      	str	r3, [r7, #4]
}
 8004888:	bf00      	nop
 800488a:	e7fe      	b.n	800488a <vTaskSwitchContext+0x3e>
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	3b01      	subs	r3, #1
 8004890:	60fb      	str	r3, [r7, #12]
 8004892:	491d      	ldr	r1, [pc, #116]	; (8004908 <vTaskSwitchContext+0xbc>)
 8004894:	68fa      	ldr	r2, [r7, #12]
 8004896:	4613      	mov	r3, r2
 8004898:	009b      	lsls	r3, r3, #2
 800489a:	4413      	add	r3, r2
 800489c:	009b      	lsls	r3, r3, #2
 800489e:	440b      	add	r3, r1
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d0e4      	beq.n	8004870 <vTaskSwitchContext+0x24>
 80048a6:	68fa      	ldr	r2, [r7, #12]
 80048a8:	4613      	mov	r3, r2
 80048aa:	009b      	lsls	r3, r3, #2
 80048ac:	4413      	add	r3, r2
 80048ae:	009b      	lsls	r3, r3, #2
 80048b0:	4a15      	ldr	r2, [pc, #84]	; (8004908 <vTaskSwitchContext+0xbc>)
 80048b2:	4413      	add	r3, r2
 80048b4:	60bb      	str	r3, [r7, #8]
 80048b6:	68bb      	ldr	r3, [r7, #8]
 80048b8:	685b      	ldr	r3, [r3, #4]
 80048ba:	685a      	ldr	r2, [r3, #4]
 80048bc:	68bb      	ldr	r3, [r7, #8]
 80048be:	605a      	str	r2, [r3, #4]
 80048c0:	68bb      	ldr	r3, [r7, #8]
 80048c2:	685a      	ldr	r2, [r3, #4]
 80048c4:	68bb      	ldr	r3, [r7, #8]
 80048c6:	3308      	adds	r3, #8
 80048c8:	429a      	cmp	r2, r3
 80048ca:	d104      	bne.n	80048d6 <vTaskSwitchContext+0x8a>
 80048cc:	68bb      	ldr	r3, [r7, #8]
 80048ce:	685b      	ldr	r3, [r3, #4]
 80048d0:	685a      	ldr	r2, [r3, #4]
 80048d2:	68bb      	ldr	r3, [r7, #8]
 80048d4:	605a      	str	r2, [r3, #4]
 80048d6:	68bb      	ldr	r3, [r7, #8]
 80048d8:	685b      	ldr	r3, [r3, #4]
 80048da:	68db      	ldr	r3, [r3, #12]
 80048dc:	4a0b      	ldr	r2, [pc, #44]	; (800490c <vTaskSwitchContext+0xc0>)
 80048de:	6013      	str	r3, [r2, #0]
 80048e0:	4a08      	ldr	r2, [pc, #32]	; (8004904 <vTaskSwitchContext+0xb8>)
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80048e6:	4b09      	ldr	r3, [pc, #36]	; (800490c <vTaskSwitchContext+0xc0>)
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	3354      	adds	r3, #84	; 0x54
 80048ec:	4a08      	ldr	r2, [pc, #32]	; (8004910 <vTaskSwitchContext+0xc4>)
 80048ee:	6013      	str	r3, [r2, #0]
}
 80048f0:	bf00      	nop
 80048f2:	3714      	adds	r7, #20
 80048f4:	46bd      	mov	sp, r7
 80048f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048fa:	4770      	bx	lr
 80048fc:	20003e34 	.word	0x20003e34
 8004900:	20003e20 	.word	0x20003e20
 8004904:	20003e14 	.word	0x20003e14
 8004908:	2000393c 	.word	0x2000393c
 800490c:	20003938 	.word	0x20003938
 8004910:	20000010 	.word	0x20000010

08004914 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8004914:	b580      	push	{r7, lr}
 8004916:	b084      	sub	sp, #16
 8004918:	af00      	add	r7, sp, #0
 800491a:	6078      	str	r0, [r7, #4]
 800491c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	2b00      	cmp	r3, #0
 8004922:	d10a      	bne.n	800493a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8004924:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004928:	f383 8811 	msr	BASEPRI, r3
 800492c:	f3bf 8f6f 	isb	sy
 8004930:	f3bf 8f4f 	dsb	sy
 8004934:	60fb      	str	r3, [r7, #12]
}
 8004936:	bf00      	nop
 8004938:	e7fe      	b.n	8004938 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800493a:	4b07      	ldr	r3, [pc, #28]	; (8004958 <vTaskPlaceOnEventList+0x44>)
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	3318      	adds	r3, #24
 8004940:	4619      	mov	r1, r3
 8004942:	6878      	ldr	r0, [r7, #4]
 8004944:	f7fe fe61 	bl	800360a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004948:	2101      	movs	r1, #1
 800494a:	6838      	ldr	r0, [r7, #0]
 800494c:	f000 fa80 	bl	8004e50 <prvAddCurrentTaskToDelayedList>
}
 8004950:	bf00      	nop
 8004952:	3710      	adds	r7, #16
 8004954:	46bd      	mov	sp, r7
 8004956:	bd80      	pop	{r7, pc}
 8004958:	20003938 	.word	0x20003938

0800495c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800495c:	b580      	push	{r7, lr}
 800495e:	b086      	sub	sp, #24
 8004960:	af00      	add	r7, sp, #0
 8004962:	60f8      	str	r0, [r7, #12]
 8004964:	60b9      	str	r1, [r7, #8]
 8004966:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	2b00      	cmp	r3, #0
 800496c:	d10a      	bne.n	8004984 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800496e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004972:	f383 8811 	msr	BASEPRI, r3
 8004976:	f3bf 8f6f 	isb	sy
 800497a:	f3bf 8f4f 	dsb	sy
 800497e:	617b      	str	r3, [r7, #20]
}
 8004980:	bf00      	nop
 8004982:	e7fe      	b.n	8004982 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004984:	4b0a      	ldr	r3, [pc, #40]	; (80049b0 <vTaskPlaceOnEventListRestricted+0x54>)
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	3318      	adds	r3, #24
 800498a:	4619      	mov	r1, r3
 800498c:	68f8      	ldr	r0, [r7, #12]
 800498e:	f7fe fe18 	bl	80035c2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	2b00      	cmp	r3, #0
 8004996:	d002      	beq.n	800499e <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8004998:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800499c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800499e:	6879      	ldr	r1, [r7, #4]
 80049a0:	68b8      	ldr	r0, [r7, #8]
 80049a2:	f000 fa55 	bl	8004e50 <prvAddCurrentTaskToDelayedList>
	}
 80049a6:	bf00      	nop
 80049a8:	3718      	adds	r7, #24
 80049aa:	46bd      	mov	sp, r7
 80049ac:	bd80      	pop	{r7, pc}
 80049ae:	bf00      	nop
 80049b0:	20003938 	.word	0x20003938

080049b4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80049b4:	b580      	push	{r7, lr}
 80049b6:	b086      	sub	sp, #24
 80049b8:	af00      	add	r7, sp, #0
 80049ba:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	68db      	ldr	r3, [r3, #12]
 80049c0:	68db      	ldr	r3, [r3, #12]
 80049c2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80049c4:	693b      	ldr	r3, [r7, #16]
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d10a      	bne.n	80049e0 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80049ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049ce:	f383 8811 	msr	BASEPRI, r3
 80049d2:	f3bf 8f6f 	isb	sy
 80049d6:	f3bf 8f4f 	dsb	sy
 80049da:	60fb      	str	r3, [r7, #12]
}
 80049dc:	bf00      	nop
 80049de:	e7fe      	b.n	80049de <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80049e0:	693b      	ldr	r3, [r7, #16]
 80049e2:	3318      	adds	r3, #24
 80049e4:	4618      	mov	r0, r3
 80049e6:	f7fe fe49 	bl	800367c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80049ea:	4b1e      	ldr	r3, [pc, #120]	; (8004a64 <xTaskRemoveFromEventList+0xb0>)
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d11d      	bne.n	8004a2e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80049f2:	693b      	ldr	r3, [r7, #16]
 80049f4:	3304      	adds	r3, #4
 80049f6:	4618      	mov	r0, r3
 80049f8:	f7fe fe40 	bl	800367c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80049fc:	693b      	ldr	r3, [r7, #16]
 80049fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a00:	4b19      	ldr	r3, [pc, #100]	; (8004a68 <xTaskRemoveFromEventList+0xb4>)
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	429a      	cmp	r2, r3
 8004a06:	d903      	bls.n	8004a10 <xTaskRemoveFromEventList+0x5c>
 8004a08:	693b      	ldr	r3, [r7, #16]
 8004a0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a0c:	4a16      	ldr	r2, [pc, #88]	; (8004a68 <xTaskRemoveFromEventList+0xb4>)
 8004a0e:	6013      	str	r3, [r2, #0]
 8004a10:	693b      	ldr	r3, [r7, #16]
 8004a12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a14:	4613      	mov	r3, r2
 8004a16:	009b      	lsls	r3, r3, #2
 8004a18:	4413      	add	r3, r2
 8004a1a:	009b      	lsls	r3, r3, #2
 8004a1c:	4a13      	ldr	r2, [pc, #76]	; (8004a6c <xTaskRemoveFromEventList+0xb8>)
 8004a1e:	441a      	add	r2, r3
 8004a20:	693b      	ldr	r3, [r7, #16]
 8004a22:	3304      	adds	r3, #4
 8004a24:	4619      	mov	r1, r3
 8004a26:	4610      	mov	r0, r2
 8004a28:	f7fe fdcb 	bl	80035c2 <vListInsertEnd>
 8004a2c:	e005      	b.n	8004a3a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004a2e:	693b      	ldr	r3, [r7, #16]
 8004a30:	3318      	adds	r3, #24
 8004a32:	4619      	mov	r1, r3
 8004a34:	480e      	ldr	r0, [pc, #56]	; (8004a70 <xTaskRemoveFromEventList+0xbc>)
 8004a36:	f7fe fdc4 	bl	80035c2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004a3a:	693b      	ldr	r3, [r7, #16]
 8004a3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a3e:	4b0d      	ldr	r3, [pc, #52]	; (8004a74 <xTaskRemoveFromEventList+0xc0>)
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a44:	429a      	cmp	r2, r3
 8004a46:	d905      	bls.n	8004a54 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8004a48:	2301      	movs	r3, #1
 8004a4a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8004a4c:	4b0a      	ldr	r3, [pc, #40]	; (8004a78 <xTaskRemoveFromEventList+0xc4>)
 8004a4e:	2201      	movs	r2, #1
 8004a50:	601a      	str	r2, [r3, #0]
 8004a52:	e001      	b.n	8004a58 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8004a54:	2300      	movs	r3, #0
 8004a56:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8004a58:	697b      	ldr	r3, [r7, #20]
}
 8004a5a:	4618      	mov	r0, r3
 8004a5c:	3718      	adds	r7, #24
 8004a5e:	46bd      	mov	sp, r7
 8004a60:	bd80      	pop	{r7, pc}
 8004a62:	bf00      	nop
 8004a64:	20003e34 	.word	0x20003e34
 8004a68:	20003e14 	.word	0x20003e14
 8004a6c:	2000393c 	.word	0x2000393c
 8004a70:	20003dcc 	.word	0x20003dcc
 8004a74:	20003938 	.word	0x20003938
 8004a78:	20003e20 	.word	0x20003e20

08004a7c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004a7c:	b480      	push	{r7}
 8004a7e:	b083      	sub	sp, #12
 8004a80:	af00      	add	r7, sp, #0
 8004a82:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004a84:	4b06      	ldr	r3, [pc, #24]	; (8004aa0 <vTaskInternalSetTimeOutState+0x24>)
 8004a86:	681a      	ldr	r2, [r3, #0]
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004a8c:	4b05      	ldr	r3, [pc, #20]	; (8004aa4 <vTaskInternalSetTimeOutState+0x28>)
 8004a8e:	681a      	ldr	r2, [r3, #0]
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	605a      	str	r2, [r3, #4]
}
 8004a94:	bf00      	nop
 8004a96:	370c      	adds	r7, #12
 8004a98:	46bd      	mov	sp, r7
 8004a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a9e:	4770      	bx	lr
 8004aa0:	20003e24 	.word	0x20003e24
 8004aa4:	20003e10 	.word	0x20003e10

08004aa8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004aa8:	b580      	push	{r7, lr}
 8004aaa:	b088      	sub	sp, #32
 8004aac:	af00      	add	r7, sp, #0
 8004aae:	6078      	str	r0, [r7, #4]
 8004ab0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d10a      	bne.n	8004ace <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8004ab8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004abc:	f383 8811 	msr	BASEPRI, r3
 8004ac0:	f3bf 8f6f 	isb	sy
 8004ac4:	f3bf 8f4f 	dsb	sy
 8004ac8:	613b      	str	r3, [r7, #16]
}
 8004aca:	bf00      	nop
 8004acc:	e7fe      	b.n	8004acc <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8004ace:	683b      	ldr	r3, [r7, #0]
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d10a      	bne.n	8004aea <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8004ad4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ad8:	f383 8811 	msr	BASEPRI, r3
 8004adc:	f3bf 8f6f 	isb	sy
 8004ae0:	f3bf 8f4f 	dsb	sy
 8004ae4:	60fb      	str	r3, [r7, #12]
}
 8004ae6:	bf00      	nop
 8004ae8:	e7fe      	b.n	8004ae8 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8004aea:	f000 fe83 	bl	80057f4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8004aee:	4b1d      	ldr	r3, [pc, #116]	; (8004b64 <xTaskCheckForTimeOut+0xbc>)
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	685b      	ldr	r3, [r3, #4]
 8004af8:	69ba      	ldr	r2, [r7, #24]
 8004afa:	1ad3      	subs	r3, r2, r3
 8004afc:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8004afe:	683b      	ldr	r3, [r7, #0]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004b06:	d102      	bne.n	8004b0e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004b08:	2300      	movs	r3, #0
 8004b0a:	61fb      	str	r3, [r7, #28]
 8004b0c:	e023      	b.n	8004b56 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681a      	ldr	r2, [r3, #0]
 8004b12:	4b15      	ldr	r3, [pc, #84]	; (8004b68 <xTaskCheckForTimeOut+0xc0>)
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	429a      	cmp	r2, r3
 8004b18:	d007      	beq.n	8004b2a <xTaskCheckForTimeOut+0x82>
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	685b      	ldr	r3, [r3, #4]
 8004b1e:	69ba      	ldr	r2, [r7, #24]
 8004b20:	429a      	cmp	r2, r3
 8004b22:	d302      	bcc.n	8004b2a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004b24:	2301      	movs	r3, #1
 8004b26:	61fb      	str	r3, [r7, #28]
 8004b28:	e015      	b.n	8004b56 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004b2a:	683b      	ldr	r3, [r7, #0]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	697a      	ldr	r2, [r7, #20]
 8004b30:	429a      	cmp	r2, r3
 8004b32:	d20b      	bcs.n	8004b4c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8004b34:	683b      	ldr	r3, [r7, #0]
 8004b36:	681a      	ldr	r2, [r3, #0]
 8004b38:	697b      	ldr	r3, [r7, #20]
 8004b3a:	1ad2      	subs	r2, r2, r3
 8004b3c:	683b      	ldr	r3, [r7, #0]
 8004b3e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004b40:	6878      	ldr	r0, [r7, #4]
 8004b42:	f7ff ff9b 	bl	8004a7c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8004b46:	2300      	movs	r3, #0
 8004b48:	61fb      	str	r3, [r7, #28]
 8004b4a:	e004      	b.n	8004b56 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8004b4c:	683b      	ldr	r3, [r7, #0]
 8004b4e:	2200      	movs	r2, #0
 8004b50:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8004b52:	2301      	movs	r3, #1
 8004b54:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8004b56:	f000 fe7d 	bl	8005854 <vPortExitCritical>

	return xReturn;
 8004b5a:	69fb      	ldr	r3, [r7, #28]
}
 8004b5c:	4618      	mov	r0, r3
 8004b5e:	3720      	adds	r7, #32
 8004b60:	46bd      	mov	sp, r7
 8004b62:	bd80      	pop	{r7, pc}
 8004b64:	20003e10 	.word	0x20003e10
 8004b68:	20003e24 	.word	0x20003e24

08004b6c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004b6c:	b480      	push	{r7}
 8004b6e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8004b70:	4b03      	ldr	r3, [pc, #12]	; (8004b80 <vTaskMissedYield+0x14>)
 8004b72:	2201      	movs	r2, #1
 8004b74:	601a      	str	r2, [r3, #0]
}
 8004b76:	bf00      	nop
 8004b78:	46bd      	mov	sp, r7
 8004b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b7e:	4770      	bx	lr
 8004b80:	20003e20 	.word	0x20003e20

08004b84 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004b84:	b580      	push	{r7, lr}
 8004b86:	b082      	sub	sp, #8
 8004b88:	af00      	add	r7, sp, #0
 8004b8a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004b8c:	f000 f852 	bl	8004c34 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004b90:	4b06      	ldr	r3, [pc, #24]	; (8004bac <prvIdleTask+0x28>)
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	2b01      	cmp	r3, #1
 8004b96:	d9f9      	bls.n	8004b8c <prvIdleTask+0x8>
			{
				taskYIELD();
 8004b98:	4b05      	ldr	r3, [pc, #20]	; (8004bb0 <prvIdleTask+0x2c>)
 8004b9a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004b9e:	601a      	str	r2, [r3, #0]
 8004ba0:	f3bf 8f4f 	dsb	sy
 8004ba4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004ba8:	e7f0      	b.n	8004b8c <prvIdleTask+0x8>
 8004baa:	bf00      	nop
 8004bac:	2000393c 	.word	0x2000393c
 8004bb0:	e000ed04 	.word	0xe000ed04

08004bb4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004bb4:	b580      	push	{r7, lr}
 8004bb6:	b082      	sub	sp, #8
 8004bb8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004bba:	2300      	movs	r3, #0
 8004bbc:	607b      	str	r3, [r7, #4]
 8004bbe:	e00c      	b.n	8004bda <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004bc0:	687a      	ldr	r2, [r7, #4]
 8004bc2:	4613      	mov	r3, r2
 8004bc4:	009b      	lsls	r3, r3, #2
 8004bc6:	4413      	add	r3, r2
 8004bc8:	009b      	lsls	r3, r3, #2
 8004bca:	4a12      	ldr	r2, [pc, #72]	; (8004c14 <prvInitialiseTaskLists+0x60>)
 8004bcc:	4413      	add	r3, r2
 8004bce:	4618      	mov	r0, r3
 8004bd0:	f7fe fcca 	bl	8003568 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	3301      	adds	r3, #1
 8004bd8:	607b      	str	r3, [r7, #4]
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	2b37      	cmp	r3, #55	; 0x37
 8004bde:	d9ef      	bls.n	8004bc0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004be0:	480d      	ldr	r0, [pc, #52]	; (8004c18 <prvInitialiseTaskLists+0x64>)
 8004be2:	f7fe fcc1 	bl	8003568 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004be6:	480d      	ldr	r0, [pc, #52]	; (8004c1c <prvInitialiseTaskLists+0x68>)
 8004be8:	f7fe fcbe 	bl	8003568 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004bec:	480c      	ldr	r0, [pc, #48]	; (8004c20 <prvInitialiseTaskLists+0x6c>)
 8004bee:	f7fe fcbb 	bl	8003568 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004bf2:	480c      	ldr	r0, [pc, #48]	; (8004c24 <prvInitialiseTaskLists+0x70>)
 8004bf4:	f7fe fcb8 	bl	8003568 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004bf8:	480b      	ldr	r0, [pc, #44]	; (8004c28 <prvInitialiseTaskLists+0x74>)
 8004bfa:	f7fe fcb5 	bl	8003568 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004bfe:	4b0b      	ldr	r3, [pc, #44]	; (8004c2c <prvInitialiseTaskLists+0x78>)
 8004c00:	4a05      	ldr	r2, [pc, #20]	; (8004c18 <prvInitialiseTaskLists+0x64>)
 8004c02:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004c04:	4b0a      	ldr	r3, [pc, #40]	; (8004c30 <prvInitialiseTaskLists+0x7c>)
 8004c06:	4a05      	ldr	r2, [pc, #20]	; (8004c1c <prvInitialiseTaskLists+0x68>)
 8004c08:	601a      	str	r2, [r3, #0]
}
 8004c0a:	bf00      	nop
 8004c0c:	3708      	adds	r7, #8
 8004c0e:	46bd      	mov	sp, r7
 8004c10:	bd80      	pop	{r7, pc}
 8004c12:	bf00      	nop
 8004c14:	2000393c 	.word	0x2000393c
 8004c18:	20003d9c 	.word	0x20003d9c
 8004c1c:	20003db0 	.word	0x20003db0
 8004c20:	20003dcc 	.word	0x20003dcc
 8004c24:	20003de0 	.word	0x20003de0
 8004c28:	20003df8 	.word	0x20003df8
 8004c2c:	20003dc4 	.word	0x20003dc4
 8004c30:	20003dc8 	.word	0x20003dc8

08004c34 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004c34:	b580      	push	{r7, lr}
 8004c36:	b082      	sub	sp, #8
 8004c38:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004c3a:	e019      	b.n	8004c70 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004c3c:	f000 fdda 	bl	80057f4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004c40:	4b10      	ldr	r3, [pc, #64]	; (8004c84 <prvCheckTasksWaitingTermination+0x50>)
 8004c42:	68db      	ldr	r3, [r3, #12]
 8004c44:	68db      	ldr	r3, [r3, #12]
 8004c46:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	3304      	adds	r3, #4
 8004c4c:	4618      	mov	r0, r3
 8004c4e:	f7fe fd15 	bl	800367c <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004c52:	4b0d      	ldr	r3, [pc, #52]	; (8004c88 <prvCheckTasksWaitingTermination+0x54>)
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	3b01      	subs	r3, #1
 8004c58:	4a0b      	ldr	r2, [pc, #44]	; (8004c88 <prvCheckTasksWaitingTermination+0x54>)
 8004c5a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004c5c:	4b0b      	ldr	r3, [pc, #44]	; (8004c8c <prvCheckTasksWaitingTermination+0x58>)
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	3b01      	subs	r3, #1
 8004c62:	4a0a      	ldr	r2, [pc, #40]	; (8004c8c <prvCheckTasksWaitingTermination+0x58>)
 8004c64:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004c66:	f000 fdf5 	bl	8005854 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004c6a:	6878      	ldr	r0, [r7, #4]
 8004c6c:	f000 f810 	bl	8004c90 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004c70:	4b06      	ldr	r3, [pc, #24]	; (8004c8c <prvCheckTasksWaitingTermination+0x58>)
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d1e1      	bne.n	8004c3c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004c78:	bf00      	nop
 8004c7a:	bf00      	nop
 8004c7c:	3708      	adds	r7, #8
 8004c7e:	46bd      	mov	sp, r7
 8004c80:	bd80      	pop	{r7, pc}
 8004c82:	bf00      	nop
 8004c84:	20003de0 	.word	0x20003de0
 8004c88:	20003e0c 	.word	0x20003e0c
 8004c8c:	20003df4 	.word	0x20003df4

08004c90 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004c90:	b580      	push	{r7, lr}
 8004c92:	b084      	sub	sp, #16
 8004c94:	af00      	add	r7, sp, #0
 8004c96:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	3354      	adds	r3, #84	; 0x54
 8004c9c:	4618      	mov	r0, r3
 8004c9e:	f001 f8ff 	bl	8005ea0 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d108      	bne.n	8004cbe <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cb0:	4618      	mov	r0, r3
 8004cb2:	f000 ff8d 	bl	8005bd0 <vPortFree>
				vPortFree( pxTCB );
 8004cb6:	6878      	ldr	r0, [r7, #4]
 8004cb8:	f000 ff8a 	bl	8005bd0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004cbc:	e018      	b.n	8004cf0 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8004cc4:	2b01      	cmp	r3, #1
 8004cc6:	d103      	bne.n	8004cd0 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8004cc8:	6878      	ldr	r0, [r7, #4]
 8004cca:	f000 ff81 	bl	8005bd0 <vPortFree>
	}
 8004cce:	e00f      	b.n	8004cf0 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8004cd6:	2b02      	cmp	r3, #2
 8004cd8:	d00a      	beq.n	8004cf0 <prvDeleteTCB+0x60>
	__asm volatile
 8004cda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cde:	f383 8811 	msr	BASEPRI, r3
 8004ce2:	f3bf 8f6f 	isb	sy
 8004ce6:	f3bf 8f4f 	dsb	sy
 8004cea:	60fb      	str	r3, [r7, #12]
}
 8004cec:	bf00      	nop
 8004cee:	e7fe      	b.n	8004cee <prvDeleteTCB+0x5e>
	}
 8004cf0:	bf00      	nop
 8004cf2:	3710      	adds	r7, #16
 8004cf4:	46bd      	mov	sp, r7
 8004cf6:	bd80      	pop	{r7, pc}

08004cf8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004cf8:	b480      	push	{r7}
 8004cfa:	b083      	sub	sp, #12
 8004cfc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004cfe:	4b0c      	ldr	r3, [pc, #48]	; (8004d30 <prvResetNextTaskUnblockTime+0x38>)
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d104      	bne.n	8004d12 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004d08:	4b0a      	ldr	r3, [pc, #40]	; (8004d34 <prvResetNextTaskUnblockTime+0x3c>)
 8004d0a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004d0e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004d10:	e008      	b.n	8004d24 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004d12:	4b07      	ldr	r3, [pc, #28]	; (8004d30 <prvResetNextTaskUnblockTime+0x38>)
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	68db      	ldr	r3, [r3, #12]
 8004d18:	68db      	ldr	r3, [r3, #12]
 8004d1a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	685b      	ldr	r3, [r3, #4]
 8004d20:	4a04      	ldr	r2, [pc, #16]	; (8004d34 <prvResetNextTaskUnblockTime+0x3c>)
 8004d22:	6013      	str	r3, [r2, #0]
}
 8004d24:	bf00      	nop
 8004d26:	370c      	adds	r7, #12
 8004d28:	46bd      	mov	sp, r7
 8004d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d2e:	4770      	bx	lr
 8004d30:	20003dc4 	.word	0x20003dc4
 8004d34:	20003e2c 	.word	0x20003e2c

08004d38 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004d38:	b480      	push	{r7}
 8004d3a:	b083      	sub	sp, #12
 8004d3c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004d3e:	4b0b      	ldr	r3, [pc, #44]	; (8004d6c <xTaskGetSchedulerState+0x34>)
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d102      	bne.n	8004d4c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8004d46:	2301      	movs	r3, #1
 8004d48:	607b      	str	r3, [r7, #4]
 8004d4a:	e008      	b.n	8004d5e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004d4c:	4b08      	ldr	r3, [pc, #32]	; (8004d70 <xTaskGetSchedulerState+0x38>)
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d102      	bne.n	8004d5a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004d54:	2302      	movs	r3, #2
 8004d56:	607b      	str	r3, [r7, #4]
 8004d58:	e001      	b.n	8004d5e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8004d5a:	2300      	movs	r3, #0
 8004d5c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8004d5e:	687b      	ldr	r3, [r7, #4]
	}
 8004d60:	4618      	mov	r0, r3
 8004d62:	370c      	adds	r7, #12
 8004d64:	46bd      	mov	sp, r7
 8004d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d6a:	4770      	bx	lr
 8004d6c:	20003e18 	.word	0x20003e18
 8004d70:	20003e34 	.word	0x20003e34

08004d74 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004d74:	b580      	push	{r7, lr}
 8004d76:	b086      	sub	sp, #24
 8004d78:	af00      	add	r7, sp, #0
 8004d7a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004d80:	2300      	movs	r3, #0
 8004d82:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d056      	beq.n	8004e38 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8004d8a:	4b2e      	ldr	r3, [pc, #184]	; (8004e44 <xTaskPriorityDisinherit+0xd0>)
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	693a      	ldr	r2, [r7, #16]
 8004d90:	429a      	cmp	r2, r3
 8004d92:	d00a      	beq.n	8004daa <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8004d94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d98:	f383 8811 	msr	BASEPRI, r3
 8004d9c:	f3bf 8f6f 	isb	sy
 8004da0:	f3bf 8f4f 	dsb	sy
 8004da4:	60fb      	str	r3, [r7, #12]
}
 8004da6:	bf00      	nop
 8004da8:	e7fe      	b.n	8004da8 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8004daa:	693b      	ldr	r3, [r7, #16]
 8004dac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d10a      	bne.n	8004dc8 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8004db2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004db6:	f383 8811 	msr	BASEPRI, r3
 8004dba:	f3bf 8f6f 	isb	sy
 8004dbe:	f3bf 8f4f 	dsb	sy
 8004dc2:	60bb      	str	r3, [r7, #8]
}
 8004dc4:	bf00      	nop
 8004dc6:	e7fe      	b.n	8004dc6 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8004dc8:	693b      	ldr	r3, [r7, #16]
 8004dca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004dcc:	1e5a      	subs	r2, r3, #1
 8004dce:	693b      	ldr	r3, [r7, #16]
 8004dd0:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004dd2:	693b      	ldr	r3, [r7, #16]
 8004dd4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004dd6:	693b      	ldr	r3, [r7, #16]
 8004dd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004dda:	429a      	cmp	r2, r3
 8004ddc:	d02c      	beq.n	8004e38 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004dde:	693b      	ldr	r3, [r7, #16]
 8004de0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d128      	bne.n	8004e38 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004de6:	693b      	ldr	r3, [r7, #16]
 8004de8:	3304      	adds	r3, #4
 8004dea:	4618      	mov	r0, r3
 8004dec:	f7fe fc46 	bl	800367c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004df0:	693b      	ldr	r3, [r7, #16]
 8004df2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004df4:	693b      	ldr	r3, [r7, #16]
 8004df6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004df8:	693b      	ldr	r3, [r7, #16]
 8004dfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dfc:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004e00:	693b      	ldr	r3, [r7, #16]
 8004e02:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8004e04:	693b      	ldr	r3, [r7, #16]
 8004e06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e08:	4b0f      	ldr	r3, [pc, #60]	; (8004e48 <xTaskPriorityDisinherit+0xd4>)
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	429a      	cmp	r2, r3
 8004e0e:	d903      	bls.n	8004e18 <xTaskPriorityDisinherit+0xa4>
 8004e10:	693b      	ldr	r3, [r7, #16]
 8004e12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e14:	4a0c      	ldr	r2, [pc, #48]	; (8004e48 <xTaskPriorityDisinherit+0xd4>)
 8004e16:	6013      	str	r3, [r2, #0]
 8004e18:	693b      	ldr	r3, [r7, #16]
 8004e1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e1c:	4613      	mov	r3, r2
 8004e1e:	009b      	lsls	r3, r3, #2
 8004e20:	4413      	add	r3, r2
 8004e22:	009b      	lsls	r3, r3, #2
 8004e24:	4a09      	ldr	r2, [pc, #36]	; (8004e4c <xTaskPriorityDisinherit+0xd8>)
 8004e26:	441a      	add	r2, r3
 8004e28:	693b      	ldr	r3, [r7, #16]
 8004e2a:	3304      	adds	r3, #4
 8004e2c:	4619      	mov	r1, r3
 8004e2e:	4610      	mov	r0, r2
 8004e30:	f7fe fbc7 	bl	80035c2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8004e34:	2301      	movs	r3, #1
 8004e36:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004e38:	697b      	ldr	r3, [r7, #20]
	}
 8004e3a:	4618      	mov	r0, r3
 8004e3c:	3718      	adds	r7, #24
 8004e3e:	46bd      	mov	sp, r7
 8004e40:	bd80      	pop	{r7, pc}
 8004e42:	bf00      	nop
 8004e44:	20003938 	.word	0x20003938
 8004e48:	20003e14 	.word	0x20003e14
 8004e4c:	2000393c 	.word	0x2000393c

08004e50 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004e50:	b580      	push	{r7, lr}
 8004e52:	b084      	sub	sp, #16
 8004e54:	af00      	add	r7, sp, #0
 8004e56:	6078      	str	r0, [r7, #4]
 8004e58:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004e5a:	4b21      	ldr	r3, [pc, #132]	; (8004ee0 <prvAddCurrentTaskToDelayedList+0x90>)
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004e60:	4b20      	ldr	r3, [pc, #128]	; (8004ee4 <prvAddCurrentTaskToDelayedList+0x94>)
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	3304      	adds	r3, #4
 8004e66:	4618      	mov	r0, r3
 8004e68:	f7fe fc08 	bl	800367c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004e72:	d10a      	bne.n	8004e8a <prvAddCurrentTaskToDelayedList+0x3a>
 8004e74:	683b      	ldr	r3, [r7, #0]
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d007      	beq.n	8004e8a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004e7a:	4b1a      	ldr	r3, [pc, #104]	; (8004ee4 <prvAddCurrentTaskToDelayedList+0x94>)
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	3304      	adds	r3, #4
 8004e80:	4619      	mov	r1, r3
 8004e82:	4819      	ldr	r0, [pc, #100]	; (8004ee8 <prvAddCurrentTaskToDelayedList+0x98>)
 8004e84:	f7fe fb9d 	bl	80035c2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004e88:	e026      	b.n	8004ed8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004e8a:	68fa      	ldr	r2, [r7, #12]
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	4413      	add	r3, r2
 8004e90:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004e92:	4b14      	ldr	r3, [pc, #80]	; (8004ee4 <prvAddCurrentTaskToDelayedList+0x94>)
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	68ba      	ldr	r2, [r7, #8]
 8004e98:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004e9a:	68ba      	ldr	r2, [r7, #8]
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	429a      	cmp	r2, r3
 8004ea0:	d209      	bcs.n	8004eb6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004ea2:	4b12      	ldr	r3, [pc, #72]	; (8004eec <prvAddCurrentTaskToDelayedList+0x9c>)
 8004ea4:	681a      	ldr	r2, [r3, #0]
 8004ea6:	4b0f      	ldr	r3, [pc, #60]	; (8004ee4 <prvAddCurrentTaskToDelayedList+0x94>)
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	3304      	adds	r3, #4
 8004eac:	4619      	mov	r1, r3
 8004eae:	4610      	mov	r0, r2
 8004eb0:	f7fe fbab 	bl	800360a <vListInsert>
}
 8004eb4:	e010      	b.n	8004ed8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004eb6:	4b0e      	ldr	r3, [pc, #56]	; (8004ef0 <prvAddCurrentTaskToDelayedList+0xa0>)
 8004eb8:	681a      	ldr	r2, [r3, #0]
 8004eba:	4b0a      	ldr	r3, [pc, #40]	; (8004ee4 <prvAddCurrentTaskToDelayedList+0x94>)
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	3304      	adds	r3, #4
 8004ec0:	4619      	mov	r1, r3
 8004ec2:	4610      	mov	r0, r2
 8004ec4:	f7fe fba1 	bl	800360a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004ec8:	4b0a      	ldr	r3, [pc, #40]	; (8004ef4 <prvAddCurrentTaskToDelayedList+0xa4>)
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	68ba      	ldr	r2, [r7, #8]
 8004ece:	429a      	cmp	r2, r3
 8004ed0:	d202      	bcs.n	8004ed8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8004ed2:	4a08      	ldr	r2, [pc, #32]	; (8004ef4 <prvAddCurrentTaskToDelayedList+0xa4>)
 8004ed4:	68bb      	ldr	r3, [r7, #8]
 8004ed6:	6013      	str	r3, [r2, #0]
}
 8004ed8:	bf00      	nop
 8004eda:	3710      	adds	r7, #16
 8004edc:	46bd      	mov	sp, r7
 8004ede:	bd80      	pop	{r7, pc}
 8004ee0:	20003e10 	.word	0x20003e10
 8004ee4:	20003938 	.word	0x20003938
 8004ee8:	20003df8 	.word	0x20003df8
 8004eec:	20003dc8 	.word	0x20003dc8
 8004ef0:	20003dc4 	.word	0x20003dc4
 8004ef4:	20003e2c 	.word	0x20003e2c

08004ef8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8004ef8:	b580      	push	{r7, lr}
 8004efa:	b08a      	sub	sp, #40	; 0x28
 8004efc:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8004efe:	2300      	movs	r3, #0
 8004f00:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8004f02:	f000 fb07 	bl	8005514 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8004f06:	4b1c      	ldr	r3, [pc, #112]	; (8004f78 <xTimerCreateTimerTask+0x80>)
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d021      	beq.n	8004f52 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8004f0e:	2300      	movs	r3, #0
 8004f10:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8004f12:	2300      	movs	r3, #0
 8004f14:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8004f16:	1d3a      	adds	r2, r7, #4
 8004f18:	f107 0108 	add.w	r1, r7, #8
 8004f1c:	f107 030c 	add.w	r3, r7, #12
 8004f20:	4618      	mov	r0, r3
 8004f22:	f7fe fb07 	bl	8003534 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8004f26:	6879      	ldr	r1, [r7, #4]
 8004f28:	68bb      	ldr	r3, [r7, #8]
 8004f2a:	68fa      	ldr	r2, [r7, #12]
 8004f2c:	9202      	str	r2, [sp, #8]
 8004f2e:	9301      	str	r3, [sp, #4]
 8004f30:	2302      	movs	r3, #2
 8004f32:	9300      	str	r3, [sp, #0]
 8004f34:	2300      	movs	r3, #0
 8004f36:	460a      	mov	r2, r1
 8004f38:	4910      	ldr	r1, [pc, #64]	; (8004f7c <xTimerCreateTimerTask+0x84>)
 8004f3a:	4811      	ldr	r0, [pc, #68]	; (8004f80 <xTimerCreateTimerTask+0x88>)
 8004f3c:	f7ff f8b4 	bl	80040a8 <xTaskCreateStatic>
 8004f40:	4603      	mov	r3, r0
 8004f42:	4a10      	ldr	r2, [pc, #64]	; (8004f84 <xTimerCreateTimerTask+0x8c>)
 8004f44:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8004f46:	4b0f      	ldr	r3, [pc, #60]	; (8004f84 <xTimerCreateTimerTask+0x8c>)
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d001      	beq.n	8004f52 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8004f4e:	2301      	movs	r3, #1
 8004f50:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8004f52:	697b      	ldr	r3, [r7, #20]
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d10a      	bne.n	8004f6e <xTimerCreateTimerTask+0x76>
	__asm volatile
 8004f58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f5c:	f383 8811 	msr	BASEPRI, r3
 8004f60:	f3bf 8f6f 	isb	sy
 8004f64:	f3bf 8f4f 	dsb	sy
 8004f68:	613b      	str	r3, [r7, #16]
}
 8004f6a:	bf00      	nop
 8004f6c:	e7fe      	b.n	8004f6c <xTimerCreateTimerTask+0x74>
	return xReturn;
 8004f6e:	697b      	ldr	r3, [r7, #20]
}
 8004f70:	4618      	mov	r0, r3
 8004f72:	3718      	adds	r7, #24
 8004f74:	46bd      	mov	sp, r7
 8004f76:	bd80      	pop	{r7, pc}
 8004f78:	20003e68 	.word	0x20003e68
 8004f7c:	08006034 	.word	0x08006034
 8004f80:	080050bd 	.word	0x080050bd
 8004f84:	20003e6c 	.word	0x20003e6c

08004f88 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8004f88:	b580      	push	{r7, lr}
 8004f8a:	b08a      	sub	sp, #40	; 0x28
 8004f8c:	af00      	add	r7, sp, #0
 8004f8e:	60f8      	str	r0, [r7, #12]
 8004f90:	60b9      	str	r1, [r7, #8]
 8004f92:	607a      	str	r2, [r7, #4]
 8004f94:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8004f96:	2300      	movs	r3, #0
 8004f98:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d10a      	bne.n	8004fb6 <xTimerGenericCommand+0x2e>
	__asm volatile
 8004fa0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fa4:	f383 8811 	msr	BASEPRI, r3
 8004fa8:	f3bf 8f6f 	isb	sy
 8004fac:	f3bf 8f4f 	dsb	sy
 8004fb0:	623b      	str	r3, [r7, #32]
}
 8004fb2:	bf00      	nop
 8004fb4:	e7fe      	b.n	8004fb4 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8004fb6:	4b1a      	ldr	r3, [pc, #104]	; (8005020 <xTimerGenericCommand+0x98>)
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d02a      	beq.n	8005014 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8004fbe:	68bb      	ldr	r3, [r7, #8]
 8004fc0:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8004fca:	68bb      	ldr	r3, [r7, #8]
 8004fcc:	2b05      	cmp	r3, #5
 8004fce:	dc18      	bgt.n	8005002 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8004fd0:	f7ff feb2 	bl	8004d38 <xTaskGetSchedulerState>
 8004fd4:	4603      	mov	r3, r0
 8004fd6:	2b02      	cmp	r3, #2
 8004fd8:	d109      	bne.n	8004fee <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8004fda:	4b11      	ldr	r3, [pc, #68]	; (8005020 <xTimerGenericCommand+0x98>)
 8004fdc:	6818      	ldr	r0, [r3, #0]
 8004fde:	f107 0110 	add.w	r1, r7, #16
 8004fe2:	2300      	movs	r3, #0
 8004fe4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004fe6:	f7fe fc77 	bl	80038d8 <xQueueGenericSend>
 8004fea:	6278      	str	r0, [r7, #36]	; 0x24
 8004fec:	e012      	b.n	8005014 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8004fee:	4b0c      	ldr	r3, [pc, #48]	; (8005020 <xTimerGenericCommand+0x98>)
 8004ff0:	6818      	ldr	r0, [r3, #0]
 8004ff2:	f107 0110 	add.w	r1, r7, #16
 8004ff6:	2300      	movs	r3, #0
 8004ff8:	2200      	movs	r2, #0
 8004ffa:	f7fe fc6d 	bl	80038d8 <xQueueGenericSend>
 8004ffe:	6278      	str	r0, [r7, #36]	; 0x24
 8005000:	e008      	b.n	8005014 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8005002:	4b07      	ldr	r3, [pc, #28]	; (8005020 <xTimerGenericCommand+0x98>)
 8005004:	6818      	ldr	r0, [r3, #0]
 8005006:	f107 0110 	add.w	r1, r7, #16
 800500a:	2300      	movs	r3, #0
 800500c:	683a      	ldr	r2, [r7, #0]
 800500e:	f7fe fd61 	bl	8003ad4 <xQueueGenericSendFromISR>
 8005012:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8005014:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005016:	4618      	mov	r0, r3
 8005018:	3728      	adds	r7, #40	; 0x28
 800501a:	46bd      	mov	sp, r7
 800501c:	bd80      	pop	{r7, pc}
 800501e:	bf00      	nop
 8005020:	20003e68 	.word	0x20003e68

08005024 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8005024:	b580      	push	{r7, lr}
 8005026:	b088      	sub	sp, #32
 8005028:	af02      	add	r7, sp, #8
 800502a:	6078      	str	r0, [r7, #4]
 800502c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800502e:	4b22      	ldr	r3, [pc, #136]	; (80050b8 <prvProcessExpiredTimer+0x94>)
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	68db      	ldr	r3, [r3, #12]
 8005034:	68db      	ldr	r3, [r3, #12]
 8005036:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005038:	697b      	ldr	r3, [r7, #20]
 800503a:	3304      	adds	r3, #4
 800503c:	4618      	mov	r0, r3
 800503e:	f7fe fb1d 	bl	800367c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005042:	697b      	ldr	r3, [r7, #20]
 8005044:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005048:	f003 0304 	and.w	r3, r3, #4
 800504c:	2b00      	cmp	r3, #0
 800504e:	d022      	beq.n	8005096 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8005050:	697b      	ldr	r3, [r7, #20]
 8005052:	699a      	ldr	r2, [r3, #24]
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	18d1      	adds	r1, r2, r3
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	683a      	ldr	r2, [r7, #0]
 800505c:	6978      	ldr	r0, [r7, #20]
 800505e:	f000 f8d1 	bl	8005204 <prvInsertTimerInActiveList>
 8005062:	4603      	mov	r3, r0
 8005064:	2b00      	cmp	r3, #0
 8005066:	d01f      	beq.n	80050a8 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005068:	2300      	movs	r3, #0
 800506a:	9300      	str	r3, [sp, #0]
 800506c:	2300      	movs	r3, #0
 800506e:	687a      	ldr	r2, [r7, #4]
 8005070:	2100      	movs	r1, #0
 8005072:	6978      	ldr	r0, [r7, #20]
 8005074:	f7ff ff88 	bl	8004f88 <xTimerGenericCommand>
 8005078:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800507a:	693b      	ldr	r3, [r7, #16]
 800507c:	2b00      	cmp	r3, #0
 800507e:	d113      	bne.n	80050a8 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8005080:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005084:	f383 8811 	msr	BASEPRI, r3
 8005088:	f3bf 8f6f 	isb	sy
 800508c:	f3bf 8f4f 	dsb	sy
 8005090:	60fb      	str	r3, [r7, #12]
}
 8005092:	bf00      	nop
 8005094:	e7fe      	b.n	8005094 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005096:	697b      	ldr	r3, [r7, #20]
 8005098:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800509c:	f023 0301 	bic.w	r3, r3, #1
 80050a0:	b2da      	uxtb	r2, r3
 80050a2:	697b      	ldr	r3, [r7, #20]
 80050a4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80050a8:	697b      	ldr	r3, [r7, #20]
 80050aa:	6a1b      	ldr	r3, [r3, #32]
 80050ac:	6978      	ldr	r0, [r7, #20]
 80050ae:	4798      	blx	r3
}
 80050b0:	bf00      	nop
 80050b2:	3718      	adds	r7, #24
 80050b4:	46bd      	mov	sp, r7
 80050b6:	bd80      	pop	{r7, pc}
 80050b8:	20003e60 	.word	0x20003e60

080050bc <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80050bc:	b580      	push	{r7, lr}
 80050be:	b084      	sub	sp, #16
 80050c0:	af00      	add	r7, sp, #0
 80050c2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80050c4:	f107 0308 	add.w	r3, r7, #8
 80050c8:	4618      	mov	r0, r3
 80050ca:	f000 f857 	bl	800517c <prvGetNextExpireTime>
 80050ce:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80050d0:	68bb      	ldr	r3, [r7, #8]
 80050d2:	4619      	mov	r1, r3
 80050d4:	68f8      	ldr	r0, [r7, #12]
 80050d6:	f000 f803 	bl	80050e0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80050da:	f000 f8d5 	bl	8005288 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80050de:	e7f1      	b.n	80050c4 <prvTimerTask+0x8>

080050e0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80050e0:	b580      	push	{r7, lr}
 80050e2:	b084      	sub	sp, #16
 80050e4:	af00      	add	r7, sp, #0
 80050e6:	6078      	str	r0, [r7, #4]
 80050e8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80050ea:	f7ff fa39 	bl	8004560 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80050ee:	f107 0308 	add.w	r3, r7, #8
 80050f2:	4618      	mov	r0, r3
 80050f4:	f000 f866 	bl	80051c4 <prvSampleTimeNow>
 80050f8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80050fa:	68bb      	ldr	r3, [r7, #8]
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d130      	bne.n	8005162 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8005100:	683b      	ldr	r3, [r7, #0]
 8005102:	2b00      	cmp	r3, #0
 8005104:	d10a      	bne.n	800511c <prvProcessTimerOrBlockTask+0x3c>
 8005106:	687a      	ldr	r2, [r7, #4]
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	429a      	cmp	r2, r3
 800510c:	d806      	bhi.n	800511c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800510e:	f7ff fa35 	bl	800457c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8005112:	68f9      	ldr	r1, [r7, #12]
 8005114:	6878      	ldr	r0, [r7, #4]
 8005116:	f7ff ff85 	bl	8005024 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800511a:	e024      	b.n	8005166 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800511c:	683b      	ldr	r3, [r7, #0]
 800511e:	2b00      	cmp	r3, #0
 8005120:	d008      	beq.n	8005134 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8005122:	4b13      	ldr	r3, [pc, #76]	; (8005170 <prvProcessTimerOrBlockTask+0x90>)
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	2b00      	cmp	r3, #0
 800512a:	d101      	bne.n	8005130 <prvProcessTimerOrBlockTask+0x50>
 800512c:	2301      	movs	r3, #1
 800512e:	e000      	b.n	8005132 <prvProcessTimerOrBlockTask+0x52>
 8005130:	2300      	movs	r3, #0
 8005132:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8005134:	4b0f      	ldr	r3, [pc, #60]	; (8005174 <prvProcessTimerOrBlockTask+0x94>)
 8005136:	6818      	ldr	r0, [r3, #0]
 8005138:	687a      	ldr	r2, [r7, #4]
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	1ad3      	subs	r3, r2, r3
 800513e:	683a      	ldr	r2, [r7, #0]
 8005140:	4619      	mov	r1, r3
 8005142:	f7fe ff7d 	bl	8004040 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8005146:	f7ff fa19 	bl	800457c <xTaskResumeAll>
 800514a:	4603      	mov	r3, r0
 800514c:	2b00      	cmp	r3, #0
 800514e:	d10a      	bne.n	8005166 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8005150:	4b09      	ldr	r3, [pc, #36]	; (8005178 <prvProcessTimerOrBlockTask+0x98>)
 8005152:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005156:	601a      	str	r2, [r3, #0]
 8005158:	f3bf 8f4f 	dsb	sy
 800515c:	f3bf 8f6f 	isb	sy
}
 8005160:	e001      	b.n	8005166 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8005162:	f7ff fa0b 	bl	800457c <xTaskResumeAll>
}
 8005166:	bf00      	nop
 8005168:	3710      	adds	r7, #16
 800516a:	46bd      	mov	sp, r7
 800516c:	bd80      	pop	{r7, pc}
 800516e:	bf00      	nop
 8005170:	20003e64 	.word	0x20003e64
 8005174:	20003e68 	.word	0x20003e68
 8005178:	e000ed04 	.word	0xe000ed04

0800517c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800517c:	b480      	push	{r7}
 800517e:	b085      	sub	sp, #20
 8005180:	af00      	add	r7, sp, #0
 8005182:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8005184:	4b0e      	ldr	r3, [pc, #56]	; (80051c0 <prvGetNextExpireTime+0x44>)
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	2b00      	cmp	r3, #0
 800518c:	d101      	bne.n	8005192 <prvGetNextExpireTime+0x16>
 800518e:	2201      	movs	r2, #1
 8005190:	e000      	b.n	8005194 <prvGetNextExpireTime+0x18>
 8005192:	2200      	movs	r2, #0
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	2b00      	cmp	r3, #0
 800519e:	d105      	bne.n	80051ac <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80051a0:	4b07      	ldr	r3, [pc, #28]	; (80051c0 <prvGetNextExpireTime+0x44>)
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	68db      	ldr	r3, [r3, #12]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	60fb      	str	r3, [r7, #12]
 80051aa:	e001      	b.n	80051b0 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80051ac:	2300      	movs	r3, #0
 80051ae:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80051b0:	68fb      	ldr	r3, [r7, #12]
}
 80051b2:	4618      	mov	r0, r3
 80051b4:	3714      	adds	r7, #20
 80051b6:	46bd      	mov	sp, r7
 80051b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051bc:	4770      	bx	lr
 80051be:	bf00      	nop
 80051c0:	20003e60 	.word	0x20003e60

080051c4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80051c4:	b580      	push	{r7, lr}
 80051c6:	b084      	sub	sp, #16
 80051c8:	af00      	add	r7, sp, #0
 80051ca:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80051cc:	f7ff fa74 	bl	80046b8 <xTaskGetTickCount>
 80051d0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80051d2:	4b0b      	ldr	r3, [pc, #44]	; (8005200 <prvSampleTimeNow+0x3c>)
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	68fa      	ldr	r2, [r7, #12]
 80051d8:	429a      	cmp	r2, r3
 80051da:	d205      	bcs.n	80051e8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80051dc:	f000 f936 	bl	800544c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	2201      	movs	r2, #1
 80051e4:	601a      	str	r2, [r3, #0]
 80051e6:	e002      	b.n	80051ee <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	2200      	movs	r2, #0
 80051ec:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80051ee:	4a04      	ldr	r2, [pc, #16]	; (8005200 <prvSampleTimeNow+0x3c>)
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80051f4:	68fb      	ldr	r3, [r7, #12]
}
 80051f6:	4618      	mov	r0, r3
 80051f8:	3710      	adds	r7, #16
 80051fa:	46bd      	mov	sp, r7
 80051fc:	bd80      	pop	{r7, pc}
 80051fe:	bf00      	nop
 8005200:	20003e70 	.word	0x20003e70

08005204 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8005204:	b580      	push	{r7, lr}
 8005206:	b086      	sub	sp, #24
 8005208:	af00      	add	r7, sp, #0
 800520a:	60f8      	str	r0, [r7, #12]
 800520c:	60b9      	str	r1, [r7, #8]
 800520e:	607a      	str	r2, [r7, #4]
 8005210:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8005212:	2300      	movs	r3, #0
 8005214:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	68ba      	ldr	r2, [r7, #8]
 800521a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	68fa      	ldr	r2, [r7, #12]
 8005220:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8005222:	68ba      	ldr	r2, [r7, #8]
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	429a      	cmp	r2, r3
 8005228:	d812      	bhi.n	8005250 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800522a:	687a      	ldr	r2, [r7, #4]
 800522c:	683b      	ldr	r3, [r7, #0]
 800522e:	1ad2      	subs	r2, r2, r3
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	699b      	ldr	r3, [r3, #24]
 8005234:	429a      	cmp	r2, r3
 8005236:	d302      	bcc.n	800523e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8005238:	2301      	movs	r3, #1
 800523a:	617b      	str	r3, [r7, #20]
 800523c:	e01b      	b.n	8005276 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800523e:	4b10      	ldr	r3, [pc, #64]	; (8005280 <prvInsertTimerInActiveList+0x7c>)
 8005240:	681a      	ldr	r2, [r3, #0]
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	3304      	adds	r3, #4
 8005246:	4619      	mov	r1, r3
 8005248:	4610      	mov	r0, r2
 800524a:	f7fe f9de 	bl	800360a <vListInsert>
 800524e:	e012      	b.n	8005276 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8005250:	687a      	ldr	r2, [r7, #4]
 8005252:	683b      	ldr	r3, [r7, #0]
 8005254:	429a      	cmp	r2, r3
 8005256:	d206      	bcs.n	8005266 <prvInsertTimerInActiveList+0x62>
 8005258:	68ba      	ldr	r2, [r7, #8]
 800525a:	683b      	ldr	r3, [r7, #0]
 800525c:	429a      	cmp	r2, r3
 800525e:	d302      	bcc.n	8005266 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8005260:	2301      	movs	r3, #1
 8005262:	617b      	str	r3, [r7, #20]
 8005264:	e007      	b.n	8005276 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005266:	4b07      	ldr	r3, [pc, #28]	; (8005284 <prvInsertTimerInActiveList+0x80>)
 8005268:	681a      	ldr	r2, [r3, #0]
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	3304      	adds	r3, #4
 800526e:	4619      	mov	r1, r3
 8005270:	4610      	mov	r0, r2
 8005272:	f7fe f9ca 	bl	800360a <vListInsert>
		}
	}

	return xProcessTimerNow;
 8005276:	697b      	ldr	r3, [r7, #20]
}
 8005278:	4618      	mov	r0, r3
 800527a:	3718      	adds	r7, #24
 800527c:	46bd      	mov	sp, r7
 800527e:	bd80      	pop	{r7, pc}
 8005280:	20003e64 	.word	0x20003e64
 8005284:	20003e60 	.word	0x20003e60

08005288 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8005288:	b580      	push	{r7, lr}
 800528a:	b08e      	sub	sp, #56	; 0x38
 800528c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800528e:	e0ca      	b.n	8005426 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	2b00      	cmp	r3, #0
 8005294:	da18      	bge.n	80052c8 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8005296:	1d3b      	adds	r3, r7, #4
 8005298:	3304      	adds	r3, #4
 800529a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800529c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d10a      	bne.n	80052b8 <prvProcessReceivedCommands+0x30>
	__asm volatile
 80052a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052a6:	f383 8811 	msr	BASEPRI, r3
 80052aa:	f3bf 8f6f 	isb	sy
 80052ae:	f3bf 8f4f 	dsb	sy
 80052b2:	61fb      	str	r3, [r7, #28]
}
 80052b4:	bf00      	nop
 80052b6:	e7fe      	b.n	80052b6 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80052b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80052be:	6850      	ldr	r0, [r2, #4]
 80052c0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80052c2:	6892      	ldr	r2, [r2, #8]
 80052c4:	4611      	mov	r1, r2
 80052c6:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	f2c0 80aa 	blt.w	8005424 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80052d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052d6:	695b      	ldr	r3, [r3, #20]
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d004      	beq.n	80052e6 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80052dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052de:	3304      	adds	r3, #4
 80052e0:	4618      	mov	r0, r3
 80052e2:	f7fe f9cb 	bl	800367c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80052e6:	463b      	mov	r3, r7
 80052e8:	4618      	mov	r0, r3
 80052ea:	f7ff ff6b 	bl	80051c4 <prvSampleTimeNow>
 80052ee:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	2b09      	cmp	r3, #9
 80052f4:	f200 8097 	bhi.w	8005426 <prvProcessReceivedCommands+0x19e>
 80052f8:	a201      	add	r2, pc, #4	; (adr r2, 8005300 <prvProcessReceivedCommands+0x78>)
 80052fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052fe:	bf00      	nop
 8005300:	08005329 	.word	0x08005329
 8005304:	08005329 	.word	0x08005329
 8005308:	08005329 	.word	0x08005329
 800530c:	0800539d 	.word	0x0800539d
 8005310:	080053b1 	.word	0x080053b1
 8005314:	080053fb 	.word	0x080053fb
 8005318:	08005329 	.word	0x08005329
 800531c:	08005329 	.word	0x08005329
 8005320:	0800539d 	.word	0x0800539d
 8005324:	080053b1 	.word	0x080053b1
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005328:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800532a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800532e:	f043 0301 	orr.w	r3, r3, #1
 8005332:	b2da      	uxtb	r2, r3
 8005334:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005336:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800533a:	68ba      	ldr	r2, [r7, #8]
 800533c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800533e:	699b      	ldr	r3, [r3, #24]
 8005340:	18d1      	adds	r1, r2, r3
 8005342:	68bb      	ldr	r3, [r7, #8]
 8005344:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005346:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005348:	f7ff ff5c 	bl	8005204 <prvInsertTimerInActiveList>
 800534c:	4603      	mov	r3, r0
 800534e:	2b00      	cmp	r3, #0
 8005350:	d069      	beq.n	8005426 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005352:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005354:	6a1b      	ldr	r3, [r3, #32]
 8005356:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005358:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800535a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800535c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005360:	f003 0304 	and.w	r3, r3, #4
 8005364:	2b00      	cmp	r3, #0
 8005366:	d05e      	beq.n	8005426 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8005368:	68ba      	ldr	r2, [r7, #8]
 800536a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800536c:	699b      	ldr	r3, [r3, #24]
 800536e:	441a      	add	r2, r3
 8005370:	2300      	movs	r3, #0
 8005372:	9300      	str	r3, [sp, #0]
 8005374:	2300      	movs	r3, #0
 8005376:	2100      	movs	r1, #0
 8005378:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800537a:	f7ff fe05 	bl	8004f88 <xTimerGenericCommand>
 800537e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8005380:	6a3b      	ldr	r3, [r7, #32]
 8005382:	2b00      	cmp	r3, #0
 8005384:	d14f      	bne.n	8005426 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8005386:	f04f 0350 	mov.w	r3, #80	; 0x50
 800538a:	f383 8811 	msr	BASEPRI, r3
 800538e:	f3bf 8f6f 	isb	sy
 8005392:	f3bf 8f4f 	dsb	sy
 8005396:	61bb      	str	r3, [r7, #24]
}
 8005398:	bf00      	nop
 800539a:	e7fe      	b.n	800539a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800539c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800539e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80053a2:	f023 0301 	bic.w	r3, r3, #1
 80053a6:	b2da      	uxtb	r2, r3
 80053a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053aa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80053ae:	e03a      	b.n	8005426 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80053b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053b2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80053b6:	f043 0301 	orr.w	r3, r3, #1
 80053ba:	b2da      	uxtb	r2, r3
 80053bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053be:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80053c2:	68ba      	ldr	r2, [r7, #8]
 80053c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053c6:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80053c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053ca:	699b      	ldr	r3, [r3, #24]
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d10a      	bne.n	80053e6 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 80053d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053d4:	f383 8811 	msr	BASEPRI, r3
 80053d8:	f3bf 8f6f 	isb	sy
 80053dc:	f3bf 8f4f 	dsb	sy
 80053e0:	617b      	str	r3, [r7, #20]
}
 80053e2:	bf00      	nop
 80053e4:	e7fe      	b.n	80053e4 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80053e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053e8:	699a      	ldr	r2, [r3, #24]
 80053ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053ec:	18d1      	adds	r1, r2, r3
 80053ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80053f2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80053f4:	f7ff ff06 	bl	8005204 <prvInsertTimerInActiveList>
					break;
 80053f8:	e015      	b.n	8005426 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80053fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053fc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005400:	f003 0302 	and.w	r3, r3, #2
 8005404:	2b00      	cmp	r3, #0
 8005406:	d103      	bne.n	8005410 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8005408:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800540a:	f000 fbe1 	bl	8005bd0 <vPortFree>
 800540e:	e00a      	b.n	8005426 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005410:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005412:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005416:	f023 0301 	bic.w	r3, r3, #1
 800541a:	b2da      	uxtb	r2, r3
 800541c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800541e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8005422:	e000      	b.n	8005426 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8005424:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005426:	4b08      	ldr	r3, [pc, #32]	; (8005448 <prvProcessReceivedCommands+0x1c0>)
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	1d39      	adds	r1, r7, #4
 800542c:	2200      	movs	r2, #0
 800542e:	4618      	mov	r0, r3
 8005430:	f7fe fbec 	bl	8003c0c <xQueueReceive>
 8005434:	4603      	mov	r3, r0
 8005436:	2b00      	cmp	r3, #0
 8005438:	f47f af2a 	bne.w	8005290 <prvProcessReceivedCommands+0x8>
	}
}
 800543c:	bf00      	nop
 800543e:	bf00      	nop
 8005440:	3730      	adds	r7, #48	; 0x30
 8005442:	46bd      	mov	sp, r7
 8005444:	bd80      	pop	{r7, pc}
 8005446:	bf00      	nop
 8005448:	20003e68 	.word	0x20003e68

0800544c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800544c:	b580      	push	{r7, lr}
 800544e:	b088      	sub	sp, #32
 8005450:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005452:	e048      	b.n	80054e6 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005454:	4b2d      	ldr	r3, [pc, #180]	; (800550c <prvSwitchTimerLists+0xc0>)
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	68db      	ldr	r3, [r3, #12]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800545e:	4b2b      	ldr	r3, [pc, #172]	; (800550c <prvSwitchTimerLists+0xc0>)
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	68db      	ldr	r3, [r3, #12]
 8005464:	68db      	ldr	r3, [r3, #12]
 8005466:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	3304      	adds	r3, #4
 800546c:	4618      	mov	r0, r3
 800546e:	f7fe f905 	bl	800367c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	6a1b      	ldr	r3, [r3, #32]
 8005476:	68f8      	ldr	r0, [r7, #12]
 8005478:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005480:	f003 0304 	and.w	r3, r3, #4
 8005484:	2b00      	cmp	r3, #0
 8005486:	d02e      	beq.n	80054e6 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	699b      	ldr	r3, [r3, #24]
 800548c:	693a      	ldr	r2, [r7, #16]
 800548e:	4413      	add	r3, r2
 8005490:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8005492:	68ba      	ldr	r2, [r7, #8]
 8005494:	693b      	ldr	r3, [r7, #16]
 8005496:	429a      	cmp	r2, r3
 8005498:	d90e      	bls.n	80054b8 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	68ba      	ldr	r2, [r7, #8]
 800549e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	68fa      	ldr	r2, [r7, #12]
 80054a4:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80054a6:	4b19      	ldr	r3, [pc, #100]	; (800550c <prvSwitchTimerLists+0xc0>)
 80054a8:	681a      	ldr	r2, [r3, #0]
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	3304      	adds	r3, #4
 80054ae:	4619      	mov	r1, r3
 80054b0:	4610      	mov	r0, r2
 80054b2:	f7fe f8aa 	bl	800360a <vListInsert>
 80054b6:	e016      	b.n	80054e6 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80054b8:	2300      	movs	r3, #0
 80054ba:	9300      	str	r3, [sp, #0]
 80054bc:	2300      	movs	r3, #0
 80054be:	693a      	ldr	r2, [r7, #16]
 80054c0:	2100      	movs	r1, #0
 80054c2:	68f8      	ldr	r0, [r7, #12]
 80054c4:	f7ff fd60 	bl	8004f88 <xTimerGenericCommand>
 80054c8:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d10a      	bne.n	80054e6 <prvSwitchTimerLists+0x9a>
	__asm volatile
 80054d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054d4:	f383 8811 	msr	BASEPRI, r3
 80054d8:	f3bf 8f6f 	isb	sy
 80054dc:	f3bf 8f4f 	dsb	sy
 80054e0:	603b      	str	r3, [r7, #0]
}
 80054e2:	bf00      	nop
 80054e4:	e7fe      	b.n	80054e4 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80054e6:	4b09      	ldr	r3, [pc, #36]	; (800550c <prvSwitchTimerLists+0xc0>)
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d1b1      	bne.n	8005454 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80054f0:	4b06      	ldr	r3, [pc, #24]	; (800550c <prvSwitchTimerLists+0xc0>)
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80054f6:	4b06      	ldr	r3, [pc, #24]	; (8005510 <prvSwitchTimerLists+0xc4>)
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	4a04      	ldr	r2, [pc, #16]	; (800550c <prvSwitchTimerLists+0xc0>)
 80054fc:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80054fe:	4a04      	ldr	r2, [pc, #16]	; (8005510 <prvSwitchTimerLists+0xc4>)
 8005500:	697b      	ldr	r3, [r7, #20]
 8005502:	6013      	str	r3, [r2, #0]
}
 8005504:	bf00      	nop
 8005506:	3718      	adds	r7, #24
 8005508:	46bd      	mov	sp, r7
 800550a:	bd80      	pop	{r7, pc}
 800550c:	20003e60 	.word	0x20003e60
 8005510:	20003e64 	.word	0x20003e64

08005514 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8005514:	b580      	push	{r7, lr}
 8005516:	b082      	sub	sp, #8
 8005518:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800551a:	f000 f96b 	bl	80057f4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800551e:	4b15      	ldr	r3, [pc, #84]	; (8005574 <prvCheckForValidListAndQueue+0x60>)
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	2b00      	cmp	r3, #0
 8005524:	d120      	bne.n	8005568 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8005526:	4814      	ldr	r0, [pc, #80]	; (8005578 <prvCheckForValidListAndQueue+0x64>)
 8005528:	f7fe f81e 	bl	8003568 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800552c:	4813      	ldr	r0, [pc, #76]	; (800557c <prvCheckForValidListAndQueue+0x68>)
 800552e:	f7fe f81b 	bl	8003568 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8005532:	4b13      	ldr	r3, [pc, #76]	; (8005580 <prvCheckForValidListAndQueue+0x6c>)
 8005534:	4a10      	ldr	r2, [pc, #64]	; (8005578 <prvCheckForValidListAndQueue+0x64>)
 8005536:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8005538:	4b12      	ldr	r3, [pc, #72]	; (8005584 <prvCheckForValidListAndQueue+0x70>)
 800553a:	4a10      	ldr	r2, [pc, #64]	; (800557c <prvCheckForValidListAndQueue+0x68>)
 800553c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800553e:	2300      	movs	r3, #0
 8005540:	9300      	str	r3, [sp, #0]
 8005542:	4b11      	ldr	r3, [pc, #68]	; (8005588 <prvCheckForValidListAndQueue+0x74>)
 8005544:	4a11      	ldr	r2, [pc, #68]	; (800558c <prvCheckForValidListAndQueue+0x78>)
 8005546:	2110      	movs	r1, #16
 8005548:	200a      	movs	r0, #10
 800554a:	f7fe f929 	bl	80037a0 <xQueueGenericCreateStatic>
 800554e:	4603      	mov	r3, r0
 8005550:	4a08      	ldr	r2, [pc, #32]	; (8005574 <prvCheckForValidListAndQueue+0x60>)
 8005552:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8005554:	4b07      	ldr	r3, [pc, #28]	; (8005574 <prvCheckForValidListAndQueue+0x60>)
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	2b00      	cmp	r3, #0
 800555a:	d005      	beq.n	8005568 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800555c:	4b05      	ldr	r3, [pc, #20]	; (8005574 <prvCheckForValidListAndQueue+0x60>)
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	490b      	ldr	r1, [pc, #44]	; (8005590 <prvCheckForValidListAndQueue+0x7c>)
 8005562:	4618      	mov	r0, r3
 8005564:	f7fe fd42 	bl	8003fec <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005568:	f000 f974 	bl	8005854 <vPortExitCritical>
}
 800556c:	bf00      	nop
 800556e:	46bd      	mov	sp, r7
 8005570:	bd80      	pop	{r7, pc}
 8005572:	bf00      	nop
 8005574:	20003e68 	.word	0x20003e68
 8005578:	20003e38 	.word	0x20003e38
 800557c:	20003e4c 	.word	0x20003e4c
 8005580:	20003e60 	.word	0x20003e60
 8005584:	20003e64 	.word	0x20003e64
 8005588:	20003f14 	.word	0x20003f14
 800558c:	20003e74 	.word	0x20003e74
 8005590:	0800603c 	.word	0x0800603c

08005594 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005594:	b480      	push	{r7}
 8005596:	b085      	sub	sp, #20
 8005598:	af00      	add	r7, sp, #0
 800559a:	60f8      	str	r0, [r7, #12]
 800559c:	60b9      	str	r1, [r7, #8]
 800559e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	3b04      	subs	r3, #4
 80055a4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80055ac:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	3b04      	subs	r3, #4
 80055b2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80055b4:	68bb      	ldr	r3, [r7, #8]
 80055b6:	f023 0201 	bic.w	r2, r3, #1
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	3b04      	subs	r3, #4
 80055c2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80055c4:	4a0c      	ldr	r2, [pc, #48]	; (80055f8 <pxPortInitialiseStack+0x64>)
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	3b14      	subs	r3, #20
 80055ce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80055d0:	687a      	ldr	r2, [r7, #4]
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	3b04      	subs	r3, #4
 80055da:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	f06f 0202 	mvn.w	r2, #2
 80055e2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	3b20      	subs	r3, #32
 80055e8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80055ea:	68fb      	ldr	r3, [r7, #12]
}
 80055ec:	4618      	mov	r0, r3
 80055ee:	3714      	adds	r7, #20
 80055f0:	46bd      	mov	sp, r7
 80055f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f6:	4770      	bx	lr
 80055f8:	080055fd 	.word	0x080055fd

080055fc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80055fc:	b480      	push	{r7}
 80055fe:	b085      	sub	sp, #20
 8005600:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8005602:	2300      	movs	r3, #0
 8005604:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005606:	4b12      	ldr	r3, [pc, #72]	; (8005650 <prvTaskExitError+0x54>)
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800560e:	d00a      	beq.n	8005626 <prvTaskExitError+0x2a>
	__asm volatile
 8005610:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005614:	f383 8811 	msr	BASEPRI, r3
 8005618:	f3bf 8f6f 	isb	sy
 800561c:	f3bf 8f4f 	dsb	sy
 8005620:	60fb      	str	r3, [r7, #12]
}
 8005622:	bf00      	nop
 8005624:	e7fe      	b.n	8005624 <prvTaskExitError+0x28>
	__asm volatile
 8005626:	f04f 0350 	mov.w	r3, #80	; 0x50
 800562a:	f383 8811 	msr	BASEPRI, r3
 800562e:	f3bf 8f6f 	isb	sy
 8005632:	f3bf 8f4f 	dsb	sy
 8005636:	60bb      	str	r3, [r7, #8]
}
 8005638:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800563a:	bf00      	nop
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	2b00      	cmp	r3, #0
 8005640:	d0fc      	beq.n	800563c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005642:	bf00      	nop
 8005644:	bf00      	nop
 8005646:	3714      	adds	r7, #20
 8005648:	46bd      	mov	sp, r7
 800564a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800564e:	4770      	bx	lr
 8005650:	2000000c 	.word	0x2000000c
	...

08005660 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005660:	4b07      	ldr	r3, [pc, #28]	; (8005680 <pxCurrentTCBConst2>)
 8005662:	6819      	ldr	r1, [r3, #0]
 8005664:	6808      	ldr	r0, [r1, #0]
 8005666:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800566a:	f380 8809 	msr	PSP, r0
 800566e:	f3bf 8f6f 	isb	sy
 8005672:	f04f 0000 	mov.w	r0, #0
 8005676:	f380 8811 	msr	BASEPRI, r0
 800567a:	4770      	bx	lr
 800567c:	f3af 8000 	nop.w

08005680 <pxCurrentTCBConst2>:
 8005680:	20003938 	.word	0x20003938
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005684:	bf00      	nop
 8005686:	bf00      	nop

08005688 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005688:	4808      	ldr	r0, [pc, #32]	; (80056ac <prvPortStartFirstTask+0x24>)
 800568a:	6800      	ldr	r0, [r0, #0]
 800568c:	6800      	ldr	r0, [r0, #0]
 800568e:	f380 8808 	msr	MSP, r0
 8005692:	f04f 0000 	mov.w	r0, #0
 8005696:	f380 8814 	msr	CONTROL, r0
 800569a:	b662      	cpsie	i
 800569c:	b661      	cpsie	f
 800569e:	f3bf 8f4f 	dsb	sy
 80056a2:	f3bf 8f6f 	isb	sy
 80056a6:	df00      	svc	0
 80056a8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80056aa:	bf00      	nop
 80056ac:	e000ed08 	.word	0xe000ed08

080056b0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80056b0:	b580      	push	{r7, lr}
 80056b2:	b086      	sub	sp, #24
 80056b4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80056b6:	4b46      	ldr	r3, [pc, #280]	; (80057d0 <xPortStartScheduler+0x120>)
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	4a46      	ldr	r2, [pc, #280]	; (80057d4 <xPortStartScheduler+0x124>)
 80056bc:	4293      	cmp	r3, r2
 80056be:	d10a      	bne.n	80056d6 <xPortStartScheduler+0x26>
	__asm volatile
 80056c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056c4:	f383 8811 	msr	BASEPRI, r3
 80056c8:	f3bf 8f6f 	isb	sy
 80056cc:	f3bf 8f4f 	dsb	sy
 80056d0:	613b      	str	r3, [r7, #16]
}
 80056d2:	bf00      	nop
 80056d4:	e7fe      	b.n	80056d4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80056d6:	4b3e      	ldr	r3, [pc, #248]	; (80057d0 <xPortStartScheduler+0x120>)
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	4a3f      	ldr	r2, [pc, #252]	; (80057d8 <xPortStartScheduler+0x128>)
 80056dc:	4293      	cmp	r3, r2
 80056de:	d10a      	bne.n	80056f6 <xPortStartScheduler+0x46>
	__asm volatile
 80056e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056e4:	f383 8811 	msr	BASEPRI, r3
 80056e8:	f3bf 8f6f 	isb	sy
 80056ec:	f3bf 8f4f 	dsb	sy
 80056f0:	60fb      	str	r3, [r7, #12]
}
 80056f2:	bf00      	nop
 80056f4:	e7fe      	b.n	80056f4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80056f6:	4b39      	ldr	r3, [pc, #228]	; (80057dc <xPortStartScheduler+0x12c>)
 80056f8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80056fa:	697b      	ldr	r3, [r7, #20]
 80056fc:	781b      	ldrb	r3, [r3, #0]
 80056fe:	b2db      	uxtb	r3, r3
 8005700:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005702:	697b      	ldr	r3, [r7, #20]
 8005704:	22ff      	movs	r2, #255	; 0xff
 8005706:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005708:	697b      	ldr	r3, [r7, #20]
 800570a:	781b      	ldrb	r3, [r3, #0]
 800570c:	b2db      	uxtb	r3, r3
 800570e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005710:	78fb      	ldrb	r3, [r7, #3]
 8005712:	b2db      	uxtb	r3, r3
 8005714:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005718:	b2da      	uxtb	r2, r3
 800571a:	4b31      	ldr	r3, [pc, #196]	; (80057e0 <xPortStartScheduler+0x130>)
 800571c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800571e:	4b31      	ldr	r3, [pc, #196]	; (80057e4 <xPortStartScheduler+0x134>)
 8005720:	2207      	movs	r2, #7
 8005722:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005724:	e009      	b.n	800573a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8005726:	4b2f      	ldr	r3, [pc, #188]	; (80057e4 <xPortStartScheduler+0x134>)
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	3b01      	subs	r3, #1
 800572c:	4a2d      	ldr	r2, [pc, #180]	; (80057e4 <xPortStartScheduler+0x134>)
 800572e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005730:	78fb      	ldrb	r3, [r7, #3]
 8005732:	b2db      	uxtb	r3, r3
 8005734:	005b      	lsls	r3, r3, #1
 8005736:	b2db      	uxtb	r3, r3
 8005738:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800573a:	78fb      	ldrb	r3, [r7, #3]
 800573c:	b2db      	uxtb	r3, r3
 800573e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005742:	2b80      	cmp	r3, #128	; 0x80
 8005744:	d0ef      	beq.n	8005726 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005746:	4b27      	ldr	r3, [pc, #156]	; (80057e4 <xPortStartScheduler+0x134>)
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	f1c3 0307 	rsb	r3, r3, #7
 800574e:	2b04      	cmp	r3, #4
 8005750:	d00a      	beq.n	8005768 <xPortStartScheduler+0xb8>
	__asm volatile
 8005752:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005756:	f383 8811 	msr	BASEPRI, r3
 800575a:	f3bf 8f6f 	isb	sy
 800575e:	f3bf 8f4f 	dsb	sy
 8005762:	60bb      	str	r3, [r7, #8]
}
 8005764:	bf00      	nop
 8005766:	e7fe      	b.n	8005766 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005768:	4b1e      	ldr	r3, [pc, #120]	; (80057e4 <xPortStartScheduler+0x134>)
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	021b      	lsls	r3, r3, #8
 800576e:	4a1d      	ldr	r2, [pc, #116]	; (80057e4 <xPortStartScheduler+0x134>)
 8005770:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005772:	4b1c      	ldr	r3, [pc, #112]	; (80057e4 <xPortStartScheduler+0x134>)
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800577a:	4a1a      	ldr	r2, [pc, #104]	; (80057e4 <xPortStartScheduler+0x134>)
 800577c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	b2da      	uxtb	r2, r3
 8005782:	697b      	ldr	r3, [r7, #20]
 8005784:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005786:	4b18      	ldr	r3, [pc, #96]	; (80057e8 <xPortStartScheduler+0x138>)
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	4a17      	ldr	r2, [pc, #92]	; (80057e8 <xPortStartScheduler+0x138>)
 800578c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005790:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005792:	4b15      	ldr	r3, [pc, #84]	; (80057e8 <xPortStartScheduler+0x138>)
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	4a14      	ldr	r2, [pc, #80]	; (80057e8 <xPortStartScheduler+0x138>)
 8005798:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800579c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800579e:	f000 f8dd 	bl	800595c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80057a2:	4b12      	ldr	r3, [pc, #72]	; (80057ec <xPortStartScheduler+0x13c>)
 80057a4:	2200      	movs	r2, #0
 80057a6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80057a8:	f000 f8fc 	bl	80059a4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80057ac:	4b10      	ldr	r3, [pc, #64]	; (80057f0 <xPortStartScheduler+0x140>)
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	4a0f      	ldr	r2, [pc, #60]	; (80057f0 <xPortStartScheduler+0x140>)
 80057b2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80057b6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80057b8:	f7ff ff66 	bl	8005688 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80057bc:	f7ff f846 	bl	800484c <vTaskSwitchContext>
	prvTaskExitError();
 80057c0:	f7ff ff1c 	bl	80055fc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80057c4:	2300      	movs	r3, #0
}
 80057c6:	4618      	mov	r0, r3
 80057c8:	3718      	adds	r7, #24
 80057ca:	46bd      	mov	sp, r7
 80057cc:	bd80      	pop	{r7, pc}
 80057ce:	bf00      	nop
 80057d0:	e000ed00 	.word	0xe000ed00
 80057d4:	410fc271 	.word	0x410fc271
 80057d8:	410fc270 	.word	0x410fc270
 80057dc:	e000e400 	.word	0xe000e400
 80057e0:	20003f64 	.word	0x20003f64
 80057e4:	20003f68 	.word	0x20003f68
 80057e8:	e000ed20 	.word	0xe000ed20
 80057ec:	2000000c 	.word	0x2000000c
 80057f0:	e000ef34 	.word	0xe000ef34

080057f4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80057f4:	b480      	push	{r7}
 80057f6:	b083      	sub	sp, #12
 80057f8:	af00      	add	r7, sp, #0
	__asm volatile
 80057fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057fe:	f383 8811 	msr	BASEPRI, r3
 8005802:	f3bf 8f6f 	isb	sy
 8005806:	f3bf 8f4f 	dsb	sy
 800580a:	607b      	str	r3, [r7, #4]
}
 800580c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800580e:	4b0f      	ldr	r3, [pc, #60]	; (800584c <vPortEnterCritical+0x58>)
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	3301      	adds	r3, #1
 8005814:	4a0d      	ldr	r2, [pc, #52]	; (800584c <vPortEnterCritical+0x58>)
 8005816:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005818:	4b0c      	ldr	r3, [pc, #48]	; (800584c <vPortEnterCritical+0x58>)
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	2b01      	cmp	r3, #1
 800581e:	d10f      	bne.n	8005840 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005820:	4b0b      	ldr	r3, [pc, #44]	; (8005850 <vPortEnterCritical+0x5c>)
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	b2db      	uxtb	r3, r3
 8005826:	2b00      	cmp	r3, #0
 8005828:	d00a      	beq.n	8005840 <vPortEnterCritical+0x4c>
	__asm volatile
 800582a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800582e:	f383 8811 	msr	BASEPRI, r3
 8005832:	f3bf 8f6f 	isb	sy
 8005836:	f3bf 8f4f 	dsb	sy
 800583a:	603b      	str	r3, [r7, #0]
}
 800583c:	bf00      	nop
 800583e:	e7fe      	b.n	800583e <vPortEnterCritical+0x4a>
	}
}
 8005840:	bf00      	nop
 8005842:	370c      	adds	r7, #12
 8005844:	46bd      	mov	sp, r7
 8005846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800584a:	4770      	bx	lr
 800584c:	2000000c 	.word	0x2000000c
 8005850:	e000ed04 	.word	0xe000ed04

08005854 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005854:	b480      	push	{r7}
 8005856:	b083      	sub	sp, #12
 8005858:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800585a:	4b12      	ldr	r3, [pc, #72]	; (80058a4 <vPortExitCritical+0x50>)
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	2b00      	cmp	r3, #0
 8005860:	d10a      	bne.n	8005878 <vPortExitCritical+0x24>
	__asm volatile
 8005862:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005866:	f383 8811 	msr	BASEPRI, r3
 800586a:	f3bf 8f6f 	isb	sy
 800586e:	f3bf 8f4f 	dsb	sy
 8005872:	607b      	str	r3, [r7, #4]
}
 8005874:	bf00      	nop
 8005876:	e7fe      	b.n	8005876 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8005878:	4b0a      	ldr	r3, [pc, #40]	; (80058a4 <vPortExitCritical+0x50>)
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	3b01      	subs	r3, #1
 800587e:	4a09      	ldr	r2, [pc, #36]	; (80058a4 <vPortExitCritical+0x50>)
 8005880:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005882:	4b08      	ldr	r3, [pc, #32]	; (80058a4 <vPortExitCritical+0x50>)
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	2b00      	cmp	r3, #0
 8005888:	d105      	bne.n	8005896 <vPortExitCritical+0x42>
 800588a:	2300      	movs	r3, #0
 800588c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800588e:	683b      	ldr	r3, [r7, #0]
 8005890:	f383 8811 	msr	BASEPRI, r3
}
 8005894:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8005896:	bf00      	nop
 8005898:	370c      	adds	r7, #12
 800589a:	46bd      	mov	sp, r7
 800589c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a0:	4770      	bx	lr
 80058a2:	bf00      	nop
 80058a4:	2000000c 	.word	0x2000000c
	...

080058b0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80058b0:	f3ef 8009 	mrs	r0, PSP
 80058b4:	f3bf 8f6f 	isb	sy
 80058b8:	4b15      	ldr	r3, [pc, #84]	; (8005910 <pxCurrentTCBConst>)
 80058ba:	681a      	ldr	r2, [r3, #0]
 80058bc:	f01e 0f10 	tst.w	lr, #16
 80058c0:	bf08      	it	eq
 80058c2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80058c6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80058ca:	6010      	str	r0, [r2, #0]
 80058cc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80058d0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80058d4:	f380 8811 	msr	BASEPRI, r0
 80058d8:	f3bf 8f4f 	dsb	sy
 80058dc:	f3bf 8f6f 	isb	sy
 80058e0:	f7fe ffb4 	bl	800484c <vTaskSwitchContext>
 80058e4:	f04f 0000 	mov.w	r0, #0
 80058e8:	f380 8811 	msr	BASEPRI, r0
 80058ec:	bc09      	pop	{r0, r3}
 80058ee:	6819      	ldr	r1, [r3, #0]
 80058f0:	6808      	ldr	r0, [r1, #0]
 80058f2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80058f6:	f01e 0f10 	tst.w	lr, #16
 80058fa:	bf08      	it	eq
 80058fc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005900:	f380 8809 	msr	PSP, r0
 8005904:	f3bf 8f6f 	isb	sy
 8005908:	4770      	bx	lr
 800590a:	bf00      	nop
 800590c:	f3af 8000 	nop.w

08005910 <pxCurrentTCBConst>:
 8005910:	20003938 	.word	0x20003938
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005914:	bf00      	nop
 8005916:	bf00      	nop

08005918 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005918:	b580      	push	{r7, lr}
 800591a:	b082      	sub	sp, #8
 800591c:	af00      	add	r7, sp, #0
	__asm volatile
 800591e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005922:	f383 8811 	msr	BASEPRI, r3
 8005926:	f3bf 8f6f 	isb	sy
 800592a:	f3bf 8f4f 	dsb	sy
 800592e:	607b      	str	r3, [r7, #4]
}
 8005930:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005932:	f7fe fed1 	bl	80046d8 <xTaskIncrementTick>
 8005936:	4603      	mov	r3, r0
 8005938:	2b00      	cmp	r3, #0
 800593a:	d003      	beq.n	8005944 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800593c:	4b06      	ldr	r3, [pc, #24]	; (8005958 <xPortSysTickHandler+0x40>)
 800593e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005942:	601a      	str	r2, [r3, #0]
 8005944:	2300      	movs	r3, #0
 8005946:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005948:	683b      	ldr	r3, [r7, #0]
 800594a:	f383 8811 	msr	BASEPRI, r3
}
 800594e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005950:	bf00      	nop
 8005952:	3708      	adds	r7, #8
 8005954:	46bd      	mov	sp, r7
 8005956:	bd80      	pop	{r7, pc}
 8005958:	e000ed04 	.word	0xe000ed04

0800595c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800595c:	b480      	push	{r7}
 800595e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005960:	4b0b      	ldr	r3, [pc, #44]	; (8005990 <vPortSetupTimerInterrupt+0x34>)
 8005962:	2200      	movs	r2, #0
 8005964:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005966:	4b0b      	ldr	r3, [pc, #44]	; (8005994 <vPortSetupTimerInterrupt+0x38>)
 8005968:	2200      	movs	r2, #0
 800596a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800596c:	4b0a      	ldr	r3, [pc, #40]	; (8005998 <vPortSetupTimerInterrupt+0x3c>)
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	4a0a      	ldr	r2, [pc, #40]	; (800599c <vPortSetupTimerInterrupt+0x40>)
 8005972:	fba2 2303 	umull	r2, r3, r2, r3
 8005976:	099b      	lsrs	r3, r3, #6
 8005978:	4a09      	ldr	r2, [pc, #36]	; (80059a0 <vPortSetupTimerInterrupt+0x44>)
 800597a:	3b01      	subs	r3, #1
 800597c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800597e:	4b04      	ldr	r3, [pc, #16]	; (8005990 <vPortSetupTimerInterrupt+0x34>)
 8005980:	2207      	movs	r2, #7
 8005982:	601a      	str	r2, [r3, #0]
}
 8005984:	bf00      	nop
 8005986:	46bd      	mov	sp, r7
 8005988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800598c:	4770      	bx	lr
 800598e:	bf00      	nop
 8005990:	e000e010 	.word	0xe000e010
 8005994:	e000e018 	.word	0xe000e018
 8005998:	20000000 	.word	0x20000000
 800599c:	10624dd3 	.word	0x10624dd3
 80059a0:	e000e014 	.word	0xe000e014

080059a4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80059a4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80059b4 <vPortEnableVFP+0x10>
 80059a8:	6801      	ldr	r1, [r0, #0]
 80059aa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80059ae:	6001      	str	r1, [r0, #0]
 80059b0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80059b2:	bf00      	nop
 80059b4:	e000ed88 	.word	0xe000ed88

080059b8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80059b8:	b480      	push	{r7}
 80059ba:	b085      	sub	sp, #20
 80059bc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80059be:	f3ef 8305 	mrs	r3, IPSR
 80059c2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	2b0f      	cmp	r3, #15
 80059c8:	d914      	bls.n	80059f4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80059ca:	4a17      	ldr	r2, [pc, #92]	; (8005a28 <vPortValidateInterruptPriority+0x70>)
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	4413      	add	r3, r2
 80059d0:	781b      	ldrb	r3, [r3, #0]
 80059d2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80059d4:	4b15      	ldr	r3, [pc, #84]	; (8005a2c <vPortValidateInterruptPriority+0x74>)
 80059d6:	781b      	ldrb	r3, [r3, #0]
 80059d8:	7afa      	ldrb	r2, [r7, #11]
 80059da:	429a      	cmp	r2, r3
 80059dc:	d20a      	bcs.n	80059f4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80059de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059e2:	f383 8811 	msr	BASEPRI, r3
 80059e6:	f3bf 8f6f 	isb	sy
 80059ea:	f3bf 8f4f 	dsb	sy
 80059ee:	607b      	str	r3, [r7, #4]
}
 80059f0:	bf00      	nop
 80059f2:	e7fe      	b.n	80059f2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80059f4:	4b0e      	ldr	r3, [pc, #56]	; (8005a30 <vPortValidateInterruptPriority+0x78>)
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80059fc:	4b0d      	ldr	r3, [pc, #52]	; (8005a34 <vPortValidateInterruptPriority+0x7c>)
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	429a      	cmp	r2, r3
 8005a02:	d90a      	bls.n	8005a1a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8005a04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a08:	f383 8811 	msr	BASEPRI, r3
 8005a0c:	f3bf 8f6f 	isb	sy
 8005a10:	f3bf 8f4f 	dsb	sy
 8005a14:	603b      	str	r3, [r7, #0]
}
 8005a16:	bf00      	nop
 8005a18:	e7fe      	b.n	8005a18 <vPortValidateInterruptPriority+0x60>
	}
 8005a1a:	bf00      	nop
 8005a1c:	3714      	adds	r7, #20
 8005a1e:	46bd      	mov	sp, r7
 8005a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a24:	4770      	bx	lr
 8005a26:	bf00      	nop
 8005a28:	e000e3f0 	.word	0xe000e3f0
 8005a2c:	20003f64 	.word	0x20003f64
 8005a30:	e000ed0c 	.word	0xe000ed0c
 8005a34:	20003f68 	.word	0x20003f68

08005a38 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005a38:	b580      	push	{r7, lr}
 8005a3a:	b08a      	sub	sp, #40	; 0x28
 8005a3c:	af00      	add	r7, sp, #0
 8005a3e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005a40:	2300      	movs	r3, #0
 8005a42:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005a44:	f7fe fd8c 	bl	8004560 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005a48:	4b5b      	ldr	r3, [pc, #364]	; (8005bb8 <pvPortMalloc+0x180>)
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d101      	bne.n	8005a54 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005a50:	f000 f920 	bl	8005c94 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005a54:	4b59      	ldr	r3, [pc, #356]	; (8005bbc <pvPortMalloc+0x184>)
 8005a56:	681a      	ldr	r2, [r3, #0]
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	4013      	ands	r3, r2
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	f040 8093 	bne.w	8005b88 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d01d      	beq.n	8005aa4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8005a68:	2208      	movs	r2, #8
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	4413      	add	r3, r2
 8005a6e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	f003 0307 	and.w	r3, r3, #7
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d014      	beq.n	8005aa4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	f023 0307 	bic.w	r3, r3, #7
 8005a80:	3308      	adds	r3, #8
 8005a82:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	f003 0307 	and.w	r3, r3, #7
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d00a      	beq.n	8005aa4 <pvPortMalloc+0x6c>
	__asm volatile
 8005a8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a92:	f383 8811 	msr	BASEPRI, r3
 8005a96:	f3bf 8f6f 	isb	sy
 8005a9a:	f3bf 8f4f 	dsb	sy
 8005a9e:	617b      	str	r3, [r7, #20]
}
 8005aa0:	bf00      	nop
 8005aa2:	e7fe      	b.n	8005aa2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d06e      	beq.n	8005b88 <pvPortMalloc+0x150>
 8005aaa:	4b45      	ldr	r3, [pc, #276]	; (8005bc0 <pvPortMalloc+0x188>)
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	687a      	ldr	r2, [r7, #4]
 8005ab0:	429a      	cmp	r2, r3
 8005ab2:	d869      	bhi.n	8005b88 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005ab4:	4b43      	ldr	r3, [pc, #268]	; (8005bc4 <pvPortMalloc+0x18c>)
 8005ab6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005ab8:	4b42      	ldr	r3, [pc, #264]	; (8005bc4 <pvPortMalloc+0x18c>)
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005abe:	e004      	b.n	8005aca <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8005ac0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ac2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005ac4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005aca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005acc:	685b      	ldr	r3, [r3, #4]
 8005ace:	687a      	ldr	r2, [r7, #4]
 8005ad0:	429a      	cmp	r2, r3
 8005ad2:	d903      	bls.n	8005adc <pvPortMalloc+0xa4>
 8005ad4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d1f1      	bne.n	8005ac0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005adc:	4b36      	ldr	r3, [pc, #216]	; (8005bb8 <pvPortMalloc+0x180>)
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005ae2:	429a      	cmp	r2, r3
 8005ae4:	d050      	beq.n	8005b88 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005ae6:	6a3b      	ldr	r3, [r7, #32]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	2208      	movs	r2, #8
 8005aec:	4413      	add	r3, r2
 8005aee:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005af0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005af2:	681a      	ldr	r2, [r3, #0]
 8005af4:	6a3b      	ldr	r3, [r7, #32]
 8005af6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005af8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005afa:	685a      	ldr	r2, [r3, #4]
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	1ad2      	subs	r2, r2, r3
 8005b00:	2308      	movs	r3, #8
 8005b02:	005b      	lsls	r3, r3, #1
 8005b04:	429a      	cmp	r2, r3
 8005b06:	d91f      	bls.n	8005b48 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005b08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	4413      	add	r3, r2
 8005b0e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005b10:	69bb      	ldr	r3, [r7, #24]
 8005b12:	f003 0307 	and.w	r3, r3, #7
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d00a      	beq.n	8005b30 <pvPortMalloc+0xf8>
	__asm volatile
 8005b1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b1e:	f383 8811 	msr	BASEPRI, r3
 8005b22:	f3bf 8f6f 	isb	sy
 8005b26:	f3bf 8f4f 	dsb	sy
 8005b2a:	613b      	str	r3, [r7, #16]
}
 8005b2c:	bf00      	nop
 8005b2e:	e7fe      	b.n	8005b2e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005b30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b32:	685a      	ldr	r2, [r3, #4]
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	1ad2      	subs	r2, r2, r3
 8005b38:	69bb      	ldr	r3, [r7, #24]
 8005b3a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005b3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b3e:	687a      	ldr	r2, [r7, #4]
 8005b40:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005b42:	69b8      	ldr	r0, [r7, #24]
 8005b44:	f000 f908 	bl	8005d58 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005b48:	4b1d      	ldr	r3, [pc, #116]	; (8005bc0 <pvPortMalloc+0x188>)
 8005b4a:	681a      	ldr	r2, [r3, #0]
 8005b4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b4e:	685b      	ldr	r3, [r3, #4]
 8005b50:	1ad3      	subs	r3, r2, r3
 8005b52:	4a1b      	ldr	r2, [pc, #108]	; (8005bc0 <pvPortMalloc+0x188>)
 8005b54:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005b56:	4b1a      	ldr	r3, [pc, #104]	; (8005bc0 <pvPortMalloc+0x188>)
 8005b58:	681a      	ldr	r2, [r3, #0]
 8005b5a:	4b1b      	ldr	r3, [pc, #108]	; (8005bc8 <pvPortMalloc+0x190>)
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	429a      	cmp	r2, r3
 8005b60:	d203      	bcs.n	8005b6a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005b62:	4b17      	ldr	r3, [pc, #92]	; (8005bc0 <pvPortMalloc+0x188>)
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	4a18      	ldr	r2, [pc, #96]	; (8005bc8 <pvPortMalloc+0x190>)
 8005b68:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005b6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b6c:	685a      	ldr	r2, [r3, #4]
 8005b6e:	4b13      	ldr	r3, [pc, #76]	; (8005bbc <pvPortMalloc+0x184>)
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	431a      	orrs	r2, r3
 8005b74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b76:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005b78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b7a:	2200      	movs	r2, #0
 8005b7c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8005b7e:	4b13      	ldr	r3, [pc, #76]	; (8005bcc <pvPortMalloc+0x194>)
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	3301      	adds	r3, #1
 8005b84:	4a11      	ldr	r2, [pc, #68]	; (8005bcc <pvPortMalloc+0x194>)
 8005b86:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005b88:	f7fe fcf8 	bl	800457c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005b8c:	69fb      	ldr	r3, [r7, #28]
 8005b8e:	f003 0307 	and.w	r3, r3, #7
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d00a      	beq.n	8005bac <pvPortMalloc+0x174>
	__asm volatile
 8005b96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b9a:	f383 8811 	msr	BASEPRI, r3
 8005b9e:	f3bf 8f6f 	isb	sy
 8005ba2:	f3bf 8f4f 	dsb	sy
 8005ba6:	60fb      	str	r3, [r7, #12]
}
 8005ba8:	bf00      	nop
 8005baa:	e7fe      	b.n	8005baa <pvPortMalloc+0x172>
	return pvReturn;
 8005bac:	69fb      	ldr	r3, [r7, #28]
}
 8005bae:	4618      	mov	r0, r3
 8005bb0:	3728      	adds	r7, #40	; 0x28
 8005bb2:	46bd      	mov	sp, r7
 8005bb4:	bd80      	pop	{r7, pc}
 8005bb6:	bf00      	nop
 8005bb8:	20007b74 	.word	0x20007b74
 8005bbc:	20007b88 	.word	0x20007b88
 8005bc0:	20007b78 	.word	0x20007b78
 8005bc4:	20007b6c 	.word	0x20007b6c
 8005bc8:	20007b7c 	.word	0x20007b7c
 8005bcc:	20007b80 	.word	0x20007b80

08005bd0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005bd0:	b580      	push	{r7, lr}
 8005bd2:	b086      	sub	sp, #24
 8005bd4:	af00      	add	r7, sp, #0
 8005bd6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d04d      	beq.n	8005c7e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005be2:	2308      	movs	r3, #8
 8005be4:	425b      	negs	r3, r3
 8005be6:	697a      	ldr	r2, [r7, #20]
 8005be8:	4413      	add	r3, r2
 8005bea:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005bec:	697b      	ldr	r3, [r7, #20]
 8005bee:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005bf0:	693b      	ldr	r3, [r7, #16]
 8005bf2:	685a      	ldr	r2, [r3, #4]
 8005bf4:	4b24      	ldr	r3, [pc, #144]	; (8005c88 <vPortFree+0xb8>)
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	4013      	ands	r3, r2
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d10a      	bne.n	8005c14 <vPortFree+0x44>
	__asm volatile
 8005bfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c02:	f383 8811 	msr	BASEPRI, r3
 8005c06:	f3bf 8f6f 	isb	sy
 8005c0a:	f3bf 8f4f 	dsb	sy
 8005c0e:	60fb      	str	r3, [r7, #12]
}
 8005c10:	bf00      	nop
 8005c12:	e7fe      	b.n	8005c12 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005c14:	693b      	ldr	r3, [r7, #16]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d00a      	beq.n	8005c32 <vPortFree+0x62>
	__asm volatile
 8005c1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c20:	f383 8811 	msr	BASEPRI, r3
 8005c24:	f3bf 8f6f 	isb	sy
 8005c28:	f3bf 8f4f 	dsb	sy
 8005c2c:	60bb      	str	r3, [r7, #8]
}
 8005c2e:	bf00      	nop
 8005c30:	e7fe      	b.n	8005c30 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005c32:	693b      	ldr	r3, [r7, #16]
 8005c34:	685a      	ldr	r2, [r3, #4]
 8005c36:	4b14      	ldr	r3, [pc, #80]	; (8005c88 <vPortFree+0xb8>)
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	4013      	ands	r3, r2
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d01e      	beq.n	8005c7e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005c40:	693b      	ldr	r3, [r7, #16]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d11a      	bne.n	8005c7e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005c48:	693b      	ldr	r3, [r7, #16]
 8005c4a:	685a      	ldr	r2, [r3, #4]
 8005c4c:	4b0e      	ldr	r3, [pc, #56]	; (8005c88 <vPortFree+0xb8>)
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	43db      	mvns	r3, r3
 8005c52:	401a      	ands	r2, r3
 8005c54:	693b      	ldr	r3, [r7, #16]
 8005c56:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005c58:	f7fe fc82 	bl	8004560 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005c5c:	693b      	ldr	r3, [r7, #16]
 8005c5e:	685a      	ldr	r2, [r3, #4]
 8005c60:	4b0a      	ldr	r3, [pc, #40]	; (8005c8c <vPortFree+0xbc>)
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	4413      	add	r3, r2
 8005c66:	4a09      	ldr	r2, [pc, #36]	; (8005c8c <vPortFree+0xbc>)
 8005c68:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005c6a:	6938      	ldr	r0, [r7, #16]
 8005c6c:	f000 f874 	bl	8005d58 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8005c70:	4b07      	ldr	r3, [pc, #28]	; (8005c90 <vPortFree+0xc0>)
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	3301      	adds	r3, #1
 8005c76:	4a06      	ldr	r2, [pc, #24]	; (8005c90 <vPortFree+0xc0>)
 8005c78:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8005c7a:	f7fe fc7f 	bl	800457c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005c7e:	bf00      	nop
 8005c80:	3718      	adds	r7, #24
 8005c82:	46bd      	mov	sp, r7
 8005c84:	bd80      	pop	{r7, pc}
 8005c86:	bf00      	nop
 8005c88:	20007b88 	.word	0x20007b88
 8005c8c:	20007b78 	.word	0x20007b78
 8005c90:	20007b84 	.word	0x20007b84

08005c94 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005c94:	b480      	push	{r7}
 8005c96:	b085      	sub	sp, #20
 8005c98:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005c9a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8005c9e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005ca0:	4b27      	ldr	r3, [pc, #156]	; (8005d40 <prvHeapInit+0xac>)
 8005ca2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	f003 0307 	and.w	r3, r3, #7
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d00c      	beq.n	8005cc8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	3307      	adds	r3, #7
 8005cb2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	f023 0307 	bic.w	r3, r3, #7
 8005cba:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005cbc:	68ba      	ldr	r2, [r7, #8]
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	1ad3      	subs	r3, r2, r3
 8005cc2:	4a1f      	ldr	r2, [pc, #124]	; (8005d40 <prvHeapInit+0xac>)
 8005cc4:	4413      	add	r3, r2
 8005cc6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005ccc:	4a1d      	ldr	r2, [pc, #116]	; (8005d44 <prvHeapInit+0xb0>)
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005cd2:	4b1c      	ldr	r3, [pc, #112]	; (8005d44 <prvHeapInit+0xb0>)
 8005cd4:	2200      	movs	r2, #0
 8005cd6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	68ba      	ldr	r2, [r7, #8]
 8005cdc:	4413      	add	r3, r2
 8005cde:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005ce0:	2208      	movs	r2, #8
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	1a9b      	subs	r3, r3, r2
 8005ce6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	f023 0307 	bic.w	r3, r3, #7
 8005cee:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	4a15      	ldr	r2, [pc, #84]	; (8005d48 <prvHeapInit+0xb4>)
 8005cf4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005cf6:	4b14      	ldr	r3, [pc, #80]	; (8005d48 <prvHeapInit+0xb4>)
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	2200      	movs	r2, #0
 8005cfc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8005cfe:	4b12      	ldr	r3, [pc, #72]	; (8005d48 <prvHeapInit+0xb4>)
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	2200      	movs	r2, #0
 8005d04:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005d0a:	683b      	ldr	r3, [r7, #0]
 8005d0c:	68fa      	ldr	r2, [r7, #12]
 8005d0e:	1ad2      	subs	r2, r2, r3
 8005d10:	683b      	ldr	r3, [r7, #0]
 8005d12:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005d14:	4b0c      	ldr	r3, [pc, #48]	; (8005d48 <prvHeapInit+0xb4>)
 8005d16:	681a      	ldr	r2, [r3, #0]
 8005d18:	683b      	ldr	r3, [r7, #0]
 8005d1a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005d1c:	683b      	ldr	r3, [r7, #0]
 8005d1e:	685b      	ldr	r3, [r3, #4]
 8005d20:	4a0a      	ldr	r2, [pc, #40]	; (8005d4c <prvHeapInit+0xb8>)
 8005d22:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005d24:	683b      	ldr	r3, [r7, #0]
 8005d26:	685b      	ldr	r3, [r3, #4]
 8005d28:	4a09      	ldr	r2, [pc, #36]	; (8005d50 <prvHeapInit+0xbc>)
 8005d2a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005d2c:	4b09      	ldr	r3, [pc, #36]	; (8005d54 <prvHeapInit+0xc0>)
 8005d2e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005d32:	601a      	str	r2, [r3, #0]
}
 8005d34:	bf00      	nop
 8005d36:	3714      	adds	r7, #20
 8005d38:	46bd      	mov	sp, r7
 8005d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d3e:	4770      	bx	lr
 8005d40:	20003f6c 	.word	0x20003f6c
 8005d44:	20007b6c 	.word	0x20007b6c
 8005d48:	20007b74 	.word	0x20007b74
 8005d4c:	20007b7c 	.word	0x20007b7c
 8005d50:	20007b78 	.word	0x20007b78
 8005d54:	20007b88 	.word	0x20007b88

08005d58 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005d58:	b480      	push	{r7}
 8005d5a:	b085      	sub	sp, #20
 8005d5c:	af00      	add	r7, sp, #0
 8005d5e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005d60:	4b28      	ldr	r3, [pc, #160]	; (8005e04 <prvInsertBlockIntoFreeList+0xac>)
 8005d62:	60fb      	str	r3, [r7, #12]
 8005d64:	e002      	b.n	8005d6c <prvInsertBlockIntoFreeList+0x14>
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	60fb      	str	r3, [r7, #12]
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	687a      	ldr	r2, [r7, #4]
 8005d72:	429a      	cmp	r2, r3
 8005d74:	d8f7      	bhi.n	8005d66 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	685b      	ldr	r3, [r3, #4]
 8005d7e:	68ba      	ldr	r2, [r7, #8]
 8005d80:	4413      	add	r3, r2
 8005d82:	687a      	ldr	r2, [r7, #4]
 8005d84:	429a      	cmp	r2, r3
 8005d86:	d108      	bne.n	8005d9a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	685a      	ldr	r2, [r3, #4]
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	685b      	ldr	r3, [r3, #4]
 8005d90:	441a      	add	r2, r3
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	685b      	ldr	r3, [r3, #4]
 8005da2:	68ba      	ldr	r2, [r7, #8]
 8005da4:	441a      	add	r2, r3
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	429a      	cmp	r2, r3
 8005dac:	d118      	bne.n	8005de0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	681a      	ldr	r2, [r3, #0]
 8005db2:	4b15      	ldr	r3, [pc, #84]	; (8005e08 <prvInsertBlockIntoFreeList+0xb0>)
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	429a      	cmp	r2, r3
 8005db8:	d00d      	beq.n	8005dd6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	685a      	ldr	r2, [r3, #4]
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	685b      	ldr	r3, [r3, #4]
 8005dc4:	441a      	add	r2, r3
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	681a      	ldr	r2, [r3, #0]
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	601a      	str	r2, [r3, #0]
 8005dd4:	e008      	b.n	8005de8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005dd6:	4b0c      	ldr	r3, [pc, #48]	; (8005e08 <prvInsertBlockIntoFreeList+0xb0>)
 8005dd8:	681a      	ldr	r2, [r3, #0]
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	601a      	str	r2, [r3, #0]
 8005dde:	e003      	b.n	8005de8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	681a      	ldr	r2, [r3, #0]
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005de8:	68fa      	ldr	r2, [r7, #12]
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	429a      	cmp	r2, r3
 8005dee:	d002      	beq.n	8005df6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	687a      	ldr	r2, [r7, #4]
 8005df4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005df6:	bf00      	nop
 8005df8:	3714      	adds	r7, #20
 8005dfa:	46bd      	mov	sp, r7
 8005dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e00:	4770      	bx	lr
 8005e02:	bf00      	nop
 8005e04:	20007b6c 	.word	0x20007b6c
 8005e08:	20007b74 	.word	0x20007b74

08005e0c <__libc_init_array>:
 8005e0c:	b570      	push	{r4, r5, r6, lr}
 8005e0e:	4d0d      	ldr	r5, [pc, #52]	; (8005e44 <__libc_init_array+0x38>)
 8005e10:	4c0d      	ldr	r4, [pc, #52]	; (8005e48 <__libc_init_array+0x3c>)
 8005e12:	1b64      	subs	r4, r4, r5
 8005e14:	10a4      	asrs	r4, r4, #2
 8005e16:	2600      	movs	r6, #0
 8005e18:	42a6      	cmp	r6, r4
 8005e1a:	d109      	bne.n	8005e30 <__libc_init_array+0x24>
 8005e1c:	4d0b      	ldr	r5, [pc, #44]	; (8005e4c <__libc_init_array+0x40>)
 8005e1e:	4c0c      	ldr	r4, [pc, #48]	; (8005e50 <__libc_init_array+0x44>)
 8005e20:	f000 f8f2 	bl	8006008 <_init>
 8005e24:	1b64      	subs	r4, r4, r5
 8005e26:	10a4      	asrs	r4, r4, #2
 8005e28:	2600      	movs	r6, #0
 8005e2a:	42a6      	cmp	r6, r4
 8005e2c:	d105      	bne.n	8005e3a <__libc_init_array+0x2e>
 8005e2e:	bd70      	pop	{r4, r5, r6, pc}
 8005e30:	f855 3b04 	ldr.w	r3, [r5], #4
 8005e34:	4798      	blx	r3
 8005e36:	3601      	adds	r6, #1
 8005e38:	e7ee      	b.n	8005e18 <__libc_init_array+0xc>
 8005e3a:	f855 3b04 	ldr.w	r3, [r5], #4
 8005e3e:	4798      	blx	r3
 8005e40:	3601      	adds	r6, #1
 8005e42:	e7f2      	b.n	8005e2a <__libc_init_array+0x1e>
 8005e44:	080060f0 	.word	0x080060f0
 8005e48:	080060f0 	.word	0x080060f0
 8005e4c:	080060f0 	.word	0x080060f0
 8005e50:	080060f4 	.word	0x080060f4

08005e54 <__retarget_lock_acquire_recursive>:
 8005e54:	4770      	bx	lr

08005e56 <__retarget_lock_release_recursive>:
 8005e56:	4770      	bx	lr

08005e58 <memcpy>:
 8005e58:	440a      	add	r2, r1
 8005e5a:	4291      	cmp	r1, r2
 8005e5c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8005e60:	d100      	bne.n	8005e64 <memcpy+0xc>
 8005e62:	4770      	bx	lr
 8005e64:	b510      	push	{r4, lr}
 8005e66:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005e6a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005e6e:	4291      	cmp	r1, r2
 8005e70:	d1f9      	bne.n	8005e66 <memcpy+0xe>
 8005e72:	bd10      	pop	{r4, pc}

08005e74 <memset>:
 8005e74:	4402      	add	r2, r0
 8005e76:	4603      	mov	r3, r0
 8005e78:	4293      	cmp	r3, r2
 8005e7a:	d100      	bne.n	8005e7e <memset+0xa>
 8005e7c:	4770      	bx	lr
 8005e7e:	f803 1b01 	strb.w	r1, [r3], #1
 8005e82:	e7f9      	b.n	8005e78 <memset+0x4>

08005e84 <cleanup_glue>:
 8005e84:	b538      	push	{r3, r4, r5, lr}
 8005e86:	460c      	mov	r4, r1
 8005e88:	6809      	ldr	r1, [r1, #0]
 8005e8a:	4605      	mov	r5, r0
 8005e8c:	b109      	cbz	r1, 8005e92 <cleanup_glue+0xe>
 8005e8e:	f7ff fff9 	bl	8005e84 <cleanup_glue>
 8005e92:	4621      	mov	r1, r4
 8005e94:	4628      	mov	r0, r5
 8005e96:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005e9a:	f000 b869 	b.w	8005f70 <_free_r>
	...

08005ea0 <_reclaim_reent>:
 8005ea0:	4b2c      	ldr	r3, [pc, #176]	; (8005f54 <_reclaim_reent+0xb4>)
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	4283      	cmp	r3, r0
 8005ea6:	b570      	push	{r4, r5, r6, lr}
 8005ea8:	4604      	mov	r4, r0
 8005eaa:	d051      	beq.n	8005f50 <_reclaim_reent+0xb0>
 8005eac:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8005eae:	b143      	cbz	r3, 8005ec2 <_reclaim_reent+0x22>
 8005eb0:	68db      	ldr	r3, [r3, #12]
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d14a      	bne.n	8005f4c <_reclaim_reent+0xac>
 8005eb6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005eb8:	6819      	ldr	r1, [r3, #0]
 8005eba:	b111      	cbz	r1, 8005ec2 <_reclaim_reent+0x22>
 8005ebc:	4620      	mov	r0, r4
 8005ebe:	f000 f857 	bl	8005f70 <_free_r>
 8005ec2:	6961      	ldr	r1, [r4, #20]
 8005ec4:	b111      	cbz	r1, 8005ecc <_reclaim_reent+0x2c>
 8005ec6:	4620      	mov	r0, r4
 8005ec8:	f000 f852 	bl	8005f70 <_free_r>
 8005ecc:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8005ece:	b111      	cbz	r1, 8005ed6 <_reclaim_reent+0x36>
 8005ed0:	4620      	mov	r0, r4
 8005ed2:	f000 f84d 	bl	8005f70 <_free_r>
 8005ed6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8005ed8:	b111      	cbz	r1, 8005ee0 <_reclaim_reent+0x40>
 8005eda:	4620      	mov	r0, r4
 8005edc:	f000 f848 	bl	8005f70 <_free_r>
 8005ee0:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8005ee2:	b111      	cbz	r1, 8005eea <_reclaim_reent+0x4a>
 8005ee4:	4620      	mov	r0, r4
 8005ee6:	f000 f843 	bl	8005f70 <_free_r>
 8005eea:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8005eec:	b111      	cbz	r1, 8005ef4 <_reclaim_reent+0x54>
 8005eee:	4620      	mov	r0, r4
 8005ef0:	f000 f83e 	bl	8005f70 <_free_r>
 8005ef4:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8005ef6:	b111      	cbz	r1, 8005efe <_reclaim_reent+0x5e>
 8005ef8:	4620      	mov	r0, r4
 8005efa:	f000 f839 	bl	8005f70 <_free_r>
 8005efe:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8005f00:	b111      	cbz	r1, 8005f08 <_reclaim_reent+0x68>
 8005f02:	4620      	mov	r0, r4
 8005f04:	f000 f834 	bl	8005f70 <_free_r>
 8005f08:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005f0a:	b111      	cbz	r1, 8005f12 <_reclaim_reent+0x72>
 8005f0c:	4620      	mov	r0, r4
 8005f0e:	f000 f82f 	bl	8005f70 <_free_r>
 8005f12:	69a3      	ldr	r3, [r4, #24]
 8005f14:	b1e3      	cbz	r3, 8005f50 <_reclaim_reent+0xb0>
 8005f16:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8005f18:	4620      	mov	r0, r4
 8005f1a:	4798      	blx	r3
 8005f1c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8005f1e:	b1b9      	cbz	r1, 8005f50 <_reclaim_reent+0xb0>
 8005f20:	4620      	mov	r0, r4
 8005f22:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8005f26:	f7ff bfad 	b.w	8005e84 <cleanup_glue>
 8005f2a:	5949      	ldr	r1, [r1, r5]
 8005f2c:	b941      	cbnz	r1, 8005f40 <_reclaim_reent+0xa0>
 8005f2e:	3504      	adds	r5, #4
 8005f30:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005f32:	2d80      	cmp	r5, #128	; 0x80
 8005f34:	68d9      	ldr	r1, [r3, #12]
 8005f36:	d1f8      	bne.n	8005f2a <_reclaim_reent+0x8a>
 8005f38:	4620      	mov	r0, r4
 8005f3a:	f000 f819 	bl	8005f70 <_free_r>
 8005f3e:	e7ba      	b.n	8005eb6 <_reclaim_reent+0x16>
 8005f40:	680e      	ldr	r6, [r1, #0]
 8005f42:	4620      	mov	r0, r4
 8005f44:	f000 f814 	bl	8005f70 <_free_r>
 8005f48:	4631      	mov	r1, r6
 8005f4a:	e7ef      	b.n	8005f2c <_reclaim_reent+0x8c>
 8005f4c:	2500      	movs	r5, #0
 8005f4e:	e7ef      	b.n	8005f30 <_reclaim_reent+0x90>
 8005f50:	bd70      	pop	{r4, r5, r6, pc}
 8005f52:	bf00      	nop
 8005f54:	20000010 	.word	0x20000010

08005f58 <__malloc_lock>:
 8005f58:	4801      	ldr	r0, [pc, #4]	; (8005f60 <__malloc_lock+0x8>)
 8005f5a:	f7ff bf7b 	b.w	8005e54 <__retarget_lock_acquire_recursive>
 8005f5e:	bf00      	nop
 8005f60:	20007b8c 	.word	0x20007b8c

08005f64 <__malloc_unlock>:
 8005f64:	4801      	ldr	r0, [pc, #4]	; (8005f6c <__malloc_unlock+0x8>)
 8005f66:	f7ff bf76 	b.w	8005e56 <__retarget_lock_release_recursive>
 8005f6a:	bf00      	nop
 8005f6c:	20007b8c 	.word	0x20007b8c

08005f70 <_free_r>:
 8005f70:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005f72:	2900      	cmp	r1, #0
 8005f74:	d044      	beq.n	8006000 <_free_r+0x90>
 8005f76:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005f7a:	9001      	str	r0, [sp, #4]
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	f1a1 0404 	sub.w	r4, r1, #4
 8005f82:	bfb8      	it	lt
 8005f84:	18e4      	addlt	r4, r4, r3
 8005f86:	f7ff ffe7 	bl	8005f58 <__malloc_lock>
 8005f8a:	4a1e      	ldr	r2, [pc, #120]	; (8006004 <_free_r+0x94>)
 8005f8c:	9801      	ldr	r0, [sp, #4]
 8005f8e:	6813      	ldr	r3, [r2, #0]
 8005f90:	b933      	cbnz	r3, 8005fa0 <_free_r+0x30>
 8005f92:	6063      	str	r3, [r4, #4]
 8005f94:	6014      	str	r4, [r2, #0]
 8005f96:	b003      	add	sp, #12
 8005f98:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005f9c:	f7ff bfe2 	b.w	8005f64 <__malloc_unlock>
 8005fa0:	42a3      	cmp	r3, r4
 8005fa2:	d908      	bls.n	8005fb6 <_free_r+0x46>
 8005fa4:	6825      	ldr	r5, [r4, #0]
 8005fa6:	1961      	adds	r1, r4, r5
 8005fa8:	428b      	cmp	r3, r1
 8005faa:	bf01      	itttt	eq
 8005fac:	6819      	ldreq	r1, [r3, #0]
 8005fae:	685b      	ldreq	r3, [r3, #4]
 8005fb0:	1949      	addeq	r1, r1, r5
 8005fb2:	6021      	streq	r1, [r4, #0]
 8005fb4:	e7ed      	b.n	8005f92 <_free_r+0x22>
 8005fb6:	461a      	mov	r2, r3
 8005fb8:	685b      	ldr	r3, [r3, #4]
 8005fba:	b10b      	cbz	r3, 8005fc0 <_free_r+0x50>
 8005fbc:	42a3      	cmp	r3, r4
 8005fbe:	d9fa      	bls.n	8005fb6 <_free_r+0x46>
 8005fc0:	6811      	ldr	r1, [r2, #0]
 8005fc2:	1855      	adds	r5, r2, r1
 8005fc4:	42a5      	cmp	r5, r4
 8005fc6:	d10b      	bne.n	8005fe0 <_free_r+0x70>
 8005fc8:	6824      	ldr	r4, [r4, #0]
 8005fca:	4421      	add	r1, r4
 8005fcc:	1854      	adds	r4, r2, r1
 8005fce:	42a3      	cmp	r3, r4
 8005fd0:	6011      	str	r1, [r2, #0]
 8005fd2:	d1e0      	bne.n	8005f96 <_free_r+0x26>
 8005fd4:	681c      	ldr	r4, [r3, #0]
 8005fd6:	685b      	ldr	r3, [r3, #4]
 8005fd8:	6053      	str	r3, [r2, #4]
 8005fda:	4421      	add	r1, r4
 8005fdc:	6011      	str	r1, [r2, #0]
 8005fde:	e7da      	b.n	8005f96 <_free_r+0x26>
 8005fe0:	d902      	bls.n	8005fe8 <_free_r+0x78>
 8005fe2:	230c      	movs	r3, #12
 8005fe4:	6003      	str	r3, [r0, #0]
 8005fe6:	e7d6      	b.n	8005f96 <_free_r+0x26>
 8005fe8:	6825      	ldr	r5, [r4, #0]
 8005fea:	1961      	adds	r1, r4, r5
 8005fec:	428b      	cmp	r3, r1
 8005fee:	bf04      	itt	eq
 8005ff0:	6819      	ldreq	r1, [r3, #0]
 8005ff2:	685b      	ldreq	r3, [r3, #4]
 8005ff4:	6063      	str	r3, [r4, #4]
 8005ff6:	bf04      	itt	eq
 8005ff8:	1949      	addeq	r1, r1, r5
 8005ffa:	6021      	streq	r1, [r4, #0]
 8005ffc:	6054      	str	r4, [r2, #4]
 8005ffe:	e7ca      	b.n	8005f96 <_free_r+0x26>
 8006000:	b003      	add	sp, #12
 8006002:	bd30      	pop	{r4, r5, pc}
 8006004:	20007b90 	.word	0x20007b90

08006008 <_init>:
 8006008:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800600a:	bf00      	nop
 800600c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800600e:	bc08      	pop	{r3}
 8006010:	469e      	mov	lr, r3
 8006012:	4770      	bx	lr

08006014 <_fini>:
 8006014:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006016:	bf00      	nop
 8006018:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800601a:	bc08      	pop	{r3}
 800601c:	469e      	mov	lr, r3
 800601e:	4770      	bx	lr
